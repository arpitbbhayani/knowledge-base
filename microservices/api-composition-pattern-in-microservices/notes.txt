API Composition Pattern In Microservices

API composition Pattern in Micro services ¥ Say we have 3 services . Orders . logistics wants Payments , and . A user orders Payments to fetch order detail , how would data ? logistics we get the required classic problem : Querying Microservices To microservices a common pattern in use is API composition query , " have " In the API composition pattern . we a composer that 0 takes the Ii user query - get order Detail - identifies the services to talk to a. - gets the responses from them composer - combines the result get Order get Payment v u - returns the response Orders Payments v logistics get Deliverystatus

So how do , we implement it ? Do we need to write Composer from scratch ? No ! " API Gateway " is a classic example of a composer so , we put an API gateway in front of our microservices and the rules configure . > Orders > API gateway > Payments Kraken D. Kong , > logistics AWS API gateway The calls to the individual microservices The implementation of the can happen consumer depends on Takes longer time → sequentially to compute programming lang - - Parallel - use case at hand machine - → Requires more resources

Improving end user experience The impact API is not just limited to microservices of composition it has huge role to play in giving a great UX Imagine this , > Orders - More round trips i - High latency " > Payments merge / collate client - Data logic , ↳ gig, , , at client Hence to make , experience better , we should compose at server + Better use of user 's data One roundtrip - > Orders > Composer > Payments - logic at server client - Client can be dumb > logistics low latency - thus solid experience End user gets pretty with just one data roundtrip .

Branch Composition Branch composition is Multi-level API composition services implementing other composition 10 > seller gather appropriate details > Orders > Inventory 0 Composer > Payments client > logistics > Provider Advantages of API composition - Simple to implement to interact - User has a single point First line of - Hides the implementation detail and complexities defence and limiting be implemented at composer - Security can - Can cover " bad " design decisions and wrap them with a new interface Hides legacy system and we can replace it gradually - s composer > Payments legacy Monolith >

Disadvantages of API Composition What if we fetch large data from microservices - ↳ Joining them on API gateway would be inefficient Huge because of → ☐q Blog content 2 Comments > Blogs ↳ • > API gateway > comments > Claps Overall number availability is challenged when the of - services composer interacts with Increases Having transactional data consistency is very difficult - All services Distributed Transaction eg or none across . _ . . : to be - composer needs managed and maintained composer become a bottleneck may -