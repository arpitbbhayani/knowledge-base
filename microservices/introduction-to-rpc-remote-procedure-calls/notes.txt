RPC - Remote Procedure Calls

Remote Procedure Calls " Ed = This design is not RPC Client < > server instead it sparids RES specific . it the entire distributed systems client wants something to be done , sends the to the the paradigm request server , server computes and sends the so then what is RPC ? response , say you are bank and login Notifying a user , a send OTP to ??? you have to synchronously c- , Your user to log them in . Notification ( email , password ) > HOW would ? def login : we implement this The function notification - Otp might notification Otp ( email ) - make an HTTP call using REST to talk to the notification service and core problem send to OTP . Every language has its own like requests and every HTTP library one who has to talk to notification has to use a a client , make the call . retry . handle failures

what if we abstract out the repetitive and mundane tasks like communication protocol . object creation , failures . retries , etc compression . streaming , and just focus on writing the core business logic in a function body that looks like a local procedure call . This is how RPC was conceptualized . . - def login ( email , password ) : > what looks like a regular function call is infect a Remote Procedure Call that happens over the network notification Otp ( email ) - through stubs . call It looks like a routine function location Transparency ^ but it talks the network infect over Core idea the to send with notification service is to hide the complexity of OTP over email to the user . a remote call . slower than * RPC are magnitude local procedure calls and marshalling - marshalling un network movement packet -

stubs : ' ' login is on the Auth service ( email , password ) def login ' : ' sue notification Otp - is on the Notification someone needs to convert ( serialize ) Auth service notification Otp ( email ) - the information from " " into that be sent some format can Responsibility of a stub > over the wine ; and convert it back to native objects on Notification service Kola ng Java Auth Notification < RPC Runtime ^ ^ > REQ RES < The stub converts its methods , request types , response types into form used by the RPC system . Send Notification Request Send Notification Response Golang Struct in Auth Svc Java class in Notification Svc stub is the main reason why the remote procedure appear local .

Stub Interface Description language service { } We first write the generator rpc power " generator type Message Interface Definition . We then write the Stub Interface Definition [ proto ] . server program that interface ' implements the ' v . You can use the we then write the client generated files natively in your code bases program that uses the same interface to • go file • java file talk to the server . Communication in RPC RPC 3 communication can use any layer protocol TCP or UDP The idea other would be of choosing one over - core features - performance * RPC can also happen over HTTP eg : GRPC uses HTTP /2 as a transport

Procedure Calls ? Why Remote API contract easy to use and strong - local call boosts deu - invoke remote call just like a productivity - most RPC frameworks , like GRPC , supports most modern languages - most mundane tasks are abstracted to native objects failures payload conversion - - - retries - n / w protocol and multiplexing - performance out of the box - compression - multiplexing - efficient payload - connection pool - streaming security is a plug and multi language communication - - - you don't need to write client - libs . they are auto - generated concerns while RPC using - stubs need to be regenerated when signature changes - testing RPC is non-trivial - getting started is a little challenging - browser support is limited