Things to remember while building Microservices

Things to remember while building Micro services Huge scope for growth A lot and of core services glue services are built when we adopt microservices . Hence there be , are many things that needs to built , architect , scale and manage Engineers can use this opportunity to step up - , own and earn some brownie points . * not just some technical side only we can showcase ownership accountability , , attention to detail , leadership conflicts are inevitable There is no one right way to build any system . When teams work together , there would be org about arch / decisions . - data driven informed decisions - watch and learn consult senior engineers sometimes / not always - ← to go okay along with design you disagree with - - let seniors discuss and converge - deciding in silo is fatal - vision will evolve , adapt

Architecture evolves say . we have decided to use MySQL as our primary DB but now our use case / access pattern changed . hence be , we should okay charring the database . The decision of deviating from what agreed upon is a big one . This requires and solid consensus a reasoning . Note : when we do ↑ . document the reasons Technical Debt We cannot build it the best way possible ! always Mostly because we have to ship faster . constant Engineering efforts are in a race against time ↳ Hence we cut corners Technical Debt ↳ make some quick inefficient decisions ↓ These decisions prevent us from shipping / building faster in the future It can also happen because the vision / requirements changed midway Technical Debt is catastrophic and should be cleaned up periodically Every . sprint we should reserve it ~ 10% of bandueim in cleaning up .

Service Templates standardization and Enforcing we know how important is to standardize microservices but instead of relying on service owners , build templates to spin up microservices so , anyone using a template . Would automatically follow the standard and best practices . Ex : HTTP and GRPC for communication Hysteria for circuit breaking } Prometheus for metrics clients integrated Red is as a cache core idea : avoid duplicate efforts that are prone to deviate Enforcing standardization may backfire as engineers might feel strangled → this can be solved by providing proper reasoning → Updating the central template should be a collective effort where most teams are involved . involved Weill reduce Keeping teams and engineers the negative sentiment .

Business >> Engineering to be " " Has one of the most offending thing for an engineer but it is true . . . Whatever be aligned with the business we do , should strategic goal of Imagine . Business wants to ML Team provisions achieve profitability 50 GPU clusters some work should be concioue.ly deprioritized and this is not at all personal The the tasks should * projects we pick up , we do . always be aligned cuith the business 's strategic goals .