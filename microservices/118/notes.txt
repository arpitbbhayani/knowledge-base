Handling Timeouts in Microservices

Handling timeouts in Micro services 1 Picking the best tech stack ! Micro services are great I → 1, Focussed scaling separation of Flexibility concern But there them is Timeouts are concerns , one of Scenario : to search Search User wants Blogs . service computes most to relevant blogs . Then talks to Analytics service get Blog views and then returns the response to the user . Analytics Service > > < Search Service < a / n n User v The problem Elastic search MongoDB analytics service is not responding . . . Synchronous Dependency How wait ? long should you Send partial response What action should take ? you Not send any response to the user

Analytics Service > > < Search Service < n n User v Elastic search MongoDB what could ? go wrong ↳ Analytics service never got the request ✗ Analytics Service > search Service the Analytics team reached the search Service ↳ Response from never Analytics Service > Search Service < ✗ ↳ Analytics is taking too service long to process Analytics Service > search Service •

The core problem : Delays are arbitrarily long wait ? cannot wait forever ! so how , long do we We Use Timeouts , always search Service Analytics Service > [ timer ] Waits for the response from the analytics service for at the Max 10 seconds . ← Timeout How to handle timeouts , then . . . . Approach 1 : Ignore [ not recommended ] We assume operation succeeded → leads to unpredictable UX it but actually failed . . . Good practice : catch all exceptions . . . everytime and then take an informed call depending on the context .

Approach 2: configure and use defaults Upon timeout choose to value . you may use a default get total - blogs search Service Analytics Service > < ✗ timeout I use default , total - blogs = 0 Approach 3 : Retry Assume that the remote and operation failed , retry . " " Retries are simple when it is a read request But , sometimes situation becomes tricky ↳ request is non - idempotent eg : moving money from A to B ↳ request is expensive eg : heavy analytics query ↳ other service is overloaded and you add more load with retry Good to have : Retries with exponential back offs [ Is , 2s 4s , , 8s , . . . . ] Make services as idempotent as possible

Approach 4 : Retry only if needed In some cases . We may check for the completion then decide to and retry eg : user tweeting the same post twice accidentally lcuitnin one minute ) ¥ a s Twitter < > El DB UL ( Js I client ) ul recent tweets : I ] E, - - @ Cache recent tweet in last 1 minute 5 the architect Event driven arch Approach : . → Remove communication synchronous wherever possible Highlights : Too short → false positives always have timeouts 1 picking timeout value is tricky Too long perf bottlenecks → → . make retries safe ↳ Idem potence