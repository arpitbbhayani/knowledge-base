it says: handle with care, and one such and basically one such thing that you need to definitely handle with care is timeouts, right?
so in this video let's talk about what exactly is the problem with timeout, or what exactly is the problem with communication that requires us to have basically timeouts in place, and discuss five approaches that would help you handle timeouts better and build a very robust micro services based architecture.
when two services talk to each other, we need to handle timeouts like let's.
so we cannot directly send this response to the user because there is one attribute that needs to be filled, and this attribute is the total number of views that the blog got to date, right?
here this communication becomes a synchronous communication because user is firing a search query, request comes to search service.
then it immediately fires a query, a request to analytics service, which says that: hey, these are the blog ids, give me basic analytics information of all of these blogs.
so here the problem, because this is a synchronous dependency- the problem comes up when your analytic service is not responding fast enough, right, or not responding at all.
right, then, how long should your search service wait for a response from the analytic service?
so, first thing that could go wrong is when there is this, my inter service communication is where, let's say, somehow the request made by the search service never reached the analytics service.
but due to network congestion, due to an asynchronous communication, this could happen where you think that you fired a request and waiting for response, but this request never reached analytic service for some reason.
third possible case would be your search service made a request on analytic service.
like it should be like: hey, i'll wait at max for, let's say, one second, two seconds, five second, ten second, depending on your domain, and then, if you don't get a response, then you say: hey, now it's a timeout, now i'll do whatever i want.
let's say, in a service like search, although i wrote 10 seconds, but in a service like search you could, you don't want your end user to wait for even more than a second.
so it might be in like 200 milliseconds, 300 millisecond, 500 milliseconds, but there has to be this timeout that other service agrees or hey, i'll be, no matter what, i'll be serving the response in, let's say, 100 millisecond, so you can keep your sla for 200 millisecond or something right, but timeout contract should definitely be there.
you are ignoring where you made the call, where your search service made a call to analytic service and it and it resulted into and it basically waited for something.
so here, one thing is that we either assume that the operations- like in some cases where we may assume that the operation is succeeded, where we did not get a response, like not in search and analytics use case but some other use case- let's say you want to asynchronously store something in the database and you put the message.
hey, timeout happened, waited for the response.
your search service waited for less than 200 milliseconds for it to get response.
the only data it was relying on analytic service to get response was the total number of blocks.
what if, when, when the timeout happened- which means for, let's say, it waited for 200 milliseconds but it did not get any response- so what you can do, you can use the default value.
so this is another way of handling timeouts where, in some cases, it might be possible for you to use a default value.
when it is read request, like in search and analytics use case, it's very easy for you to retry.
so your natural response to that is: hey, let me retry that, right, so you will retry the you'll.
you'll basically fire the same thing again on your analytic service, waiting for the response, expecting that now it would return you in in, let's say, 50 milliseconds.
but they become very tricky when your request is non idempotent, like what is hard important, which means that same operation fire twice will not have any repercussions on to it, so other services is handling it well.
but but when you fired that query and you waited for that response, it resulted in a timeout.
now, if you retry this operation- so let's say a wanted to transfer 10 rupees to sorry account a, the overall money of basically 10 rupees needs to be transferred from accounted to account b and it failed because of time out and you retried it right.
if it is not item potent, then you definitely don't want to retry right.
so the idea, the the situation is, let's say, your search service was depending on your analytic service and you fired a request analytics.
you didn't get a response and there was a timeout, so you said, hey, let me retry.
so that's where you need to know when you should be retrying, like in this case, when your other service is already overloaded and you are firing that query again and again, and again and again, then the load will never decrease on that service, so that service will never get time to recover, right?
and other thing that you definitely should think about is where, like if you're dependent or your if- sorry, if your depending service is idempotent or not.
uh, service a when, when made that operation didn't get a response, it led to timeout.
so to prevent the situation, what twitter might do is like, let's say, the, the javascript client of user is is doing that retry.
if the user did, then your twitter repair might send an error saying: hey, i think you just made a tweet you might want to like.
so always think about something like: have a, have a micro service silo if anyone wants to communicate to this.