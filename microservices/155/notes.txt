Should we standardize Microservices?

Standardizing Microservices we love ! creating Micro services But there should be standard to create one a way " " A Good service " ( " - define what a good service is for your org ) what the capabilities that would make it - are - manageable There has to be common set a of - observable characteristics that micro service every - debuggable have of an org should But then what about ? autonomy The biggest advantage of micro services is autonomihg . allowed to take its decision Every service is own But bringing in standardization challenges independence Hence , we need to strike a balance standardization is important , as it allows us to keep entire system coherent & uniform

Monitoring > > It is essential to know how 0 we trace cross service view ¥ - i , n of a request s system-wide request Distributed wise view → tracing - AUS X using Zipkin ray - , we also need to know - hotel every server is doing → CPU , Memory . Disk consumption - how every service is doing → Health check Everything at one place > Collector > El : Metrics DB Possible Techs [ set alerting on top servers Prometheus , Graphite , of these metrics ] etc New Relic Data Dog , , collect metrics : CPU , RAM , Disk , Network collect logs : Application . Process , User log , SSH , 05 Collect app metrics : 2 xx , 3✗× , 4 ✗✗ , 4 ✗✗ , response time request count # servers ,

Interfaces ? How would two services talk to each other 0 * talk to ? HOW would an end user a service ?? V to achieve this but not many Have a few ways , . ?? eg : have HTTP / REST and GRPC ✓ Also , within a particular protocol . standardize how to ? number and define routes of segments - resources - how to name endpoints ? singular or plural how to documents ? limit / offset token - paginate or A critical thing to standardize : Versioning / v1 / Users or / users / v1 Or VI. a.com / users connection timeout , retry strategy , payload type t, ↓ ↓ JSON XML TXT not too small , exponential , . nor large back OH

Tolerance what bombards other if one service One bad service can take down the & Profile entire infrastructure . Hence each , service service 1 Service 2 should shield itself few strategies to help us achieve this oration the number from each service of calls - 300 calls per second from service 1 to profile - limit the number of outgoing calls from a service - have an ability to cut - off incoming call from a service have an ability to cut off outgoing call to a service - - ' - . . g- > → ← Profile . . . . > - - ← > . . . → Service 2 Service I