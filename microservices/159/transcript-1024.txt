so there are few key things to remember or best practices to follow in order to ensure that we are keeping our services ready for integration, and it would make life simple for everyone who is integrating with it.
this is one of the most critical things to consider or to have whenever you are designing a micro service.
so you cannot just on the fly change the type of a column or remove a column or remove an attribute, because that would have catastrophic effect on the services that are intake, that are interfacing or integrating with you.
so three key places where you should be very proactively thinking, hey, are these backward compatible?
but if you are using relational database, like, ensure that if you are adding a new column, removing a column or making alterations to a column, they are all backward compatible.
some of these changes are not backward compatible, but that's what you have to keep in mind: that doing some things that would break your forward compatibility or your backward compatibility is wrong.
now the api response that you send, or the way you are accepting the request, it has to be backward compatible.
you cannot abruptly change the way you are interfacing overnight, because it would break the consumers or other services without depending on it.
third, messages sent in asynchronous communication, so obviously synchronous, like the previous one we discussed, where it was synchronous communication, a rest api being exposed and people using that to talk to microservices.
this is a synchronous one, where a microservice puts a message in a broker, consumers pick it up from different service and they do something with it.
right, the messages that you are sending needs to be forward as well as backward compatible.
the changes or the deletion of some attributes or keys can be gradual, but it should not be abrupt, right?
first of all, try to never using a very strong word, but in most cases it would not harm if you just continue to support a particular column or an attribute, right?
so never change the type of a column or an attribute overnight, because if that would happen, the depending services would falter.
we would almost ensure forward as well as backward compatibility.
so never delete a call over an attribute in the api response message, passing or database.
have this in your day to day checklist that whenever you are making any changes in your api response or your database, just ensure that, hey, will this break something?
but what would happen is, if we make a wrong technology choice, what would happen is the way interfacing would happen would be coupled to that tool framework library, whatever you are using, right.
so whenever you are picking a particular technology, ensure that the way you are defining your interface it has to be technology agnostic.
for example, if i am using a particular library to expose an rpc endpoint, it should not be the case that the other services who has to integrate with this has to be written in a particular language with a particular library on a particular tech stack.
a quick example: so let's say this is your first or the first microservice that the service that you are writing is exposing an rpc endpoint with a marshalling format that can only be understand by a library that is written only in java and would work only with mysql as a backend.
no, never use a technology for never use a technology that would keep you very closely coupled, very closely coupled with, and or rather, which would demand other services to be written in a specific way.
you can have tight coupling within your micro service where you are adhering to a particular tech stack and return in a certain way, but your interfacing should not dictate other services to do key.
you have to think that, hey, who are the consumers of my api?
let me make life simple for them, right?
so your api needs to be simple.
so integration with your apis or your micro services needs to be simple enough so that it promotes integration.
so if the way someone has to talk to microsoft it's super complex to set up or super complex to understand, people would not use it, and you can see it in day-to-day world with a lot of apis being available by sas providers or software as a service.
if it's harder for people to integrate or to use an api, people would prefer to go for an option that makes it simple for them.
you have to keep things simple.
simple api, simple data format, common protocols- don't go out of the world like unnecessarily okay.
but it's important to understand when you are interfacing or when you are designing a good micro service.
so never let your interfacing services learn about internal implementation.
so what needs to happen is the services that you have needs to have their own common interface.
hey, if you'd want to talk to me, make this rest api call and get the response.
they should not know how your db structured, what column your db has or what caching strategy are you using, or they directly talking to your db or your cache to get things done.
keep your interfaces very straight, very simple for others to interact, rather than making it like asking the gate.
you can directly talk to our database and do that, or know an internal detail and try to exploit it.
be dressed rpc whatever you'd like, but it has to be technology agnostic, it has to be very simple and it has to be very strict on the interface.
no one should know the internal details of each other, right?
these are the four key points that you should definitely be think are four key points and best practices that you should follow while designing micro services in order to ensure that your micro services interface and integrate with each other very easily, right, nice, so that's it.