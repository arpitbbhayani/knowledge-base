Best Practices to make service integration easy

Preparing for integration Running microservices in isolation does not make a lot of sense They work together with other services to get things done so , how to get microservices integration ?? right Forward and Backward Compatibility } Make to changes your services compatibility . This is such that the others don't need to change at all . Key places where you need to keep a close eye - database migrations - API responses - Messages for a sync communication

Some do 's and don't - never change the type of the column / attribute ↳ instead prefer creating a new column with new type this would help us avoid forced changes - never delete a column / attribute ↳ instead deprecate it and give your dependent services enough time to remove dependency on it Make API interface tech agnostic Things evolve very quickly in the world of / S w development This would allow other services ↑ µ to pick a stack best suited for their use case interfacing - technique . any be you pick should coupled tech with underlying

For example , an RPC marshalling format that would only work when other service is using Java along with a particular Lib Dead Simple Consumption Microservices are built to interact with other microsexiles . Hence it should VERY simple , by for other services to talk to your service It would not matter at all - simple API if you have the most optimized - simple data format but - Common protocols and beautiful code , a very poor interface practices BE CONSUMER CENTRIC API routes DO not use weird formats . , interfacing protocols . Keep it simple !

Hide Internal Implementation Details Never let the learn internal implementation interfacing services We do not want miuoseruice be bound to internal implementation structured eg : how DB is how messages are parsed jars etc direct linking nested . All communication should happen over public API interface This would allow us to upgrade internal 2 implementation logic without breaking or being dependent on other services * This also affects Technical Debt t, which would eventually reduce shipping velocity