How to scope a microservice

How to scope a micro service to create a It is always exciting new microservice . there are so many look forward to like things to - fresh codebase Plus , you would think to write this - new tech stack the best new service way possible 2 - clean CKD setup not repeat past mistakes . But extremely , designing and fencing the service well is important . . Too few collaborating of them and you still have multiple teams . . . codebase on same 2 breaking each other 's flow Too them and have inter-connected and many of you a mess of . . . sub inter dependent systems - - A good micro service - is always designed by keeping the following Kuo concepts in check Loose Coupling High Cohesion 1, b change in one service Related functionalities not should be part of the should require same microservice change in another

I. loose coupling shout NOT require change in other - change in one service T core ideology behind micro services Orders logistics I 1 Interfacing layers so interfacing layer contracts the long as the and API remain same , Chang in the orders service should be transparent to the logistics . But how to achieve loose ? , coupling A service should know as little as it needs about other services eg : Public APIs YES Rate limits YES Authentication YES YES communication protocol Database used to If knows too much Orders a service service directly about other service then it talking to DB of logistics might tightly couple them . eg . El Orders logistics

2. High cohesion - related behaviour sit together unrelated behaviour sit separately - Service should CORE IDEA : operate independently If your orders microservice also holds customer data then Order customer and is responsible for , orders miorosuc deploying changes will require consent of both the involved teams and their consumers respective . " " If your unrelated components are sitting together it to then might need you deploy everything connected Two microservices sharing the same codebase eg : when transitioning from monolith 10 Microservices You lend to reuse the monolith codebase & fork out services Now , when some changes in monolith codebase , you will need to re - deploy other services sharing the codebase . at Deploying multiple services once is risky Hence , fence the responsibilities & make them as loosely coupled as possible .