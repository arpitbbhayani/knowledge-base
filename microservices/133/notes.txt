Should some microservices share a database?

Microservices sharing a database communication , , One of the simplest ways to integrate Blogs Analytics a couple of microservices is to let them share a database . RIN RIN eg : Blogs service stores the published blog in Blogs DB , while the analytics service Blogs DB also updates the total views a blog got in the same DB . { " " " " id : sharing - a - db . This is the simplest approach to integrate " " " title " : - , Microservices . Anyone who wants to read " " total views : 1729 or change anything can just read or } update the database directly . Advantages of this approach - simplest way of integration - simpler operation - no middlemen involved - better performance - no middlemen - no latency overhead - quick development time Apart from all of these advantages . there are a few disadvantages to keep in mind . . _

Challenge 1 : External parties are getting internal details By sharing a database an external party . Blogs Analytics the internal schema and analytics , gets , RIN RIN details other implementation of Blogs service - what's the schema - design decisions Blogs DB - soft delete 4s hard deletes - normalization redundancy - external has to the database Given that an Service access . ? what if the Blogs service thinks of changing the schema - better performance better maintainability - - The analytics service would need to change its logic accordingly the by should be or changes made the Blogs service always Backward compatible - what if the Blogs service wants to move from relational to non - relational ? Because of this tight coupling Blogs. service cannot take an independent call . ! So team their service is gone , autonomy of Blogs on So , we now have tight coupling . . .

Challenge 2 : sharing DB = sharing Business logic few specific tables say to render a particular data there are a -13 and -14 to fetch data from : Ti , T2 , Blogs Analytics Recommend The logic to fetch the information is implemented by all the dependent RIN RIN services . RW But , what if Blogs team changes the Blogs DB logic and now uses Ti , Ta , Ty Ty , = All the dependent services will have to change the logic at their end so , Cele lose cohesion . . . Core principle behind microservices are - loose coupling ✗ We are losing both by sharing the DB - High cohesion ✗

Challenges : Risk of data corruption and deletion Now that all the dependent WRITE access Blogs Analytics Recommend services have to the same database , there RIN RIN are massive chances of someone RW corrupting the data U - Blogs DB wrong script - - limited knowledge DB ACL has to be managed this all the data well so as to prevent - accidentally deleting the shared Challenge 4 : Abusing DB say analytics , service wrote a Recommend Blogs Analytics Hue new queries to render some dashboards new user facing RIN RIN RW and these queries are super - heavy This will affect other services they Blogs DB as depend on the same DB . No to throttle DB way automatically queries

given that there are a few challenges . but does this mean should never share a DB ? we No , there are places where it is beneficial to share a DB Quick solution when crunched on time 1. Sharing a DB is a . Analytics < > Blogs < > Doing this requires efforts and co - ordination from multiple teams 2 . When schema does not change often schema or business logic do not change often , so why create that unnecessary dependency 3. Read load can be moved to a Replica Heavy analytics query can run on a separe replica of the Blogs DB 13109> ☐ B Analogies Blogs Read Replica €1 This way dependent system does not put a high read load on the main DB