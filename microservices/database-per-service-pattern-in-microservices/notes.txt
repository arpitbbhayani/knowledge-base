Database per Service Pattern in Microservices

Database per Service Pattern Almost all microservices orders Payments need to persist data in some database A database architecture we can use here €1 €1 could be Database per Service orders DB payments DB loose the highlight of based architecture coupling is microservices services should be > Database decisions play a build role here - independent to , test , deploy , scale key . - autonomous to take its own decision social Network : Each service taking its own decision chat a Analytics 19 _ E - Data warehouse - Partitioned NoSQL Redshift Cassandra Videos Auth Blob Storage Relational Master Replica - 53 MySQL Profile / Non relational Master Replica - - MongoDB

Advantages of going for Database per service pattern NO direct to DB loosely coupled components access - YOU need I Recommend " { > Profile , - you have a very specific DB need for your service eg : graph db to model relations in social media - YOU want granular control and scaling of your service eg : horizontal . vertical . replica partition decentralized , , - if a database goes down . it only affects the dependent services " > Recommend { Profile Payments | need for a certain type of data You have separate compliance - at rest Pll and financial data eg : encryption for ↳ doing it for 10GB table is simpler than 2-113 of database

Disadvantages of adopting database per - - service time → throughput - cross - service transactions are complex and expensive eg : you will need to implement 21°C across services for TXN inventory F- 0 orders logistics | - conveying updates across services is difficult Post Feed O O Message Broker - multiple intra components to be monitored and managed