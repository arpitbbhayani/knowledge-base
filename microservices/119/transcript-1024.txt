like you have a massive product- let's say an instagram or a facebook- that product is broken into sub problems and each problem is then handled by a particular microservice and that service is designed in a very optimal way to solve that problem.
for example, a very standard break of a big product, like, let's say, amazon, flipkart, microsoft, google and whatnot, is typically like: let's say, you break it into an authentication service, a search service, an order service, a delivery service and a payment service, right?
it looks like one big product that that is serving you, like, for example, twitter, but within that there are a lot of micro services that are interacted on a regular basis to get your things done- for example, the recommendation service to render your feed, or an authentication service to drive authentication right- but each one of them has this very small, peculiar, uh, set of properties and a set of problem that it solves, and it solves them really well, so, optimally.
when they all come together, the entire problem is solved in the most optimal way, right?
so that is a key idea behind microservices: to give each one of them a very specific set of responsibilities and ensure that it solves it very well, right, but why?
so one major reason that why companies adopt micro services is because, like, when a company starts it, it starts from a pure idea.
and once it starts to add more features to the product, what happens is your code base grows over time.
so so that's where the problem lies, where having to have so many people coordinate over one code base, just imagine how many merge conflicts would we get, how many deployment issues, like some team broke or added or or introduced some bug into a code and everyone else is suffering from it.
so when a company grows over time, when the team grows over time, this when you just have one monolith to solve and you don't have micro services, it would reduce your overall product development velocity right, plus add so many blockers and what not into the scheme of things.
the second key reason is scaling becomes predictable now if you have just one code base or one monolith to solve that problem.
if you would want to scale something, that entire monolith is scaled right, and once your code base grows beyond a certain limit, the amount of ram it requires to run that one process is huge- might not be the best way.
so every service is independently skilled without having to know on what the overall scale is right.
so your, like, your service becomes auto numbers or your team become autonomous and you get very nice isolation.
so service might adopt golang using a mysql database, while other services- hey, i am, i, i have a traditional thing, or, and, and my team has expertise in java, let me build it in java, but i want to use mongodb with it, right, because that use case is more suited for a nosql based database.
so every service is is autonomous and it's uh is is basically autonomous and k and can take decisions on their own for the kind of uh api contracts that they would want to adhere to right and you can change your code wherever you want and deploy whenever you want, like with microsoft, with just monolith, having just one code base to rule them or having just one service to rule them all.
this is one of the key reasons why microservices work really well, where, if a particular service is down, the entire product is not done right.
so with micro services based architecture, the key advantage you get is, even in case of an outage of a service, you might still have a partially working product, which means that the overall experience of your end user is not drastically- uh, it basically does not drastically degrade.
then the final and and a really interesting reason why microservices is because your upgrades become simpler, like, for example, with time, new technologies come in, new frameworks come in, new database come in and whatnot.
right, and coming to the final part of it, how do we define or how do we fence a micro service?
like, we know that micro services needs to be small, but small is a very subjective term.
but how, how can we fence a micro service such that it, it, it's, it's better for the it's, it's better for the overall velocity of a team or of a company?
it cannot be too big, because if it is too big it is the problem is same as the monolith right because you have multiple teams coordinating on it and that, and then the same set of problem comment, but just at a smaller scale.
a problem would be there, you, it cannot be too small, otherwise there would be so many inter team or inter service dependency, like internet.
so a good start to breaking things into micro service is go feature wise, so a feature.
so typically the way your organization is structured, right, so there would be teams that that would be looking at a specific set of uh features.
for example, someone just takes off prepayment flow, a team takes care of post payment flow, so then those two become to separate micro services, right?
so a good indicator of that is the way your organization or the team is structured, depending on which you would want to break your things into micro services.
in overall, improving your development velocity, right, and as an engineer, when you are starting to build or to break your monolith into micro services, this is a very solid way to do to go about it right.
so, approaching it, fencing a micro service, is purely subjective and it is always designed so to optimize your overall development cycle, right.