Designing workflows with microservices

Designing workflows in microservices say we are building an e-commerce website . and whenever have to a user purchases something . We 1 . Send an email confirmation to the user 2. Notify the seller to keep the shipment ready 3- Find an assign a logistic delivery partner to ship How do ? we model and implement this flow ORDER _ PLACED > Orders ✓ ✓ V Notification Seller Logistics Notify the user Notify the seller Assign a delivery partner so , how would the involved 3 services - Notification . Seller , logistics - ? actions get to know about it to take necessary There are two to model this ways 1. Orchestration 2 . Choreography

Orchestration [ decision logic is centralized ] brain that tells others what to do let there be a single exactly . > Notification | /notify ORDER PLACED _ REQ / RES > Orders > seller " , snip " Brain As the > Logistics soon as order is placed . /reserve the order service invokes the API of other involved services to do what needs to be done . * All the 3 calls need not be one after the other core Idea : Services are dumb , orders service knows what needs to be done on each involved service . and it thus orchestrates actions the required . * In some cases , the orchestrator needs to handle , manage . and track a much complex workflow Orchestrator

[ distributed ] Choreography decision logic is " " Instead brain be independent of having a single , let each service to think what needs to be done upon getting to know what happened. This lays the foundation of F- vend Driven Architecture > Notification f ASYNC SUBSCRIBE ORDER PLACED PUBLISH _ > Orders > O O > seller Broker sends an event about ORDER PLACED in a > Logistics message queue/ stream when an order is placed . the orders service emits an event have subscribed to ORDER PLACED Notification , Seller . and logistics _ Once the the event services receives . they do what they are supposed to Thus , all the 4 involved services are decoupled and if to extend to do want our system something the service subscribe more . new can simply just to relevant events and handle them

So which should when and ? , one cue use , , why Most modern systems are inclined towards choreography loosely coupling the core principle of microservices - - - extensible - adding new type of service is simple - flexible - services are independent to drive their own changes robust not affected matter the number subscribers workings no of - - But with choreography approach we need to - implement complex observability and track what's happening Note : although a lot of people adopt 2 prefer choreography , this does NOT make orchestration bad Because orchestration is REO / RES type flow . We can use it at transaction distributed transactions services need to be invoked ally - - sending OTP for logging in happens synchronously - - rendering details in recommendation requires a sync communication < < > > Recommendation Inventory ,