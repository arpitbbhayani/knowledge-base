Everything you need to know about REST

Everything you need to know about REST REST - Representational State Transfer RER H ¥ > , < the Representation of RES server client entities is central to this idea client demands , server serves Everything in REST is a Resource service Entity in your application ~ resource students ↓ student Video . Customer , Message , videos Messages → external All the data of the application belongs to some entity type . eg : all students are stored in one table storage representation !! all are stored in some database does not matter messages The client asks for some data of some entity type in some representation , and server has to respond student 1 0 > I < student server client

What about representation ? Client demands a particular * Practically we all only care about JSON representation of the entity but REST does not restrict us . ↓ JSON , Text , XML , etc REST empowers clients to demand resource in one of the format the server supports /customers/ 123 info about → holds all the ← > > all the students < , , " ^t° client ← Server DB External Internal Representation Representation JSON Tables Rocks Columns , , " " Once the client has one representation it can request to update it The idea is : everything happens on the data / entity ↓ sent by the REST server . Resource 1. cheat a resource of type . . . 2. Update a resource 3. delete a resource

REST and underlying protocol REST does not enforce a certain protocol , REST is just a but it is most commonly implemented over HTTP specification REST and HTTP REST goes very well with HTTP verbs has HTTP : GET , PUT , POST , DELETE well defined meanings so , by seeing a particular verb cue could anticipate its purpose DELETE / users / L ↓ ↑ ' ' ' ' delete the resource of type user identified by L With HTTP verbs we can multiplex eg : get a student 's details GET /students / L instead of having an endpoint like /getstudent update a student 's details post / students / 1 endpoint like /update student instead of having an

HTTP and tooling Because internet works HTTP have entire on , are already a large efficient set of tooling that would work as is for REST - HTTP clients : CURL , postman requests , , etc Web caches cache varnish ha - : nginx , , proxy HTTP monitoring tools tracing packet sniffing - : , - load balancers : distribute load uniformly control SSL - Security : - Compression Downsides of doing REST over HTTP - consumption is not easy not as simple as stubs in RPC we would need an HTTP client to make REQ , convert it to native get response in say JSON , objects and then consume

- consumption is repetitive Everyone ceeho consumes / adopts REST is writing the same stuff again eg : serialization / deserialization to native objects , failures , timeouts , retries , compression , etc . A have an internal standardization company may but most would have to either repeat or create a shared internal library . some celebservers may not support verbs - all HTTP it the celebserver to provide support for HTTP verbs is upto and some may choose to give support only for GET and POST if you adopt such servers , you are limiting your REST potential HTTP HUGE JSON payloads are eg : - may not suit well for low latency requirement - UDP You cannot switch protocols easily TCP → -