so in this case, what we would have to do is, in order to get the order detail, we will have to talk to the order service.
so here, our one client needs to talk to multiple services to get the things done.
now, this is a classic case of how would we want to query the micro services?
so we have added three services, but our user or our client has to talk to them to get the response.
a very common pattern, a super simple implementation, is api composition.
so in api composition, what we do is we put a middleman, we put a composer sitting in between.
the user makes a request to composer.
this composer knows what to do when it gets a particular request.
this composer would then talk to order service to get order information.
would talk to payment service to get payment information.
sitting or basically placing a middleman in your architecture to hide the complexities of the underlying systems, is what this particular pattern solves for us.
a very common component that solves this exact problem is called an api gateway.
so api gateway is a classic example of a composer and we typically place it behind or basically before all of our micro services.
so this typically, or api gateway, is the first point of contact for any request coming in from the user, and then api gateway would decide where it would need to forward the request to, or send multiple requests to multiple services and get the response and whatnot.
and what all popular api gateways can we use?
that serves as an api gateway, right.
so anything that would give you an api gateway is something that you can use as a composer.
so what we do in our architecture we place api gateway in front of all of our microservices and request directly comes to epa gateway.
api gateway either forwards the request to multi up a background, basically forwards the request to multiple services, gets the response uh, merges them, joins them and sends it back to the user.
but then when you get a request to your api gateway, how would it forward the request to the uh, to the downstream services?
so obviously you might think that, hey, if i would want to make a call to three services, i should be doing it in parallel.
but here this is very useful specific: it might not be possible to make all the three calls to the three depending downstream services in parallel.
it is very use case specific where we need to understand that, hey, do we have all the information to fire the queries in parallel?
it's perfectly fine, but it's very use case, specific, right, but in general, if we do it sequentially, pure sequentially, one after another, after another, it would take a long time for it to execute, but it is okay.
hey, let me just fork out multiple threads at once, which would basically fire individual queries to individual services.
but what happens is when you have excessive parallelism in your system, it would require a lot of resources of your machine.
so in this case it would consume a lot of resources of api gateway in order to do that parallelism: wait for the response, merge the result and send it back.
so in such cases you it also depends on the kind of language that you choose to implement your composer.
right now let's talk about a very interesting thing, although the discussion seems purely on the back and back and side of things.
so, for example, if we did not have a composer in the middle, then what would need to do your client?
as in the browser of your user, would need to make calls to three services- order service, payment service and logistics service- to get that information, compile it together and show it in your ui.
so here your client would be, have to initiating three api calls to three services separately, wait for the response before it can render the page on its end.
and then your client needs to be smart enough to understand the three responses and merge it.
so although this looks hey, let me just write three api calls on javascript and that would make a call, but it is not very efficient to do it.
plus, it would eat up a lot of data of your end user because you are making three api calls.
so how do we make the end users experience better using composer?
because composer is acting as a single point of entry, the user would make just one request, just one http call from browser to composer.
composer in turn would fan out to three different services: get the response, merge them or join them and then send the response.
it would have lower latency as compared to the first approach that we discussed and there is just one round trip so and then your client can be dumped to just understand what the response is and start rendering.
one thing that i want to talk about is, obviously this is not just one level of composition.
let's say we have a very complex logic in our system and we just simply said, hey, the composer's address will talk to order service, member and service and larger six servers to get that information.
but what if order service itself needs to talk to seller and inventory service to get its information?
the idea is, let's say, your composer sends a request to order service, but order service would need to talk to seller service and inventory service to get the order details.
you would see this kind of pattern where composer is not directly talking to all of the servers.
obviously not very performant or not good for low latency application, but you get the risk that you might have to have multi-level api composition, something that i would not want to discard right.
right now, let's talk about advantages of api composition.
we all see like, just add one api gateway.
it would take care of uh, fanning out, uh and basically gathering all the responses, joining them and send it back right.
so because this is the first point of entry, or the single point to interact, user only has to make one api call.
so pretty solid, single point of interact, no smartness needed on the client side.
so you, your user, made a request to your composer.
who should it talk to and get the response from, and then it would do the need for right.
so this is where, or on the composer side, or on the gateway side, we can implement security, limiting, caching and whatnot.
so every single thing around logging, security, practic, basically logging, security practices, monitoring, uh, what, not everything could be applied on this composer site.
so that's why composer is again a very famous pattern to be implemented, because it makes life so simple for the internal teams.
let's say, you had a very tight deadline, very tight deadline, and you just like, randomly sent any response or any structured response without putting in a lot of thought into: uh, how are you structuring your response from one of your microsoft strings, let's say your, let's say your payments, micro services, right, the response is not ideal, uh, not very good for your client.
but then what happened is: you made that bad design decision and now something needs to change.
so now, because composer is great at hiding the implementation detail, say we have this monolith that we had, which is a legacy monolith, and the first service you would want to fork out is payment service.
so what we'll do is we'll put a composer in between, forward any request that comes to slash payment to payment service and every other request goes to legacy microservices, to- sorry, to- basically legacy monolith.
this way your user doesn't need to know that, hey, there is a separate payment service or there is a separate monolith service and you can slowly keep forking out your monolith com or your monolith modules into separate microservices without impacting anything on the user side, but just by adding a layer of abstraction sitting in between.
let's talk about disadvantages of api composition.
first one: our composition or our composer is uh, is basically firing a lot of request onto services, getting the response, merging them.
the responses that it is getting from the services is huge, huge.
then the comments is part of a separate service because it requires special kind of scaling.
imagine wikipedia pages so dense in information, right?
so that's where, when you are transferring large amount of data or when you are merging large amount of data, you have to ensure that your api gateway is scaled enough and if it you that who you have written, or if it is you who has who has written composer, you have to ensure that it is well written and, uh, basically at best, efficient, right.
here we can very clearly see that when the request comes to our composer and it goes to three of the downstream services, like blocks, commands and claps, what we know is our availability is challenge.
if one of those services down, we are not able to compile the response right.
so that's where, unknowingly, downtime of one service had an impact on your end user, which impacted the overall availability of your system.
plus, what would happen is, as you have large number of services that you are talking to from your composer layer.
your composer needs to manage and maintain a lot of state- who or which services, where and how, and how to connect to that and how to get the re uh, how to send the request and get the results and what not.
if you have large number of services there, or if you're talking to large number of services in one request, it would add up to a lot of load on to your api gateway, which might turn it into a gigantic bottleneck which you can't get rid of.
not that big of a challenge, given that we have managed services, but still something to always think about when you are designing an architecture.
next is when your, your user- is sending request to one, let's say, api gateway and it is forwarding request to three services.
so, coming back to this use case, that if you need a strong data consistency or if you need rather transactional data consistency, it is very hard to get it when you have multiple micro services behind uh, an api gateway, to get that information right because your api get, we need to maintain or have to do the transactional part.
next is composer needs to be managed, maintained.
we added one more component in our uh system, which is your composer or api gateway, needs to be managed, maintained, observed, alerted and what not adds up to that part.
even if it is a managed service, you would still need to monitor it just to ensure that if it goes down, you know the backup plan for that and the final thing is your composer may become a bottleneck again.
so if you are getting a large amount of request coming to your composer, your composer might choke, because we saw that if you choose uh, parallel, uh invocation, it might add up to or it would require a lot of, a lot more machine resources to compute that information and, in general, handling a lot of search onto your single composer.
it's: look, it definitely looked like a very simple topic- api come with them- but it had a lot of intricate details to it.