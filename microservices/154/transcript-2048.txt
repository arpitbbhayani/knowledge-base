so we always hear great things about microservices, but every few months every senior engineer gets a feeling, hey, can we not go back to a simpler time and have monolithic architecture again?
in this video, let's understand the top 10 challenges that comes with adopting microservices.
today, we would spend time talking about not just engineering challenges, but also organizational level challenges that we all should be aware of and address while we adopt micro services.
engineers from companies like google, microsoft, github, slack, facebook, tesla, yelp, flipkart, dream 11 and many, many, many more have taken this course and have some wonderful things to say.
so we always talk about the benefits that we get out of adopting micro services and but, to be really honest, grass is not always green.
there are so many challenges that comes with adopting micro services.
so the first key challenge that comes with adopting microservice is managing them.
so with monolith you have just one thing to manage, but with micro services you have hundreds, if not thousands, of services.
like, hey, your micro service should not be too small.
others, you will have far too many micro services and it should not be too large, otherwise it would go into this macro monolithic architecture.
so that is where, whenever a proposal of a new micro service is given, it needs to be a well thought through thing.
it cannot be just: hey, our team wants to build a micro service, let's do it.
a lot of people should be involved into making the decision: hey, do we really need a service for this?
like random micro services would be created in inner infra, which would overall increase your uh, your uh, your overall latency of your api request, given that there will be so much of inter-service communication and all.
so that's why there needs it needs to be a well thought through thing rather than just thinking, hey, let's adopt micro services.
also, adding to this point is with when it comes to managing micro services, you would always feel, or every team would feel, an urge: hey, let me build this from scratch.
so that's where it is counter-intuitive that you- or rather, it is very important to fight your urge to create new tools or to rebuild existing tools like you should not be spending time creating your own ci, cd, use jenkins instead, right?
like you might not know a particular service even existed after a few years, or you might not know a dependency to a service exist even today, and that happens.
so with a good monitoring setup, you should be able to exactly pinpoint the overall dependency on the services that they have above each other, and it's very important to do so.
always try to like blind spots would come in with time, but we have to be very of the fact that we have to keep them at the bare minimum right and blind spot, not just with respect to an existence of a service or existing or existing of a dependency.
let's say your end user is facing a particular problem and that api call that end user made talks to seven different micro services in different order.
it's a very nice open source tool, that sub that powers distributed tracing, and the idea is to have a constant or a request id that would flow across micro services and you would be able to trace out exactly what happened, with that request id becoming, uh, basically becoming a bastion, so it becoming that singular point that would string all of the services together.
so, with hundreds of micro services in place, spread across thousands of servers, how would you know for a particular to get a particular thing done, with server to talk to, or which service to talk to, or rather, you know which service of doctor, but with server to talk to, right?
that's a thing that you should always remember so, with service discovery, uh, you need to have some way through which your services would be able to discover other services.
like you can just say, hey, i want to talk to payment service, but how would it talk to payment services- something that a service discovery module should be thinking about or should be taken care of?
second is having a load balancer based conventional discovery, where every service has a set of servers and basically there is a load balancer in front of it.
and third is service mesh, where you might use something like an istio in or or say, ny, in order to discover: hey, this is the exact container, this is the exact server that i would want to go to.
hop right three classic ways to do it, not going to technical details.
what i am talking about here is authentication and authorization between services, because what happens is, let's say, you opened up a notification service.
right, a way to implement this would be having a simple authentication, having a central authentication of our authorization server that issues jwt to occur, allowing you to communicate to other services for a short time and then the token is reissued- something very simple but very effective.
you need to do it, uh, because of like, if you want to go with no trust policy, that we don't trust anyone and have security as your default way to approach things, should be thinking about this.
the next one, again a very common problem, again a technical challenge, is configuration management.
every service that you build needs to talk to a sas offering or a database or a cache or a queue.
other way, let each service store its configuration in a secure location, for example.
but if every service tries to build their own configuration management system, again a lot of waste of time should not be doing that.
so that's where, when you adopt micro services, you would have to think about a central configuration management system where all the configurations are stored.
so what happens is when you are making this decision of moving from monolith to micro services.
this has to be a very thought through decision because once you break your monolith into micro services, it's hard to go back to monolith because, first of all, take diversity.
if you make them go back to monolith, where there is so much of inter-team communication and dependency that comes in, they would have like they would find a very hard time to readjust themselves to having so much of dependency.
uh, even before thinking of a deployment, like, let's say, they have to deploy just one line of chain but they have to wait for other changes to be there because they are already pushed to master.
the third thing here is people have adopted to new tools and processes, like when you we just saw uh, whenever we are adopting microservices, there are so many new tools that we have to bring in, for example, tool for distributed tracing, rule for monitoring and logging, centralized logging, secret management and whatnot.
and you might have also chosen to go into kubernetes and containers, because now you have micro services, so why, to put it on raw ec2 instances, let kubernetes handle it.
hey, when you are making this decision of moving to micro services, it's very, very, very, very hard to come back.
when you have so many components- uh, because microservices, architecture and all you have so many components, so there are more ways to fail because when, like if you think about if, on an average, a server goes down- hypothetical example, if a server goes down once every 100 days and if, let's say, you have 100 servers, so on an average, one server will go down every day- right, pure math.
so if you think about it at scale, when you are managing hundreds and hundreds, 500 or even thousand servers, this comes in very uh, or this becomes very critical- that every once a while some other service would be going down.
you can't do much about it, but it is very important to ensure that outage in one service does not affect other.
so that is where, whenever you are modeling micro services, think about modeling it loosely coupled, where, even if one service goes down, it does not affect other, and try to have, instead of synchronous, dependency across services.
so when you make asynchronous dependency, typically using message brokers, where once, let's say, post is published, i put a message, that message is consumed by search service and search indexes the post in in the search engine.
right, this is a synchronous dependency.
testing becomes super complex when it comes to micro services because a good testing environment is always isolated right whenever they would want to, or whenever your qa team or automated test needs to run.
and with microservices architecture, let's say you have five micro services and every time i test super suit, you would have to spin up those five micro services with some infra provisioning to to get that thing done.
second, it's a big engineering challenge where how easily can you spin up all of your micro services in a standalone environment?
so bit of engineering challenge, bit of organizational challenge, but something that we all should be thinking of while we adopt micro services.
but if you are dependent on that service synchronously, then you should be the one who should be handling it, right?
so with synchronous dependency, when two services are dependent on each other, if one going, if one goes down, the other is affected, right?
so how do you manage service dependency that?
hey, i am dependent on these two services to get my responsive.
if they are down, i will be affected, right, something that we need to be very off.
so let's say you break your service, or or you break your monolith into multiple microservices.
number one and second: you have to ensure that you are using- at least you are using- proper versioning so that one micro service can upgrade the package while other stays on the previous version.
otherwise, if you are not doing that, you would be in a situation where you would say all the two, the both of the services needs to be deployed at the exact same time when we upgrade the micro, uh, when we upgrade the package.
a very poor way of having your micro service or having you try to untangle yourself, but every time you think about it you are tangling yourself even more, and that happens.
the third dependency and the final thing we discuss is data dependency on services.
like there are cases where your services rely on data coming from other services.
for example, you would want to serve recommendations to your end user, but your recommendation service is yet to generate a recommendation, so you cannot forward the request, or you cannot send recommendation email to other services or or to your end users, right, so you are waiting on the data that needs to be generated by some other service.
so, like, output of recommendation service, consumed by five different services, right, any change in data pattern or the way data is structured in uh, your recommendation service, will affect every single one of the depending services.
right, this three dependencies, very critical we all should think about.
but again, although sound, this might sound ki or microsis is so complex, no, it has its wonderful set of advantages that you get out of it and, at scale, micro services become inevitable, right, and that's why everyone adopted.
that, hey, in order to design a good micro services based architecture, you need to think of all of these 10 possible challenges that comes in with it.