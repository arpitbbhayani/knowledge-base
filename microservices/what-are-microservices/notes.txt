What are Microservices after all?

What are Micro services ? Micro services are processes / workflows that are Microservices are like reusable maintainable Highly - but network functions , bigger and over loosely coupled - Microservices are typically structured around small team Business needs and are owned by a communicate over well - defined APIs Profile " Payments Notification Analytics With microservices . We are trying to optimize - rapid feature delivery eazy to uprade the stack - Microservices are no silver bullet and have several drawbacks

Precursor to microservices is Monolith Architecture to micro services Almost all products start monolith and slowly move < , Payments logistics < > , Profile Order Database Business logic of payments profile , . Orders , logistics are all part of the same JAR / Codebase / Binary that are deployed across all the servers . " me ** → and scale deployed Advantages simple to develop , build , test , all Sru ↓ across everything part all modules part of same codebase of same artifact Disadvantages modules - Tight coupling b/w - Bulky container / binary / deployment artifact - Homogeneous single Tech stack module others - Bug in one affects - Scaling one module requires scaling everything codebase large monolithic is intimidating - and eventually slows down delivery

Monolith to microservices Club that do related work and create functions a micro service start small . with few modules and continue to se park them to architecture like this Eventually leading ↓ Python MongoDB Go Profile Node JS Payments Notification €1 Analytics DynamoDB MySQL Java Redshift characteristics of Microservices evolutionary - autonomous → decisions and operations are independent - specialized → focus on solving one problem really well built for business business organized around - → needs and teams

Advantages of adopting microservices teams Agility small independent moving faster - → - Scaling → scaling is precise , independent and owned by team Tech Freedom Picking right stack for the - → service simple to understand limited responsibilities - → build spectrum Reusability of resources → once use across - . - Faster defect isolation → isolate the failed service quickly " " circuit breaker Anti - patterns - do not start with microservices - do not make services too small scratch - Use as many tools as possible , do not build from