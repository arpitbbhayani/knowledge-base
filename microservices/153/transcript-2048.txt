in this video, we talk about what are microservices, understand how it all begins with a very simple monolith, eventually to evolve into micro services based architecture, look at their key characteristics, understand their advantages and conclude with some anti-patterns that we all should keep in mind to ensure that we are not doing it wrong.
the way i would like to put it is: micro services are like reusable functions, the functions that we normally write in our code, like that, but little bigger, with a bigger set of responsibilities, and put over the network.
right when it comes to words like highly maintainable and loosely coupled, it's more about that.
given that a service would be having a limited set of responsibility, it would be easy to maintain it.
and you know what all things happen, it becomes hard to maintain or hard to even build on top of it, right?
if i would want to change a tech stack of a particular service, i should be able to do it.
so micro services are typically structured around business teams.
so, depending on what your business needs is, depending on any new feature that your business wants to start, if any new thing that a business wants to introduce, that the business typically creates a small team of people, not engineers, but in general, a small team of people whose only responsibility is to ensure that that thing is done.
so, when a business is creating a team of focused individuals to get a particular task done, that particular set of people or that particular set of product features and all evolves into, or they own this particular part of microservice, like it's basically a one-to-one mapping from the business side to the product side, right?
it exposes the necessary functions that your application can use to get everything done around payment, and there would be a focus set of team looking after payments.
this is the idea around how we structure micro services with respect to business requirement.
for example, the profile service will be a bunch of instances all running a profile code or every function that is required by or or that constitutes to be part of your profile service.
so microservices, they try to optimize typically two things.
first is rapid feature delivery: that when, if you are just putting all of your code into one codebase, it becomes highly unmaintainable, becomes overwhelming for most developers and it takes time for you to add new features to it as time passes, or as the code break, or as the code base becomes little more complex, right?
so that is where, by having a micro services based architecture, it is trying to optimize for rapid feature delivery so that when a focus set of people are only working on that one set of service, it is easy to make changes there, because it's a very small code base.
so, for example, i can choose the best stack possible for a particular service.
and then if let's say i want to upgrade, let's say i was using python and now i'd say, hey, golang is a new shiny thing and it would give us very solid advantages if we move to, if you move our payment service to that, so then you would go for it.
so these are two key advantages or two key reasons, or two key things that micro services try to optimize right.
so most microservices architecture- they they never start as micro service architecture.
they start with a simple monolith architecture.
the idea of monolith is pretty simple: have one code base, put everything inside it, right, and it's not that these are different processes, it's more like these are different modules.
so most of them start with the monolith: everything is part of this one code base and it's just that one deploy thing or one thing which is deployed across all ec2 instances, right, easy, transit any instances in your production environment, right?
so everything is part of this one code base, one deployable artifact which is deployed across all of your machines, and this and is talking to a few set of databases.
this is your typical monolith architecture where everything is just everything is part of this one code base and that one code base is deployed across all of your machines, right.
and, to be honest, when a company is starting up you don't have to think about micro services.
you start with monolith and get things done right.
there are solid advantages and that's why most startups starts here and then when they realize, okay, now we are in market for next three or four years and our monolith is becoming a bottleneck, let me move to microservices.
so key advantage of going for monolith would be simple to develop.
simple to build: there is just one artifact that gets built: your jar, your code base or binary, just one thing that gets tripled across all machines.
it's just one thing to test, like one code base to test someone just spinning up or running a web server on that.
some over engineering folks are there to start with micro services.
once you know you are in market for a long run, then you break into micro services.
so you might not realize this problem on day zero, but as time passes and your code base grows or your complexity grows, you would start to realize.
you just import from payments, import that util function right, unnecessary dependency between modules.
second is your containers or your binary or your deployment artifact are bulky because you have one code base or one thing which is deployed across all machines.
third is you'd have to have homogeneous and single tech stack because you have this one code base that has everything.
because your architecture is monolith, everything is part of this one code base.
right, this would happen when your team grows big, when there are multiple deployments happening in a day or multiple changes going into production every single day.
one module requires scaling everything again because you only have one artifact and that one thing is deployed across all the machines.
so eventually your overall infrastructure utilization goes down when you are growing in your monolith because you are over provisioning for a particular set of function but unnecessarily everything else also gets loaded.
the next disadvantage is large monolithic code base is intimidating to most developers and it eventually slow down to a delivery.
right, because there are so many things, so many functions, so many things to look at, it becomes very intimidating that you- and given that you know that there is like if you introduce a bug it would take your entire production down.
let's talk about how we can evolve, or how we typically evolve, from monolith to microservices.
so we know that we all start with monolith, but now we have to go to microservices because of all the disadvantages we discussed.
when you go from monolith to microservices, you would typically be clubbing functions or grouping functions that do related work and create a micro service out of it.
for example, all the functions related to user profile can be clubbed together and given its own code base, its own set of infrastructure to run profile service, exposing a proper set of api interfaces, right?
so the idea would be: when you're transitioning from monolith to microservices, you start extremely small- extremely is the keyword.
you start extremely small, pick a particular set of module and try to fork out things or try to club the functions that you want it to go into one microservice.
and you create that and then let everyone else who was initially just doing a function call here are making network calls to that particular service.
for example, you chose to: hey, let me separate out my profile service.
so you separated out profile service, put it over a network and created its own micro service.
right, and slowly and steadily you start clubbing all functions or all related functions and create separate micro services out of it.
fred is spreading out and eventually your architecture would become entirely, entirely micro services based and you will be getting rid of monolith, right.
so that is how your transition and the way we would be transitioning in from micro service to monolith.
now let's talk about characteristics of micro services.
so, obviously, micro services are great advantages and all are okay.
so the first characteristic of a mic, of any micro services based architecture, is autonomous.
like every micro service based architecture is autonomous, such that every micro service in itself is independent in taking its own decision and driving its own operation: decision with respect to tech stack, decision with respect to storage, decision with respect to api contract right, decision with respect to the kind of infrastructure on which it needs to run.
it is independent to do so because everyone else is talking over apis to this particular service.
every micro service that you create is very specialized, which is focused on solving just one problem really well.
for example, your profile service would do the best it can to ensure that getting a profile of a user is it does in a very optimal way.
so focus, set of responsibilities, but doing it really very well, right, in the most optimal way possible.
third, a micro service is typically built for business.
so let payment be a separate microservice which is taken care by a separate team whose only responsibility is to ensure that payment service never goes down and is very robust, resilient and performant.
so this is how you would think about micro services.
so a business product feature requirement mapping directly to one of the service that you have, right?
the advantages of adopting microservices-based architecture.
third is: take freedom: picking the right stack for your service.
fourth, it's very simple to understand because your mono, uh, because your micro service, is just a small code base that does that one thing really well.
right same thing goes over here with micro services based architecture.
the micro service that you create is reusable.
they would just talk to the service and get those things done.
these anti-patterns is very important so that you don't do micro services wrong.
do not start with micro services.
micro services is typically not a day zero architecture.
if you spend time doing micro services and all, it would take a longer time for you to develop things.
with micro services it becomes very simple.
oh sorry, with monolith, because very simple, you just have one code base, five engineers working on that one code base to get things done, because you don't even know if you would survive the market or not.
right next is: do not make your services too small.
it's typical, it's habitual that you think, hey, every function can become its own service.
no, don't create a service for each function.
a very simple strategy to do it is club all related functions together and create a service out of it.
it should not just be one or two things that that service does, right.
it's typically observed that when we are working in microservices, space architecture, we think, hey, i'll write this from scratch, or or i'll, or, for example, i'll do a particular thing from scratch, even though the tools exist to get that exact same thing done.
so these are the three key anti-patterns that i want all of you to remember before you jump into the wagon of creating microservices, right, nice?
these are some key things that i always wanted to talk about on how you should think about microservices, right, nice, so yeah, that's it.