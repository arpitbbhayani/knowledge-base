Sync Async Communication in Microservices

Synchronous and Asynchronous Communication Say , we are building a < > Reaction Notification Social network and We have , ? to B cuhen A × to Takes × notify user user Endpoints care of likes/ comments on the post . register reactions notifying users How should the Reaction service communicate with the service to B ? Notification notify user ? What if we just have a monolith Sending out the notification is just a function call ' ↳ superfast → invaluable ↳ succeeds always have Things become extra - challenging when we a Distributed system ↳ network failure ↳ target service is down ↳ helmed target service is over we - ↳ not reachable target service is so , how do we make services talk to each other ?

Synchronous Communication TCP One service sends the < > Reaction < > Notification and wails , ↑ request , reliable connection User a for the response from the two services connecting the other service Request made from one service to another is BLOCKING Reaction Notification LIKE > 2 NOTIFY a > ' ¥ < OK 2 OK { How do these services communicate ? actually Most communication based paradigms are HTTP like on REST , Graph QL and GRPC touch in detail other time * we will upon each some

Advantages of synchronous communication ↳ communication happens in realtime ↳ intuitive super simple , Disadvantages of Synchronous communication Ms , see . minutes ↳ caller is blocked until the response is received Timeouts ↳ would be takes too much time an issue if it to be ↳ servers need pro - actively provisioned for peaks . B Servers need to be available A LB B very readily to handle the incoming B requests ↳ Risk of cascading failures A > B > c > D r s r To this need circuit breakers mitigate we

↳ b/w participating services creates a strong coupling A > B versioning strong contract service A should be kept in the loop for backward compatibility B any changes happening in ? When should you use synchronous communication ↳ when You need you cannot move on result before you eg : Database Queries . API responses move forward ↳ when you want realtime response eg : chat , checkout ↳ when it take less time to compute and respond will relatively Asynchronous Communication < > Reaction Notification , ^ User > 0 . . . . . . . . . . . . . . . . _ . 0 Info as messages

Interaction between < > Reaction Notification , ^ services is an exchange User text message > 0 . . . . . . . . . . . . . . . . :O Of via a Broker broker Message message The messages buffered in the broker and the are consuming services will consume them when it can . down the messages will be consumed If the consuming service is , when the service comes back up again . So , no cascading failure Request made from one service to another is NON BLOCKING 0 Reaction Broker Notification LIKE > 2 A SYNC TASK _ > < OK 2 OK { NOTIFY > 2 A few Message Brokers are Pubsub Rabbit MQ , SRS , Kafka , Kines is , Google

Advantages Of Asynchronous Communication ↳ services don't need to wait for the response < > Reaction Notification , ^ User > 0 . . . . . . . . . . . . . . . . _ . 0 Broker Message User experience ↳ system can handle surge and spikes better f. ^ < > Reaction Notification , ^ User > 0 . . . . . . . . . . . . . . . . _ . 0 Broker Message > the In case of a surge . the messages cuill pile up in broker but there will be no difference in User experience * Notification service would need to scale up to clear the backlog No need ↳ of pro-active scaling ' Upon surge the messages will queue up out there will be no difference in UX . You will need to scale to but consume the messages eventually , not realtime

↳ No load balancer additional network hop required , so no > Reaction Notification > Reaction Notification ' > LB , > Reaction Notification User ^ § i i i ' ' ' ' - . i - - - - - - i - Broker Message ↳ No request drop or data loss overwhelmed In synchronous communication , if the target service is there will drop in request , but with asynchronous because cue have loss message buffer there is request a no the and the messages pileup target system eventually catches up . ↳ Better control over failures In case of a failure you can always retry > - . - - r - i - r - . . . . _ - i - r because is still there in the broker message × ↳ services are truly decoupled

Disadvantages of Asynchronous communication ↳ Eventual Consistency You cannot have With brokers and a strongly consistent system hence be to be you have to okay for the messages eventually consumed . But with brokers our system does scale better ↳ Broker is a SPOF The message broker is the backbone of the system , hence we need to be super cautious about it . The broker we use should be horizontally scalable ↳ Harder to track the flow of communication D A B C E O O O O

When should we use Asynchronous communication ? ↳ when delay in processing is okay eg : notification , analytics , reporting ↳ when the job at hand is long running - eg : provisioning a server , order tracking , DB backups ↳ ' ' when multiple services need to react to same event index in search eg : blog published notify the followers update user analytics ↳ when it is okay for you to allow failures and retries eg : send notification . if failed retry