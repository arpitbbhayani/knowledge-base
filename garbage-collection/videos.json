[
  {
    "id": 143,
    "topic": {
      "id": 0,
      "uid": "garbage-collection",
      "name": "Garbage Collection",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT3MvruOP09U1bWmcjxLIMwR",
      "bgcolor": "#F0E6FF",
      "themecolor": "#A66AFF",
      "course_url": null
    },
    "yt_video_id": "LkympMbgmCo",
    "title": "Why caching would not speed up Mark-and-Sweep GC?",
    "description": "So, caching doesn't always work!\n\nWhat would happen if we apply caching to speed up our Mark and Sweep Gargabge collector? Will it improve its performance?\n\nToday we understand the key patterns that are essential for our caching to work. If those patterns do not exist, caching would be ineffective. The concept we discuss today is something that holds true universally and is not restricted just to the world of Garbage Collectors.\n\nToday we take an in-depth look into caching, how it works, why it works, and understand why there would not be a significant performance improvement if we apply caching to our Mark and Sweep Garbage collector?\n\nOutline:\n\n00:00 Agenda\n03:09 Refresher about Mark and Sweep\n04:06 Why garbage collection needs to be fast?\n05:00 What is a cache?\n08:36 When would a cache improve performance?\n11:09 Hardware and Cache Prefetching\n14:50 Why caching would not improve Mark and Sweep's performance?\n19:14 A minor speed-up through caching",
    "img": "https://i.ytimg.com/vi/LkympMbgmCo/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/1Ai794SGeIhn50H4HV/giphy.gif",
    "duration": "23:43",
    "view_count": 841,
    "like_count": 47,
    "comment_count": 6,
    "released_at": "2022-05-20",
    "gist": "Mark and Sweep GC is one of the most common garbage collection algorithms that has seen a massive adoption. The algorithm has two phases:\n\n- Mark Phase: we iterate through the object reference graph and mark all the reachable objects as live; and\n- Sweep Phase: we iterate through all the objects in the main memory and delete all the objects that are not marked live; thus cleaning up the garbage\n\n## We need Garbage Collectors to be fast\n\nGarbage collectors need to be fast because we want the CPU cycles to be used in running the core business logic of the user program and not cleaning up unused variables.\n\n## What is a Cache?\n\nA cache is anything that stores the data so that future requests are served faster. The data we can cache can be\n\n- results from the previous computation\n- a copy of the data from a slower storage\n\n## When does caching improve performance?\n\nCaching improves the performance of an application only when the use case exhibits one of the following two behaviors\n\n### Temporal Locality\n\nA recently accessed memory location is likely to be accessed again.\n\nBy caching the data, we can thus serve the information from the cache instead of doing an expensive lookup or computation.\n\n### Spatial Locality\n\nIf a location is recently accessed, the location adjacent to that is likely to be accessed soon.\n\nBy caching the data, we can thus serve the information from the cache instead of going through slower storage like disk or main memory.\n\n## Hardware and Cache Prefetching\n\nTo leverage caching, modern hardware pre-fetches the data, likely to be accessed, from the slower storage and caches it. This boosts the performance of the application.\n\nThere are two ways to pre-fetch:\n\n- hardware intelligently pre-fetches the data as per the access pattern\n- hardware exposing \"prefetch\" instruction leaving to the business logic to prefetch\n\n## Why caching would not improve GC performance?\n\nAs we established, for caching to improve the performance our use-case would need to exhibit either spatial or temporal locality. Do mark and sweep exhibit either of them?\n\n### Mark n Sweep and Temporal Locality\n\nMark and Sweep GC does not exhibit temporal locality given that we mark all the reachable objects in one iteration and in other iteration we go through the unreachables one and free them.\n\n### Mark n Sweep and Spatial Locality\n\nMark and Sweep GC does not exhibit spatial locality given we we do a DFS on object reference tree which hopes from one object too another in random order. So pre-fetching of memory locations would not help.",
    "notes_gd": "https://drive.google.com/file/d/1GpbYMPJPS78hOlN6KRagF58S7lvQfhh4/view?usp=sharing",
    "slug": "why-caching-would-not-speed-up-mark-and-sweep-gc"
  },
  {
    "id": 137,
    "topic": {
      "id": 0,
      "uid": "garbage-collection",
      "name": "Garbage Collection",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT3MvruOP09U1bWmcjxLIMwR",
      "bgcolor": "#F0E6FF",
      "themecolor": "#A66AFF",
      "course_url": null
    },
    "yt_video_id": "lhrRwjVPXPo",
    "title": "Tricolor Abstraction to build concurrent Garbage Collectors",
    "description": "A basic Mark-and-Sweep garbage collection algorithm operates in Stop-the-World mode, which means the program execution pauses while the GC runs. So, can we write a GC that runs concurrently with the program and does not need to always stop the world?\n\nIn this video, we take a look into something foundational called the Tricolour Invariant that enables us to build concurrent garbage collectors with low pause times. The concept we discuss is something that was contributed by Dijkstra, famously known for his Shortest Path algorithm.\n\nOutline:\n\n00:00 Agenda\n03:06 Recap of Mark and Sweep Garbage Collection\n03:56 States of an object during GC\n06:04 Tricolour Abstraction\n09:07 How does Tricolor Abstraction make things better?\n12:46 The Garbage Collection Flow with the Coloured Sets\n15:06 Why did we do this at all?",
    "img": "https://i.ytimg.com/vi/lhrRwjVPXPo/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/xT5LMylSZz8lg53jC8/giphy.gif",
    "duration": "19:52",
    "view_count": 870,
    "like_count": 45,
    "comment_count": 5,
    "released_at": "2022-05-06",
    "gist": "The Mark and Sweep garbage collection algorithm is a simple DFS traversal with two phases - Mark and Sweep. In the mark phase, it marks all the objects that are reachable from the root, and the Sweep phase clears off all the unreachable ones.\n\nThis crude algorithm is slow and requires a program pause which means everything stops when the GC is cleaning up. This affects the performance and throughput of the program.\n\nSo, can we write a GC that runs concurrently with the program and does not need to always stop the world?\n\nThe foundation of concurrent Garbage Collector is based on a concept called Tricolour Abstraction which was developed by Dijkstra and Lamport, known for their work on core algorithms and distributed systems.\n\n## States of an object\n\nWhile tracing the objects across the heap we can see that each object can be in one of the 3 states: unprocessed, processing, and processed; and this becomes our three colors\n\nWhite: unprocessed objects\nGrey: visited but whose children are yet to be visited\nBlack: done processing\n\n### The garbage collection flow\n\nEvery node starts white. Once we see an object we color it Grey and once we are done visiting its children we mark it Black. This way we have 3 sets of objects: white, great, and black, and the objects move from white to grey and from grey to black.\n\nA key thing to note here is that we will never have an object that moves directly from white to black; i.e. there will never be an edge that connects one black and one white node.\n\n### How does Tricoloration make it better?\n\nBecause a black node is never connected to a white node, we ensure correctness i.e. a live object will never be cleaned up.\n\nOur GC flow can now be simplified as\n\n- pick the object from the grey set\n- color all the children of the node grey\n- move the grey object to the black\n\nrepeat the flow until the grey set is empty. Once done, we can just visit the white set, which now contains all the unreachable objects, and clean them up.\n\n### Speedup\n\nNow that we segregated the objects into sets we can ensure a quick cleanup by putting more threads at work on the grey set. It is hard to make a crude DFS concurrent and structuring it as sets make implementation much simpler.\n\nWe make our system reactive by keeping an eye on the grey set and triggering GC as soon as it hits some threshold.\n\nThis method of garbage collection is called \"on-the-fly\" which runs concurrently with the program and mutates the color of the objects as part of program execution and does not wait for a separate GC cycle. This reduces the load on GC and minimizes the pause.",
    "notes_gd": "https://drive.google.com/file/d/1k6y-oTQ3i46VUKs58qHRxK6QuG87z1-5/view?usp=sharing",
    "slug": "tricolor-abstraction-to-build-concurrent-garbage-collectors"
  },
  {
    "id": 134,
    "topic": {
      "id": 0,
      "uid": "garbage-collection",
      "name": "Garbage Collection",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT3MvruOP09U1bWmcjxLIMwR",
      "bgcolor": "#F0E6FF",
      "themecolor": "#A66AFF",
      "course_url": null
    },
    "yt_video_id": "4qLf0FJMyf0",
    "title": "Mark and Sweep Garbage Collection Algorithm",
    "description": "Garbage Collection has to be one of the most interesting topics of discussion out there. In the previous videos, we took a look at why programming languages need an automatic garbage collection and what are the key metrics and characteristics we look at while picking one.\n\nIn this video, we take a detailed look into one of the most common GC algorithms out there called Mark-and-Sweep. We will talk about the two key phases of the algorithms, also dive into the important details and nuances of it, and take a look at two super-interesting optimizations that would algorithm a massive boost to the performance.\n\nOutline:\n\n00:00 Agenda\n02:57 Introduction to the Mark and Sweep Algorithm\n06:12 Mutator Threads, Collector Threads, and assumptions\n09:30 When is Garbage Collector invoked?\n13:11 Phase 1: Prepare the root list\n14:35 Phase 2: Mark roots, proceed, and a super optimization\n17:19 Phase 3: Mark and DFS Traversal\n19:22 Phase 4: Sweep and a super optimization",
    "img": "https://i.ytimg.com/vi/4qLf0FJMyf0/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/NV4cSrRYXXwfUcYnua/giphy.gif",
    "duration": "23:43",
    "view_count": 1241,
    "like_count": 62,
    "comment_count": 15,
    "released_at": "2022-04-29",
    "gist": "The Mark-and-Sweep garbage collection algorithm is one of the most common and widely adopted garbage collection algorithms out there. It leverages the power of Graph data structure along with DFS to power the cleanup.\n\nAlmost all programming languages support allocating objects in heap and referring them via pointers to another object. This reference creates a small graph of all the references linked to the one root node.\n\nThe root node could be a global variable (object) or something allocated on the thread stack, and anything and everything referenced from that becomes the child nodes and the process continues.\n\n### Indirect Collection Algorithm\n\nThe mark-and-Sweep garbage collection algorithm is an indirect collection algorithm, which means it does not have any direct information about the garbage, instead, it identifies the garbage by eliminating everything LIVE.\n\n## When is the GC triggered?\n\nThe garbage collection is triggered when the runtime environment is unable to allocate any new object on the heap. When the language tries to fire `new` and it is unable to allocate space, it first triggers a quick garbage collection and then tries to re-allocate; if not successful again it throws an OutOfMemory exception, and in most cases, it is a fatal error.\n\n## Mark-and-Sweep Algorithm\n\nAlthough the algorithm is primarily split into two phases Mark and Sweep; to build a better understanding we split it into 4.\n\n### Prepare the root list\n\nThe first step of this algorithm is to extract and prepare the root list, and the roots could be global variables or variables referenced in the thread stack. These become the seed objects on which we then trigger a DFS.\n\n### Mark the roots and proceed\n\nOnce we identified all the roots, we mark all the roots as `LIVE` and proceed with the Mark phase. A super optimization that some implementations apply is to invoke the Mark phase for every root as it would help us keep the stack smaller.\n\n### Mark\n\nThe mark phase is just a Depth First Search traversal on one root node and the idea is to mark every node as `LIVE` that is reachable from the root node. Once all the nodes are marked, we can conclude that the nodes that remain unmarked are garbage; and the ones to be cleaned up.\n\n### Sweep\n\nThe nodes left unmarked are the garbage and hence in the sweep phase, the GC iterates through all the objects and frees the unmarked objects, and resets the marked object to prepare them for the next cycle.",
    "notes_gd": "https://drive.google.com/file/d/1_sCJpp4EQlk0GoAzsJEp06JYWEboAnom/view?usp=sharing",
    "slug": "mark-and-sweep-garbage-collection-algorithm"
  },
  {
    "id": 132,
    "topic": {
      "id": 0,
      "uid": "garbage-collection",
      "name": "Garbage Collection",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT3MvruOP09U1bWmcjxLIMwR",
      "bgcolor": "#F0E6FF",
      "themecolor": "#A66AFF",
      "course_url": null
    },
    "yt_video_id": "IojMqbegejk",
    "title": "How to pick a garbage collector?",
    "description": "\"Best\" Garbage Collector is a myth.\n\nIf you are building your Garbage Collector or trying to pick the best for your use case, 7 parameters would help you objectively make the decision. These parameters define a Garbage Collector and determine its performance.\n\nIn the previous video we talked about why languages need an automatic garbage collection - primarily because engineers are unreliable, and in this one, we talk about the 7 key metrics and characteristics of a Garbage Collector that can help us compare and judge which one is better than the other for a specific workload;\n \nSomething all senior engineers spend their time on to get the performance out of their systems.\n\nOutline:\n\n00:00 Introduction\n03:13 7 Characteristics and Metrics of a Garbage Collector\n06:53 Safety\n08:21 Throughput\n11:12 Completeness\n12:52 Pause Time\n17:44 Space Overhead\n19:58 Language-Specific Optimizations\n22:27 Scalability",
    "img": "https://i.ytimg.com/vi/IojMqbegejk/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/Za7ZWOU0su5BC/giphy.gif",
    "duration": "26:37",
    "view_count": 1096,
    "like_count": 53,
    "comment_count": 2,
    "released_at": "2022-04-22",
    "gist": "\"Best\" Garbage Collector is a myth.\n\nIf you are ever writing your Garbage Collector or trying to pick one for your workload, there are 7 metrics that you should be evaluating a GC algorithm on.\n\nNo one garbage collector can be the best across all 7 properties and it was found that any GC algorithm is at least 15% better than other algorithms on at least one of the characteristics. Hence it all boils down to the needs of your specific workload to pick one over the other. The key characteristics are\n\n## Safety\n\nA garbage collector is safe when it never reclaims the space of a LIVE object and always cleans up only the dead objects.\n\nAlthough this looks like an obvious requirement, some GC algorithms claim space of LIVE objects just to gain that extra ounce of performance.\n\n## Throughput\n\nA garbage collector should be as little time cleaning up the garbage as possible; this way it would ensure that the CPU is spent on doing actual work and not just cleaning up the mess.\n\nMost garbage collectors hence run small cycles frequently and a major cycle does deep cleaning once a while. This way they maximize the overall throughput and ensure we spend more time doing actual work.\n\n## Completeness\n\nA garbage collector is said to be complete when it eventually reclaims all the garbage from the heap.\n\nIt is not desirable to do a complete clean-up every time the GC is executed, but eventually, a GC should guarantee that the garbage is cleaned up ensuring zero memory leaks.\n\n## Pause Time\n\nSome garbage collectors pause the program execution during the cleanup and this induces a \"pause\". Long pauses affect the throughput of the system and may lead to unpredictable outcomes; so a GC is designed and tuned to minimize the pause time.\n\nThe garbage collector needs to pause the execution because it needs to either run defragmentation where the heap objects are shuffled freeing up larger contiguous memory segments.\n\n## Space overhead\n\nGarbage collectors require auxiliary data structures to track objects efficiently and the memory required to do so is pure overhead. An efficient GC should have this space overhead as low as possible allowing sufficient memory for the program execution.\n\n## Language Specific Optimizations\n\nMost GC algorithms are generic but when bundled with the programing language the GC can exploit the language patterns and object allocation nuances. So, it is important to pick the GC that can leverage these details and make its execution as efficient as possible.\n\nFor example, in some programming languages, GC runs in constant time by exploiting how objects are allocated on the heap.\n\n## Scalability\n\nMost GC are efficient in cleaning up a small chunk of memory, but a scalable GC would run efficiently even on a server with large RAM. Similarly, a GC should be able to leverage multiple CPU cores, if available, to speed up the execution.",
    "notes_gd": "https://drive.google.com/file/d/1eHwPYsx-k61JoLCz4FudN4DFZMAe-_3j/view?usp=sharing",
    "slug": "how-to-pick-a-garbage-collector"
  },
  {
    "id": 130,
    "topic": {
      "id": 0,
      "uid": "garbage-collection",
      "name": "Garbage Collection",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT3MvruOP09U1bWmcjxLIMwR",
      "bgcolor": "#F0E6FF",
      "themecolor": "#A66AFF",
      "course_url": null
    },
    "yt_video_id": "jcMxuLZCcqU",
    "title": "Why do programming languages need automatic garbage collection?",
    "description": "We know how important Garbage Collection is for any programming language. So, today we explore why programming languages need automatic garbage collection in the first place?\n\nIn this video, we understand - the basics of memory management, the need to allocate objects on the heap, the constructs of explicit deallocation, what happens when we do not do our garbage collection well, and why we need automatic garbage collection.\n\nOutline:\n\n00:00 Basics of Memory Management\n04:39 Why do we need heap allocations?\n06:59 Explicit Deallocation constructs\n09:26 Memory leak - when we do not delete an allocated object\n11:00 Dangling pointer - when we dereference an already freed object\n15:08 Why we need automatic garbage collection",
    "img": "https://i.ytimg.com/vi/jcMxuLZCcqU/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/xT0xehfxlptGeeIvEk/giphy.gif",
    "duration": "16:55",
    "view_count": 2036,
    "like_count": 135,
    "comment_count": 15,
    "released_at": "2022-04-11",
    "gist": "Our programs need memory, typically in the form of variables and objects, to do their job. The objects are either allocated on Stack or Heap.\n\n## Stack allocated objects\n\nA locally declared variable \"int a = 10;\" is allocated on the stack i.e. the stack frame of the function call and hence when the function returns the stack frame is popped, making the variable non-existent. Hence variables allocated on Stack do not need to be freed explicitly.\n\n## Heap allocated objects\n\nA variable allocated on the heap is typically done through functions like the \"new\" or \"malloc\". The object space allocated for such entities is in RAM and they outlive the function scope and execution, and hence they need to be explicitly freed as we are done with it.\n\n## Why do we need a Heap?\n\nObjects assigned on Heap need to be garbage collected, but why do we need the heap in the first place? There are 3 main reasons:\n\n- We cannot grow your stack-allocated objects dynamically,\n- We need dynamically growing objects like Arrays, LinkedList, Trees\n- We might need objects that could be larger than what Stack can fit in\n- We might need to share the same object across multiple threads\n- We do not want our functions to copy and pass bulk objects\n\n## Garbage Collection: Explicit De-allocation\n\nPrimitive programming languages like C and C++ do not have their garbage collection instead expect the developer to not only allocate the object but also deallocate it explicitly. Hence we see the functions like \"malloc\" and \"free\".\n\nThe objects we allocate using \"malloc\" will continue to exist unless they are reclaimed using \"free\". The explicit need to \"Free-ing\" the allocated object is called Explicit Deallocation.\n\nAlthough cleaning up the mess we created is a good idea, it is not reliable that we rely on the engineers and developers to always free the objects they allocated. Hence this gives rise to the need for automatic cleanup of unused variables- automatic garbage collection.\n\nThe two key side-effects of not cleaning up the unused objects we allocate are\n\n- Memory Leak: Leading to an eventual process crash\n- Dangling Pointer: Program behaving unpredictably\n\nHence, to reduce human error, and make the process more reliable and performant the runtimes of the programming languages implement their automatic garbage collection.",
    "notes_gd": "https://drive.google.com/file/d/1vdsTC6j4eDJFzcTOhhIM0JQOR2fW1l61/view?usp=sharing",
    "slug": "why-do-programming-languages-need-automatic-garbage-collection"
  }
]