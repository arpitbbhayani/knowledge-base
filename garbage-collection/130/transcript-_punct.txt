so we know how important garbage collection is for any programming language out there. in this video, we understand why a programming language needs an automatic garbage collection in the first place. right, we start with the basics of memory management. then we look at the construct that language provides us to do a basic garbage collection and why that is unreliable in the first place and that leads to the need of programming language having a way to do automatic garbage collection. right? so we start with memory management at first and we go along that entire journey. right. so any and every program that you write needs memory to work. right? so you assign a variable, you declare a variable in a equal to 10. this variable needs its space so that you can store value. you, you can store value in that variable, you can modify the value in that variable and do that stateful things that you always wanted to do, like so: summation of numbers, multiplication of numbers, updating a variable, updating the value within a struct, and all. so every single thing that you do, every single program that runs, requires some memory to work on. so that's where you declare variables to do your job. right? so the job could be: you building a game, you're doing accounting, you're doing normal chat, all of the the objects that you see on the screen, that all are located somewhere in the memory. right, then only are able to see it, otherwise you, otherwise that would not be functional, right? so every object that we see on the screen or the variable we use are allocated somewhere in the memory. there are two possible places where these variables are located. first is stack, second is heap, right? so heap is where the major part of garbage collection lies, because tag is automatically garbage collected. so we'll spend a few minutes understanding the stack part and then we'll move into the heap part, because that's where the entire discussion will flow it. so whenever you allocate a variable, let's say in a equal to 10, it first gets allocated onto- like not first but uh- in the function scope. when you do in a equal to 10, the variable gets allocated in the stack frame of the function. when the when that this function invokes another function, it adds a new stack frame on top of the stack right, and then the variable on those functions are defined there. and these are local variables. that's where, when a function returns, the stack is popped. as soon as the stack is popped, the variable loses its relevance, because the variable does not really exist. so that's where you do not really need an explicit garbage collection for variables that are allocated on stack. but you definitely need garbage collection where your variables are allocated in the second part of storage, which is heap. so what exactly is heap? heap is everything which is non-stack part of ram. is the heap storage in the heap story like? what you can do is you can request your languages runtime engine to allocate n bytes for your memory, uh, for your object. let's say i want to store 10 books in my in memory array, right when the size of each book is, let's say, 100 bytes. so how much memory i want? i want 1000 bytes of memory to represent 10 objects in the ram. but allocating this much into stack might make your stack very big, will make your stack very big and your program very inefficient, because stack has a very limited size where it can grow. that's what you do. you are- look at big objects onto heap, right when it comes to the heat part of it. this is a pretty standard way of allocating it to the hip. this is more like cc plus this way of doing it. but every language has its own construct depending on the language that you are using, you can see if it gets allocated onto stack or heap or, if you want to look it onto the heap, how you can do it. right, this is a standard c way of doing it. you say that malloc, which is basically memory allocation, like: please allocate me a memory of 10 into size of book, size of book, would written 100 for each book. 100 into 10 is 1000. after this, call my, the runtime engine will allocate 1000 bytes of ram or 1000 bytes of heap and will be referenced by books, so books will contain the address to the starting location of that heap. check right now that we are allocating it to the heap. why? why do we need to allocate to the heap? because stack is local. once the function is popped that, the variable is gone, the the data is lost. so that's where, whenever you'd want to look at big objects and pass it between functions and have a global allocation of it, you you'd always allocate that object onto the heap and pass the reference across the functions. right, so that it does not require you to pass it by value and pass a massive chunk of data across functions. right, so it makes passing of variables simple. multiple functions can refer to that same variable location, which is out there, right? so if two functions want to update the same variable, they are same object in memory. they would be able to do it right. so very efficient way of doing cross function communication right. this is where heap comes in, comes in very handy. so that is why we need heap in the first place. so there are a few very important reasons why we need heap in the first place. because it's like, hey, if i'm not using hip, i don't need garbage collection, so let's just get rid of him, right? no, but we need heap. why? reason number one: we can have objects that are too big or too too inefficient to be on stack, for example, the books example that we took. if we allocate 10 books, we require 100 bytes of memory. adding 100 bytes on top of a stack will make your stack grow faster and stack has a very limited memory, after which you will get an error. hey, i cannot add more things to the stack. your stack grow out of limit, right? so you cannot. you do not want to add and plus. anything you allocate onto the stack is local. as soon as the function is popped, the data is gone, right, so we need. so those type of objects that wants to outlive the execution of your function, you allocate it onto the heap right. so either objects that are too big, you allocate it onto the heap or they're too inefficient to be on the stack, you'll get onto the hip. second reason is you want dynamically growing objects like arrays, linked list trees. they're classic example. hey, you might start with just one node of linked list but depending on what traction you are getting you are, you want to continuously add new nodes to it. you cannot do it on stack, you have to do it on heap. so, dynamically, you allocate a node and then you assign the pointer and then you link the point and you create a link. this same thing goes with tree. so anywhere when you need dynamically growing objects, they are mostly always allocated on heap right. third thing: you want multiple functions to use the same instance object. as i just explained you with the heap, because it's a central storage in ram, you can pass in the reference across functions and two functions. or let's say you have two threads on which the functions are executing. on those two threads can simultaneously update the same object or constantly can access the same object- right, so you don't need to pass this gigantic chunk of object across functions right. plus, they are all they are coordinating on the same object. so better performance. and to not pass, i can take objects onto the function. this is one of the main reasons to do it right. so whenever objects are allocated on top of heap, they are always addressed by reference, basically pointer so address to that particular object. so it will always be the starting offset of this particular object, which which typically referenced by pointer right. so now the constructs that programming languages give you. so every programming language out there gives you a way to do explicit deallocation. so whenever you allocated something in the heap, programming languages will have a way for you to mark that object as, like youtube phys, to physically d allocate the object from the memory, allowing it to be re used by some other function. right. for example, you had a particular chunk in your rib. let's say this is your heap and this is the object that you allocated, and then you explicitly de-allocated the object. now this object, or, sorry, this memory location is now free for any other malloc to or any other function called to grab it. so it might be possible. where some other thread is is is: basically, it wants a memory chunk, and it will get memory chunks starting from here, like some big like, depending on what the request is. so now that it is free, it can be used by someone else to use their object. so once you know that, hey, and i don't need this uh, i don't need this uh memory chunk anymore, i would be deallocating it. so every programming language gives you a way of explicit deallocation, right. so standard example talking in terms of cc plus, in cc buses, you have functions like free and delete that explicitly deallocates an object, allowing it to be reduced by someone else, right? so once you are done, you invoke the free and the object is deleted. so it is good- it is actually good- that programming languages provide a way to dialogue it. but now what happens is someone has, like your code has to trigger, free and delete to dialogue it, right? so you have to rely on your engineer or on your coding or on your best practices to ensure that the objects that you have allocated are always free, right, and this is something that is very risky, because engineers might forget to clean up, uh, the objects that are allocated, right? or they might write a code in which they think that the they freed the object. but it is part of, but it is part of a particular path. so unless this, if path is not taken, the free is not invoked. right. so the object is not always deleted, only in certain cases it is deleted, in some cases it is not right. so it's very unpredictable if you hand it off to your engineers or to the engineers or to your code to do that clean up right where you have to do explicit de-allocation, that is where. but what? what would happen if you don't deal with it right? so like what? what could go wrong? right, so what happens? first case: what happens if an object is not deleted and is not referenced by anyone, so object is just lying there, you get memory leak, right. so memory leak is a very critical condition of your program where you are allocating objects onto your heap but not deallocating it. when you do that, because it's a memory leak, slowly and steadily the memory consumption of the process would shoot up and once it hits hundred percent the and up. once it hits 100 and the process tries to allocate new memory. let's say you trigger a new malloc, you would want to allocate some memory. the process will crash because it could not allocate the memory, it will raise a panic, it will crash. so memory leak is a gigantic problem for any and every software out there. you'll find tons of articles about it because it's a big, big, big problem. so always you need to ensure that whenever you are writing some code, when you are allocating things onto heap, if you don't need it, explicitly mark it for di location, so otherwise your process will crash- your, and then it would be restarted. you say, hey, what happened? obviously you will get it in some exception or something, but it is always better to not let your process crash and give your user the best experience. out there, right, so slowly, like these blue boxes, are the objects which are allocated but not referenced by anyone. so they're just lying there. so, still, incidentally, the entire memory space, the entire heap, would be filled 100 percent allocation and when you try to malloc next, it crashes right now. another case is when what happens when an object is freed but it is still referenced like could happen right here. if you are doing this explicit dialocation, you are doing this free in this one part, very high chance that you might be accessing this object again. right, so some other function might be accessing it as part of that some path right. so there is chance. if you are relying on your engineers to do it or if you are relying on your explicit de-allocation strategy, then there might be a case where the object you think that object is like, one thread thinks that the object is there. another thread has already freed that object. now what would happen? this is a classic case of a dangling pointer where, let's say, this yellow box is that object that exists and is still referenced. so everything is working fine for a, but this gray box was referenced by b, but then it was de-allocated. right and sorry. uh, the uh, the object was deallocated, but b still has the reference to it. like, so some, some function is still accessing this object. and then what happened is that some another thread came in and did a malloc and the language runtime allocated this space. now what is happening over here is that same space. someone thinks that the object exists, but you deallocated, some language runtime allocated this location for some other thread to work on, or so the allocation for another malloc that executed. so it put it its object here. so now what happens now? so this kind of situation is very unpredictable because the location that you are accessing does not exist anymore for you. for you it does not exist anymore. some other thread has already written something on to that particular location. so what you see? you see jargon value, you see garbage value, you see something which is your. the program would be very unpredictable because either it would get the old value or it would get something random. it would get some random set of bytes which you don't know what they are. so dangling pointer is a major problem when- and the worst part is- a program becomes unpredictable because you don't know how your program would behave. so the bugs that happen because of dangling pointer are the worst one to debug because you'll see, in some cases it is working, in some cases it is not. in some cases program is cash crashing, in some cases it is not. so it would be very weird of a situation for you to even debug it right. so in most cases when you are, when you face similar bugs, most common reason has to be a dangling pointer. so the best case- not even kidding, the best case- when you have a dangling pointer is that your process crashes. in most cases your process actually do not crash because even if c has allocated or c is using this memory now, b would still get some data. it's not that b would not get any data. we would get some data over here. we would try to interpret and do something about it. some error or it might be able to successfully read the data as well and it, the entire flow, becomes unpredictable here. so the best case that you would expect, like you would hope for, is, if there is a dangling pointer, please, please, my process crash, right. otherwise, having an unpredictable behavior is the worst that could happen, because with that your data would become inconsistent. you would think, hey, the value i just said to 10, how is this value changing to 20 automatically? because some other process is writing there? right, you need to know that you think that variable exists. that variable does not exist for you because you de-allocated it and some other thread is starting to use it. so unpredictable behavior is the worst kind of things that would happen now because of these reasons, right, where doing an explicit disallocation is is good for writing, uh, with respect to coding best practices, but with respect to human behavior, with respect to human uh, like you, adding to human efforts to remember how to deal with this object and all it's, it's very tedious. it's very tedious to do that and very unreliable per se. so that's where every programming language out there needs a way to automatically do garbage collection. so there are multiple algorithms to do it- uh, to do it like mark and sweep, uh like, for example, reference counting, and also there are there are tons of ways to identify if an object is in use or it is not. how to do garbage collection: old generation, young generation, uh, concurrent marks. there are so many algorithms for the g1 garbage collection and whatnot. right, so we will be basically touching up on that in future videos and some future videos out there. but this idea was like more lucky. why do programming like this even need garbage collection in the first place? so three critical reason: because automatic average collections are more reliable. because it's a code, who is doing it and not the human, so you would expect key, everything would work fine. reduces human effort. because we as engineers, we don't have to put in that effort. hey, all right, this object was allocated, now i want to deal with it. you don't want to put that effort and not prone to human errors. hey, in one path i did free, in another path i did not. so dangling and memory leaks. another part, right, and which is why every programming language runtime gives you a way to do automatic garbage collection, and this garbage collection algorithms are always tunable for a programming language. every programming language has multiple types of garbage collections which you can pick one from which suits your use case better, right, amazing, charla. that's it for this video. i hope you learned something new. well like, why? why do we even need it in the first place? now, if you can appreciate garbage collectors even more, it's basically reducing our efforts into ensuring the every object we allocate, we are freeing it garbage collection. it basically takes care of that in behalf of us. nice, so if you guys like this video, give this video a thumbs up. if you guys like the channel, give this channel a sub and i'll see you in the next one. thanks, saturn.