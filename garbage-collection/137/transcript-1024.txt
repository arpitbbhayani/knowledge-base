in the previous video, we took a look at a very simple microsoft garbage collector, and the approach we saw was a simple depth-first search traversal with two distinct phases: mark and sweep.
so can we write a garbage collector that does not stop the world and runs concurrently with the program, giving us a massive performance boost?
the tri-color invariant allows us to build garbage collectors that run concurrently with the program with very small pause times.
so let's start with the recap of the mark and swift garbage collection algorithm, in which we have we the input to our garbage expression is this object reference graph in which we know which object refers which other object, right?
and then comes the sweet place in which all the unmarked objects which are definitely not reachable from the root nodes are marked as garbage and then are.
and the third one is processing, in which that we have seen that particular object but are yet to process the child of it, right, so we are yet to complete the entire depth first search on that particular node right?
because if a garbage collector is not concurrent, what would happen is we would always have to stop the world for us to run the garbage collection, which would increase, which would have us larger pause times affecting the throughput of our program.
so in order to do this, what we typically, or what dijkstra contributed, is something called as tri-color abstraction, but which gives us high concurrency, which means your garbage collector runs concurrently with the program and within the garbage collector itself, it can leverage multiple threads to do cleanup very fast.
then we have the gray set, which means when the object is seen, which means that we have started a traversal, but we are yet to complete the traversal for that node, which means that we traverse that node, but we- but we are yet to see the, but we are yet to go through all the, all the children's of that particular node.
so if we visualize- sorry, if we visualize, uh, the overall coloring of nodes from black, gray and white, what we can typically see is, by the way here, because black on black background might not look good, that's why i'm painting it green, orange and white, like just just a heads up on that.
so when we uh visualize this overall tracing based garbage collection, you can see it as a wave of gray nodes- this are the gray nodes- which separates the black and the white, and it moves across your object reference graph so slowly you would see like you'll start all nodes as white, and then the and then the gray wave swoops in behind.
so you can see a very nice wave of gray notes moving in the object, separating the black and the white, until all the nodes turn black, like all the reachable nodes turn black right.
when you are having this clear distinction between your black nodes, your white nodes, separated by your gray nodes, this clear distinction gives us concurrency.
so white objects are the candidate nodes to be garbage collected.
so once all the nodes, all the root nodes, are marked as gray, then we start the depth first search, then those children nodes.
right, so in the white set we have candidates that need to be garbage collected.
gray set are the nodes that are reachable from the root node, that are seen as children of some black node but are yet to be completely processed, right.
right, so gray nodes are something that are definitely live, but they are yet to be completely processed.
gray set: once it's complete its children iteration, it will move to the black set, right.
so we pick an object from the gray set and move it to the black set color.
uh, every single child of the gray, of the node that we just saw, of the gray node that we just saw, mark them as gray from the white set and then move this into black one.
so this way we repeat this entire process until every single node from the gray set is complete or is processed right, once the gray set is empty, which means that all the nodes that we have processed, whatever is left in the white is garbage because it was not reachable by anyone from the root.
it is guaranteeing correctness, which means that because black node is definitely the live node and if it is referencing a white node, if that is not possible, which means that our program or a garbage collection is correct, which means that we would never be collecting an object that is life, right.
so that is a very important uh property of our tri-coloration that would guarantee correctness of our garbage collection, right.
you can run a thread as soon as like, you would have a set of garbage collection threads which are running on this gray area, which are concurrently running with your program.
that was an important distinction that we wanted- and as soon as a node enters into this gray set, it is immediately picking that up, moving it into the black set, marking all the child of it from the white into gray right.
what would happen is the mutator thread itself, which means our program itself can start coloring the nodes, as in.
and this is how your, your garbage collection and your main program can run concurrently.
right, we will look at the actual core algorithm behind it, but this tri-color invariant of this three exclusive subset, or three exclusive sets of your all the objects that you have on the heap, paves the way, or it lays the foundation, for us to have a concurrent garbage collector, right?
so this was the key idea that i wanted to discuss in this video about tri-color invariant and how it lays the foundation for concurrent garbage collection, right?
in the next video, what we'll look at is we'll look at improving our mark and sweep garbage collection using this tri-color invariant and build a concurrent garage collector out of it.