[
  {
    "id": 185,
    "topic": {
      "id": 0,
      "uid": "distributed-systems",
      "name": "Distributed Systems",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1wfRQo2xrrst2SGremT_qd",
      "bgcolor": "#DDF0FF",
      "themecolor": "#1798FF",
      "course_url": null
    },
    "yt_video_id": "mcKLQVmCsG4",
    "title": "TimeSlice algorithm for Leader Election in Distributed Systems",
    "description": "Leader Election helps our Distributed Systems auto recover without any human intervention and makes the system autonomous.\n\nIn this video, we take a detailed look into a Leader Election algorithm called TimeSlice that is extremely impractical but it still provides us great insight into a seemingly weird implementation.\n\nOutline:\n\n00:00 Agenda\n02:27 Introduction to the TimeSlice Algorithm\n05:21 The TimeSlice Algorithm\n11:03 Complexity Analysis of TimeSlice Algorithm",
    "img": "https://i.ytimg.com/vi/mcKLQVmCsG4/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/26tnqkPaDXV7EzPAQ/giphy.gif",
    "duration": "14:3",
    "view_count": 78,
    "like_count": 5,
    "comment_count": 0,
    "released_at": "2022-08-26",
    "gist": "",
    "notes_gd": "https://drive.google.com/file/d/1eZ2xCcikcZJ4krKj6pWuQtVvkFhCGAhL/view?usp=sharing",
    "slug": "timeslice-algorithm-for-leader-election-in-distributed-systems"
  },
  {
    "id": 184,
    "topic": {
      "id": 0,
      "uid": "distributed-systems",
      "name": "Distributed Systems",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1wfRQo2xrrst2SGremT_qd",
      "bgcolor": "#DDF0FF",
      "themecolor": "#1798FF",
      "course_url": null
    },
    "yt_video_id": "inzQQm-kXCo",
    "title": "HS algorithm for Leader Election in Distributed Systems",
    "description": "Leader Election is important in every single distributed system out there as it enables us to auto recover from the failures.\n\nIn this video, we take a detailed look at a synchronous ring-based algorithm called the HS algorithm and see how it works on a bidirectional network in O(N logN) complexity.\n\nOutline:\n\n00:00 Agenda\n02:22 Introduction to HS Algorithm\n05:07 The HS Algorithm\n14:37 Halting the HS algorithm\n16:18 Key implementation detail of HS algorithm",
    "img": "https://i.ytimg.com/vi/inzQQm-kXCo/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/STThOmSL9X8jpaEqfE/giphy.gif",
    "duration": "18:55",
    "view_count": 335,
    "like_count": 20,
    "comment_count": 6,
    "released_at": "2022-08-24",
    "gist": "",
    "notes_gd": "https://drive.google.com/file/d/1CHtYoRO_-LFEkX_R0xtTLPVsWfCO9jQd/view?usp=sharing",
    "slug": "hs-algorithm-for-leader-election-in-distributed-systems"
  },
  {
    "id": 183,
    "topic": {
      "id": 0,
      "uid": "distributed-systems",
      "name": "Distributed Systems",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1wfRQo2xrrst2SGremT_qd",
      "bgcolor": "#DDF0FF",
      "themecolor": "#1798FF",
      "course_url": null
    },
    "yt_video_id": "NDBJr37dBzc",
    "title": "LCR algorithm for Leader Election in Distributed Systems",
    "description": "Leader Election is important for our distributed systems to auto recover from the failures.\n\nIn this video, we take a detailed look into a simple, naive, and intuitive distributed Leader Election algorithm called LCR, and understand how simple yet effective this algorithm can be.\n\nOutline:\n\n00:00 Agenda\n02:19 Introduction to LCR Algorithm\n05:07 The LCR Algorithm\n09:54 Halting the LCR Algorithm\n11:44 Complexity Analysis of LCR Algorithm",
    "img": "https://i.ytimg.com/vi/NDBJr37dBzc/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/3orieZaGxNP4493CVy/giphy.gif",
    "duration": "14:20",
    "view_count": 650,
    "like_count": 50,
    "comment_count": 21,
    "released_at": "2022-08-22",
    "gist": "",
    "notes_gd": "https://drive.google.com/file/d/1W-9SA2qEo6jKvxcM4iMi326R63lK7XVm/view?usp=sharing",
    "slug": "lcr-algorithm-for-leader-election-in-distributed-systems"
  },
  {
    "id": 116,
    "topic": {
      "id": 0,
      "uid": "distributed-systems",
      "name": "Distributed Systems",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1wfRQo2xrrst2SGremT_qd",
      "bgcolor": "#DDF0FF",
      "themecolor": "#1798FF",
      "course_url": null
    },
    "yt_video_id": "oMhESvU87jM",
    "title": "Implementing Distributed Transactions using Two Phase Commit Protocol",
    "description": "Previously, we built a theoretical foundation of Distributed Transaction using the Two-Phase Commit protocol. In this video, we implement the Distributed Transaction locally and mimic the food delivery system locally. While implementing we understand how to make the individual operations atomic and the entire distributed transaction atomic. We address resource contention while guaranteeing a consistent user experience.\n\nOutline:\n\n00:00 Revising the Two-Phase Commit\n07:35 Designing Database Schema\n11:40 Defining API Endpoints\n12:24 High-Level Architecture and Request Flow\n19:55 No inconsistent data - Atomicity\n24:14 Code walkthrough",
    "img": "https://i.ytimg.com/vi/oMhESvU87jM/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/RbDKaczqWovIugyJmW/giphy.gif",
    "duration": "39:24",
    "view_count": 2699,
    "like_count": 109,
    "comment_count": 22,
    "released_at": "2022-03-30",
    "gist": "Distributed Transactions are not theoretical; they are very well used in many systems. An example of it is 10-min food/grocery delivery.\n\nPreviously we went through the theoretical foundation for the Two-phase commit protocol; in this one let's spend some time going through the implementation detail and a few things to remember while implementing a distributed transaction.\n\n> The UX we want is: Users should see orders placed only when we have one food item and a delivery agent available to deliver.\n\nA key feature we want from our databases (storage layer) is atomicity. Our storage layer can choose to provide it through atomic operations or full-fledged transactions.\n\nWe will have 3 microservices: Order, Store, and Delivery.\n\nAn important design decision: The store services have food, and every food has packets that can be purchased and assigned. Hence, instead of just playing with the count, we will play with the granular food packets while ordering.\n\n## Phase 1: Reservation\n\nOrder service calls the reservation API exposed on the store and the delivery services. The individual services reserve the food packet (of the ordered food) and a delivery agent atomically (exclusive lock or atomic operation).\n\nUpon reservation, the food packet and the agent become unavailable for any other transaction.\n\n## Phase 2: Assignment\n\nOrder service then calls the store and delivery services to atomically assign the reserved food packet and the delivery agent to the order. Upon success assigning both to the order, the order is marked as successful, and the order service returns a 200 OK to the user.\n\nThe end-user will only see \"Order Placed\" when the food packet is assigned, and the delivery agent is assigned to the order. So, all 4 API calls should succeed for the order to be successfully placed.\n\nNegative cases:\n\n- If any reservation fails, the user will see \"Order Not Placed\"\n- If the reservation is made but assigning fails, the user will see \"Order Not Placed\"\n- If there is any transient issue in any service during the assignment phase, APIs will be retried by the order service to complete the order.\n- To not have a perpetual reservation, every reserved packet and delivery agent will have an expiration timer that will be large enough to cover transient outages.\n\nThus, in any case, an end-user will never experience a moment where we say that the order is placed, but it cannot be fulfilled in the backend.",
    "notes_gd": "https://drive.google.com/file/d/18q2ELr9n6GCemKbJ0aS7q7NyF7wX1kL9/view?usp=sharing",
    "slug": "implementing-distributed-transactions-using-two-phase-commit-protocol"
  },
  {
    "id": 117,
    "topic": {
      "id": 0,
      "uid": "distributed-systems",
      "name": "Distributed Systems",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1wfRQo2xrrst2SGremT_qd",
      "bgcolor": "#DDF0FF",
      "themecolor": "#1798FF",
      "course_url": null
    },
    "yt_video_id": "7FgU1D4EnpQ",
    "title": "Distributed Transactions: Two-Phase Commit Protocol",
    "description": "Distributed Transactions are tough and intimidating. It is hard to guarantee atomicity across microservices given the network delays, resource contention, and unreliable services.\n\nIn this video, we discuss and take a detailed look into Distributed Transactions, understand why they are needed with a real-world example of Zomato's 10-minute food delivery, and build our understanding of the workings of the Two-Phase Commit protocol.\n\nOutline:\n\n00:00 Why Distributed Transactions\n03:44 Atomicity in Distributed Transactions\n06:47 Two-Phase Commit Protocol for Distributed Transactions\n18:29 Advantages and Disadvantages of Two-Phase Commit",
    "img": "https://i.ytimg.com/vi/7FgU1D4EnpQ/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/3o6wO5b4A4Mx965tWE/giphy.gif",
    "duration": "21:21",
    "view_count": 5258,
    "like_count": 219,
    "comment_count": 32,
    "released_at": "2022-03-28",
    "gist": "Distributed Transactions are essential to have strong consistency in a distributed setup.\n\nAn example could be as simple as a 10-min food/grocery delivery- where to guarantee a 10-min delivery, you can only accept orders when there are goods available in the dark store, and a delivery agent is available to deliver the goods.\n\nThis is a classic case of Distributed Transaction where you need a guarantee of atomicity and consistency across two different services. In a distributed setup, we can achieve it using an algorithm called Two-phase Commit.\n\nThe core idea of 2PC is: Split the transaction into two phases: Reservation and Assignment.\n\n## Phase 1: Reservation\n\nThe Order service will first talk to store service to reserve food items and delivery service to reserve a delivery partner. When the food or delivery partner is reserved, they are not notified. By reserving them, we are just making them unavailable for everyone else.\n\nIf the order service fails to reserve any of these, we roll back the reservation and abort the transaction informing the user that the order is not placed. Reservation comes with a timer, which means if we cannot assign a reserved food item to order in \"n\" minutes, we will be releasing the reservation, making them available for other transactions.\n\nWe move forward to the Commit phase only when the order service reserves both- a food item and a delivery agent.\n\n## Phase 2: Commit\n\nIn the Commit phase, the order services reach out to the store service and the delivery service to assign the food and agent to the order. Because the food and the agent were reserved, no other transaction could see it, and hence with a simple assignment, we can get the reserved food and agent assigned to an order.\n\nUpon this assignment, the store and the delivery agent are notified about the order and proceed with their respective duties.\n\nWe retry a few times if any of the assignments fail (which could happen only if the service goes down). If we still cannot get the assignment done, we inform the user that the order cannot be placed.\n\nThe order is placed only after the food item, and the delivery agent is assigned to the order.",
    "notes_gd": "https://drive.google.com/file/d/18WDFAstffIe_vGbtTz_CS117XhvDcBx3/view?usp=sharing",
    "slug": "distributed-transactions-two-phase-commit-protocol"
  }
]