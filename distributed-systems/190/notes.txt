The Two General s Problem

Two Problem Distributed Consensus : General 's Reaching consensus is extremely important in $1000 distributed network any . eg : we cannot have two data nodes in a cluster such that one thinks price = $1000 While the other thinks price = $2000 the Depending on which node the request hits , user would see the value inconsistent view corresponding , giving an somehow the nodes need to value agree on one . . Reaching consensus is easy . When there are NO failures . it becomes impossible problem when communication links are unreliable . Two General's Problem say , there are Kuo generals who wants to A ' L B enemy from different attack directions . The to is when both the only way conquer armies attack simultaneously . If one attacks but the other don't the enemy will win .

The the generals can communicate only via > foot L soldiers This be A B messenger can . captured by the enemy and hence the > message can be lost . ' > HOW would the their attack generals co-ordinate over this unreliable network ? When no lost messages are A B if communication channel is reliable , then all send each other general can attack at 6 ok ? to upon the attack , messages agree . > Works < > After rounds to the diameter equal of ok > the network would know . every general ok < where and when to attack . This algorithm does not work when the communication channel is unreliable , ie when be lost messages can .

Real world analogy Two distributed database general problem = commit in a COMMIT ? > YES PUT Kev > , NO COMMIT ? have to we ensure , either so that our distributed database 1. everybody commits consistent always remain aborts 2. everybody A B When are lost messages | A sent message to B , but B 's response a# "" at ' ok ? ? got lost , so , should A attack * also should B attack ?

A B A sent message to B B , responded , | but did A receive B's decision ? "" "" " " ? this only ' B can be sure about . won,, , , after it receives an ACK from A 0k But , how can A be sure that B agreed hence from it wails for an ACK B from A and and the ACK for an ACK so on - . . . This is the classic Two General 's Problem Two nodes can never come an agreement if network is unreliable How should the decide ? generals A attacks and it sends lots to increase always of messages the probability that one will go through . if none of the messages go through . A attacks . B does not we just increasing but not are the odds , deriving a concrete solution

But distributed consensus is possible but . how ? We make some probabilistic assumptions about the loss of messages eg : if we assume failure rate of 0.5 ; send instead L % we 2 or 3 messages of just to cover the odds Hence , in real world , we always retry . To over compensate for network unreliability