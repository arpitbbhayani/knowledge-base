so the algorithm that will be talking about is called as the hs algorithm, which is also a synchronous algorithm, which means that every node participating in this election would know: hey, now the election is starting, now we are moving to the next round, then the next round in the next round, and now the election is ended.
the best part of this algorithm is that its communication complexity, which means that during the leader election the number of messages exchanged is just order of n log n.
it had a communication complexity of order n square and this is just order n log n, which means that the total number of messages exchanged during the leader election is just order n log n, which is very efficient as compared to your previous lcr algorithm which was n square.
now this: although this algorithm works on a lot of topologies, but the bare minimum expectation that it has is that every node knows both of its neighbors, like its left neighbor and the right neighbor, or its clockwise neighbor and anti-clockwise neighbor.
right, the algorithm works even when the total number of nodes in the network are unknown, and- which is the great part, so not the.
right fair bit of assumptions that we are making is every node has a unique uid, which are comparable, and every node knows both of its immediate neighbors so that it can form a bi-directional ring.
so the idea here is not every node, like there would be multiple rounds in this algorithm, but the nodes who know that their uid is definitely less than someone in the network, they would be immediately stepping out of election, that hey, we are not participating in the election anymore, and this way the number of messages would be reduced.
and here what we would do is we would start with a like core idea, i'm just talking about that every node will find out, hey, in the neighborhood of one, am i the local maxima?
so in my 0th phase, phase 0, every node participates in the election that we know of and every node sends message in 2 raised to 0, equal to 1.
so in its one neighborhood, so miss, every node would send message to a distance of one node in clockwise direction and in anti-clockwise direction, or left or right, right.
so let's say, if my node seven has 3 on the left and 9 on the right, now what would happen in phase 0?
so, similar to elsar algorithm, we do something very similar over here as well, that when the neighboring node receives the message, then what they do is they compare the incoming uid with their own uid, right.
so here, when the message is sent, like, when a node participates in this phase of election, it sends message to its neighborhood, right.
when it is sending the message in that neighborhood, once the number of hops exhaust, then the message is sent back to the originating node.
so now this node is evaluating that, hey, am i still a local maxima in neighborhood of two?
so now what would happen is if we are forwarding a message in, let's say, hop to two, hops, right.
because what would, what could happen if your incoming if for the other nodes, if the incoming uid is less than its own uid, they are discarding the message, which means that if the message is discarded, they would not get reply from a particular side, right.
and that is where what would happen is if a message, if a node receives the reply like it went in that direction and it receives the reply from both the sides, it means that it is still the local maxima in that neighborhood.
and here one key thing to note: it's not that, because it's a bi-directional ring, every node only is supposed to know its immediate neighbors, right?
so even though a node is stepping out of election- that, hey, i have a smaller uid, i'm definitely not going to be a global maximum, so i need to step out- but they would still be relaying the messages because the node is not expected to know any other node in the system.
but they're still relaying the messages and they're not like, hey, i won't do anything in the election because i'm not going to be the leader, right?
now you can very clearly see how we are reducing the number of messages by moving in one neighborhood, then two, four, eight and so on and so forth, and which is what reduces the communication complexity of this algorithm, right?
and when that happens, when a node receives its probe message- right, so the node.
let's say, if in my ring i have six nodes, what would happen as soon as i hit my four neighborhood, like two raise to two as soon as i go to my second phase- what would happen is i would receive my own.
so because there are no local maxima and i'm the only one local maxima, which means i'm the global maxima, right, and this is how the message from a node with the highest uid survives the ring.
and when a node receives its own probe message, it would know that hey, it has the highest uid and it can, and it is the new leader anymore.
so now the new leader relays the message in both the direction and every node knows about it that, hey, this is, this node is the new leader, and this is how the new leader is elected in this system, by this algorithm.
so the message that a node sends in a particular phase, it has three details: uid, which is the node that has i'm participating in the selection, so my uid would be there, plus the number of hops it needs to make.
once it becomes zero, it relays it back to the originating node in the opposite direction, and that's why we are sending the hops and the direction beat clockwise or anti-clockwise in the message itself.