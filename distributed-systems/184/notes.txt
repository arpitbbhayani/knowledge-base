HS Algorithm for Leader Election

HS algorithm for leader Election leader Election is automated an way of system Recovery . When the leader node is down the leader Election , algorithm is triggered which elects the new leader thus restoring the system The HS algorithm r a HS algorithm is also a synchronous algorithm < > r for leader election but it has a communication a , complexity ie # messages for election is Olnlogn ) i , . < ' It works with network that is v any bare minimum] arranged in a bidirectional ring [ . when the total number nodes unknown Algorithm works even of are Assumptions : node has a unique UID every - - U IDs are comparable node knows both of its every - immediate neighbours

The algorithm 1 1 the election Every node participates in 6 2 to be the leader and pitches itself new . Pitch : create a message with its oven 5 3 UID and send it to its immediate 4 neighbours In order to reduce the number messages poor candidates of , step out of the election sooner . CORE IDEA : local maxima proceeds to test if global maxima Each node operates in phases i = 0.1.2.3 . . _ . After each phase , some nodes are eliminated from the election Each of the participating node , in each phase i. " both the direction sends message upto 2 nodes in . Hence , in phase 0 . the election - every node participates in node sends the with its own every message - ID to its neighbours 3 7 9 r 7 7 7

When the neighbouring nodes receive the message . it compares its own UID With the incoming UID to its if incoming UID > own UID : forwards UID neighbour the if incoming UID 4 Owen UID : discard incoming UID the local if incoming UID = = own UID : identifies itself as leader in 2i - neighbourhood and continues . * The message is forwarded only until the desired hop . travel back to the node Once the hops exhaust , they origin 3 7 9 r 7 7 7 3 7 9 r 7 7<9 hence discard 773 , forward 7 My One hop return because 20=1 , , 3 7 9 r 7 7<9 hence discard 773 , forward

In phase 0 node participates and it sends that , every message 2 hops The nodes upon the message travels =L . receiving , either discards it or forwards it . " the survived for 20=1 hop it is sent back If message 2 = , to the origin node . if the origin node gets both the messages back " it knows that it holds the highest UID in its 2 neighbourhood one hop return because 20=1 y , 3 7 9 r 7 7<9 hence discard 773 , forward since 7 is surrounded by 3 and 9 , it will get its message back knows from 3 but not from 9 and hence 7 it is NOT the local maximum in phase 0 20--2 neighbourhood = Hence , it steps out of the election process . u 7 In the next phase r the nodes send , surviving their candidature till 2. 4.8.16 . . _ . hops and this it knows if it is local maximum way in increasing neighbourhood

if the node continues to survive the phases it will become a stronger candidate for the leader it new , as may hold the highest UID . As nodes leave the election the number of messages decreases . , * Nodes who stepped out of the election . still participate in relaying . Halting 6 > 1 The node with the highest UID will survive ^ , the the phase and when it is only one left . 6 < a 2 ^ it will receive its own probe message 6 L highest > and this tells the node that it has the 5 3 , ' UID and hence , the new leader . < a New leader then the message the relays across ring announcing itself as the new leader and the nodes locally updates . Key Implementation Detail The message contains < aid , hops . direction > and this helps node to know I. when to stop forwarding 2. in which direction to reply