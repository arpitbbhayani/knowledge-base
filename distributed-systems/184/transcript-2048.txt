in this video, we take a detailed look at a synchronous ring-based algorithm called the hs algorithm and see how it works on a bi-directional network, in order n log and complexity.
so the algorithm that will be talking about is called as the hs algorithm, which is also a synchronous algorithm, which means that every node participating in this election would know: hey, now the election is starting, now we are moving to the next round, then the next round in the next round, and now the election is ended.
the best part of this algorithm is that its communication complexity, which means that during the leader election the number of messages exchanged is just order of n log n.
it had a communication complexity of order n square and this is just order n log n, which means that the total number of messages exchanged during the leader election is just order n log n, which is very efficient as compared to your previous lcr algorithm which was n square.
now this means that there would be very less network congestion happening in the network, right?
now this: although this algorithm works on a lot of topologies, but the bare minimum expectation that it has is that every node knows both of its neighbors, like its left neighbor and the right neighbor, or its clockwise neighbor and anti-clockwise neighbor.
right, the algorithm works even when the total number of nodes in the network are unknown, and- which is the great part, so not the.
right fair bit of assumptions that we are making is every node has a unique uid, which are comparable, and every node knows both of its immediate neighbors so that it can form a bi-directional ring.
so these are the bare minimum assumptions that we start with, and now we take a look at this very interesting algorithm and what it does, right.
so here, when a node detects that hey, leader is down, it triggers a leader election and, because it is synchronous, every node would know: hey, now we are starting up a leader election, uh, in our network.
hey, i want to be the new leader right now.
every node creates a message with its own uid.
here there are two neighbors right, one in the clockwise direction, another one in the anti-clockwise direction.
so it creates a message and sends it to both of its neighbors, now in order.
so the idea here is not every node, like there would be multiple rounds in this algorithm, but the nodes who know that their uid is definitely less than someone in the network, they would be immediately stepping out of election, that hey, we are not participating in the election anymore, and this way the number of messages would be reduced.
this would reduce the number of messages that are exchanged during this leader election and hence reducing the communication complexity.
so node needs to know that if it is at least in the local maxima, if it is in the local maxima, then it has a chance of surviving when we are doing a global maxima.
and here what we would do is we would start with a like core idea, i'm just talking about that every node will find out, hey, in the neighborhood of one, am i the local maxima?
so now here, what would happen is each of the participating node that you have in each phase i.
so the election happens in multiple phases, right?
so each of the parties, each of the participating node, in each phase i sends message up to 2 raised to i nodes.
so in my 0th phase, phase 0, every node participates in the election that we know of and every node sends message in 2 raised to 0, equal to 1.
so in its one neighborhood, so miss, every node would send message to a distance of one node in clockwise direction and in anti-clockwise direction, or left or right, right.
one neighborhood from my current node right.
so let's say, if my node seven has 3 on the left and 9 on the right, now what would happen in phase 0?
so, similar to elsar algorithm, we do something very similar over here as well, that when the neighboring node receives the message, then what they do is they compare the incoming uid with their own uid, right.
as soon as three node receives a message from seven?
what would happen is it would compare the incoming uid, which is 7, with 3.
i'll explain that in a minute, but it it basically classifies to be: hey, now i can forward this message, otherwise it would not right.
it would basically forward the message right now.
what could happen is the incoming uid is less than its own uid, right?
now let's say i'm talking about node nine receiving message from node 7..
9 would say that hey, incoming uid 7 is less than my own uids, i will discard the message.
the message is discarded by that node, right.
so here, when the message is sent, like, when a node participates in this phase of election, it sends message to its neighborhood, right.
when it is sending the message in that neighborhood, once the number of hops exhaust, then the message is sent back to the originating node.
so, for example, in phase 0, a node sends message to its immediate node, to its immediate neighbors, right, and then they would send back the message to the originating node because one hop is complete right.
so then it would do 2 raised to 1 hops, which means it would start from this node and send to its immediate neighbors and they would send to their neighbors.
so now this node is evaluating that, hey, am i still a local maxima in neighborhood of two?
so once the message hits the nodes at distance of two hops from my current node, they would be sending back to the originating node.
so now what would happen is if we are forwarding a message in, let's say, hop to two, hops, right.
because what would, what could happen if your incoming if for the other nodes, if the incoming uid is less than its own uid, they are discarding the message, which means that if the message is discarded, they would not get reply from a particular side, right.
and that is where what would happen is if a message, if a node receives the reply like it went in that direction and it receives the reply from both the sides, it means that it is still the local maxima in that neighborhood.
eventually, what would happen is your ring would exhaust and you would get, and you would get your probe med search directly, right, and if that happens, you would know that, hey, you are the leader, right?
the message with the la, the node with the largest uid, would survive, because all other messages would be discarded, right.
and here one key thing to note: it's not that, because it's a bi-directional ring, every node only is supposed to know its immediate neighbors, right?
so even though a node is stepping out of election- that, hey, i have a smaller uid, i'm definitely not going to be a global maximum, so i need to step out- but they would still be relaying the messages because the node is not expected to know any other node in the system.
it's expected to know only its immediate neighbors on the left and on the right, right.
so other nodes are still relaying the messages, but they're still doing it in a way that, hey, we would know that, hey, i'm, i'm basically forwarding this message till this hop, so they would continue to relay the message while doing that comparison of dropping the message or not, and all of that is continuously happening.
but they're still relaying the messages and they're not like, hey, i won't do anything in the election because i'm not going to be the leader, right?
now you can very clearly see how we are reducing the number of messages by moving in one neighborhood, then two, four, eight and so on and so forth, and which is what reduces the communication complexity of this algorithm, right?
so here the node with the highest uid will be, will be surviving this entire drill, and what would happen is that would be the only one that would be left in the system.
and when that happens, when a node receives its probe message- right, so the node.
let's say, if in my ring i have six nodes, what would happen as soon as i hit my four neighborhood, like two raise to two as soon as i go to my second phase- what would happen is i would receive my own.
i would receive my own probe message, right, because i'm moving it to eight hops.
so what would happen is i will go around the ring and come back to the same node again.
so that's how you would know that hey, no one else is surviving, everyone else stepped out.
so because there are no local maxima and i'm the only one local maxima, which means i'm the global maxima, right, and this is how the message from a node with the highest uid survives the ring.
and when a node receives its own probe message, it would know that hey, it has the highest uid and it can, and it is the new leader anymore.
so now the new leader relays the message in both the direction and every node knows about it that, hey, this is, this node is the new leader, and this is how the new leader is elected in this system, by this algorithm.
one key implementation detail that i want to talk about is: how would you know that the number of hops are existed, are exhausted?
the core of this algorithm is that we are first checking in one neighborhood, then two neighborhood, then four hop neighborhood right.
hey, now i have, now my message has made four hops and now i have to come back again.
so the message that a node sends in a particular phase, it has three details: uid, which is the node that has i'm participating in the selection, so my uid would be there, plus the number of hops it needs to make.
so 1, 2, 4, 8, 16, the hop count and the direction: is it left or right, is it clockwise or anti-clockwise?
now, what this would help is, every time this message is forwarded to the new node, or or basically, to the neighborhood node, it would reduce the hops and send it forward, it would reduce the hop and send it forward, and on and so on and so forth.
once it reaches the node and the hops are exhausted, it uses its direction and reverses it and sends it in the other direction.
once it becomes zero, it relays it back to the originating node in the opposite direction, and that's why we are sending the hops and the direction beat clockwise or anti-clockwise in the message itself.
right, and this is a very simple yet very efficient implementation of a leader relation algorithm.
this is how it reduces the communication complexity, because each node is now only acting as a relay rather than pitching itself.
the complexity has drastically reduced to order n, log n, because we are constantly increasing our neighborhood and a lot of nodes would constantly be falling out of the system and say would be falling out of the election.
right, and this was the hs algorithm to do leader election in a distributed system with bi-directional, in a bi-directional ring, and that's the beauty of this implementation.