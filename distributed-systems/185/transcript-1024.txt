this can be done by a, by an engineer configuring a node to be the new leader, but it requires time.
so what happens is that time slice algorithm is an unbounded, so you would not know when your algorithm would stop.
it's an unbounded algorithm, impractical, but synchronous, right, as i mentioned, like the synchronous algorithm where every node knows that hey, now the election is starting and now we are moving in first place, second phase or something like that.
so here what happens is it assumes that each node in the network is placed on a unidirectional ring.
this is the bare minimum assumption that we are making: that every node is placed on a unidirectional ring and it knows its immediate neighbor.
then the no, the node knows its neighbor in the clockwise direction because it's a unidirectional ring, and they are aware about the total number of nodes in the network.
now, this algorithm does not work on an assumption like sorry, this algorithm works on an assumption that every node in the system knows the number of nodes in the system.
here it elects the node with the minimum uid, the number of messages passed, which is the communication complexity is extremely low, it's just order of n, but the time is very high.
the time it takes is order of n into u mean, which is the minimum uid of the network.
right, each phase consists of n rounds, where n is the number of nodes in the system.
right, so each phase has end rounds in it.
in phase one, only the node with uid one can send a message if in phase one, round one, two, three, four, five, six.
no one else can do anything, only the node with uid one can do it, right?
so if nothing happens, then the election moves to phase two.
in phase two, the node with uid2 can send a message.
in a phase i, a node cannot forward a message from any node except i.
right, any message that contains any uid except i.
so let's say, in my distributed network i have nodes- uh, i have nodes 3, 4, 5, 11, 13 and 18 right, and now these nodes- it needs to elect a leader amongst themselves.
so now what would happen as soon as my leader election algorithm starts?
phase one, round one, phase one, because there is no node has which has uid one.
as soon as we enter phase 3, now magic starts to happen.
as soon as we interface three, what we would know that node with uid three would be less key array.
as soon as this happens, as soon as the node knows, hey, we have entered the phase three, i did not receive any message, i am the leader now.
now the node with uid3 will react and because it has not received any message- it knows that it is the new leader- it creates an announcement message.
so phase 3, round 1: node with uid 3 creates an announcement message and sends it to its neighbor which is node 11 or node 17, something, any node in its right.
so because this node 17 has the message with id 3, with uid 3, and it is phase 3, in round 2 the message will be forwarded to the next node, so 4, and then in the next one it will go to 13, in the next round it will go to 8 and the next side will go to 5..
so in the phase 3, all n rounds the announcement message will send, will be moved from one node to another node, to another node, to another node, right?
because this is happening synchronously, everyone knows that with each passing time, with each passing ground, i have to forward the message.
so everyone, every node, just simply knows that we are in this round.
i'll be forwarding it to the, to my immediate neighbor, and when the next one comes in, the new, the next node would know: hey, i have message with this uid and we are in this particular phase.
so now, here, what happens is, up until the time we see the minimum uid, those many rounds or those many faces are gone.
and now the bare minimum- sorry, the minimum uid that you have in the network is what is what is elected as the leader and over the next end rounds, everyone in the network knows about this new leader, right?
so in this example that we take, uh, in this example that we took, it was node uid 3, which was the least one, so which is where your new leader was elected as node id 3.
and in the phase 3, for end rounds, every node in the network knew about this new leader.
if i have n nodes in the system, the number of messages exchanges n, because up until phase i, where i is my minimum node, nothing happens.
complexity of this algorithm: extremely efficient, but the time complexity is pathetic because for n rounds, up until we see umin, up until we see the minimum uid in the network, we are just waiting and waiting, and waiting.
what if the minimum id is 1000, if the minimum id is 1000 in the network, for 1000, right, for 1000 phases, and if let's say, there are n iterations?
for each of the round, we start forwarding the message, and which is what the slowness of this algorithm is all about, right?
so, given that the messages are not even sent until we see the start of phase i, which is equal to u min the minimum uid in the network.
it is dependent on the minimum uid of this network, and which makes this algorithm pathetically slow and impractical, but it's still very interesting.
so, yeah, that's it for this video.
it was like sleep sword per se and, uh, quite, quite interesting to know about, right.