so distributed transactions are heart and soul of distributed systems, and getting all the participating nodes to agree to that commit or about a distributed transaction is not an easy job.
in this video we talk about the two-phase commit protocol that takes baby steps to ensure that we can get all the nodes to either commit or abort, while ensuring that the data never goes in an inconsistent state.
thanks.
say we have a distributed database with three nodes and we want our commit to succeed when the commit at all the db's succeed.
this is a classic case of distributed transaction, when we are writing it in a transactional manner that either everyone succeeds or if even one of them aborts, everything about right.
so before we jump into two phase commit, we'll go through the assumptions.
there are three classic assumptions that will be made, not very severe but very lenient assumptions that we are making, the first one being that there is no message loss, which means that when two nodes connected to each other via connection- if this, if one node sends message to other, the message is not lost- the connection may be broken.
in that case we would do a retry, but your message, once sent, will not be lost.
primarily, if we use tcp connection, this is pretty much unshort, right?
second assumption: that a process failure can happen, which means that while participating in a distributed transaction, this- like one of the node, or the leader or someone, something processes can crash.
but you still should be either committing or aborting, and that should be unanimous.
third, your graph is fully connected, which means that every node knows about existence of every other node.
and at the end of your distributed transaction, you should ensure- or the algorithm, the protocol should ensure- that no two processes can decide on different values, which means that either everyone commits or everyone aborts.
hey, five nodes would commit but four are aborting, right?
so the decision has to be unanimous and it has to be uniform, right?
so now let's jump into the two phase commit protocol and let's see how it tries to ensure- and in some cases does ensure- a distributed transaction.
okay, so two phase commit.
what it says is that, say, we have n processes participating in a transaction.
it just end processes, they are participating in a transaction.
now this a could be the leader node or the coordinator node, having the largest uid something, something some way through which we know that this process is going to be the coordinator.
in most cases it could be the first node that received the right request from the client.
or it could be the leader node of your network, anything but a process.
a node has to become the coordinator of this two-phase commit protocol.
right now, this two-phase commit happens in two phases.
here what we would do is all the nodes, if they can commit or abort, they send this value to a, given that a is your coordinator node, right?
if i have a four node network- a, b, c, d- a is my coordinator.
so i will be receiving messages from b, c and d setting if they can commit or not, right?
so a is the one who is gathering all the information about all other nodes and asking, hey, can you commit, can you commit, can you commit?
right, so they would be responding if they can commit or not.
in case it does not receive a message from any of the node, it can assume by default that that node is going to abort, right, okay?
so a, up until now, has gathered all the decisions and it knows its own decision whether it itself can commit or not.
right, and the idea is pretty simple: if every node commits, then the decision is commit.
if every node, if even one of the node, aborts, the decision is about.
so that the at the end of phase one, a has information about all the nodes, whether they are trying or whether they are, whether they can commit or they can abort.
it knows its own decision.
so, in totality, a would know if the overall decision is going to be commit or abort.
in the phase 2, what would happen is your process.
a will broadcast this information, like basically this decision, to all the nodes in the network, right?
so once a has understood that final thing: either this commit or abort.
it will let this information percolate in the network well, such that b, c and d would be known.
i like would realize that, hey, are we committing or not?
right, they would know.
they would know the decision from a, because a is sending the message to every one of them.
so just to reiterate, two face commit happens in two phases.
first one where everyone sends its decision to the coordinator node.
in the phase two, your coordinator sends the final decision that the entire cluster is taking to every single one of the node, as simple as it can be, right, okay, in case in case, if any node did not participate in round one due to any reason- maybe crash, maybe anything- they will be deciding on the decision sent by a.
so, whatever a decides, because you did not participate, you have to live like it's classic election case where, even if you didn't vote the person who came into the power, you have to abide to that person because that person is the leader.
right, okay, this is a classic case of two-phase commit.
but now let's understand the failure scenarios in a network that implements two-phase commit protocol.
case number one: where your coordinator node fails before initiating the first phase.
let's say you got some right and you wanted to know whether my network is going to commit or abort.
but a coordinator node, before even initiating the first phase, whether, when the other nodes are sending the, the coordinator node the information, their decision, right if it failed, which means that your consensus did not begin at all, so all good.
so, because nothing even got started, even if your coordinator fails with at that time, it's all good, because you are not making any decision.
what would happen typically for coordinator?
the network automatically picks another coordinator through any leader election strategy, right, okay.
second, if the coordinator fails after initiating the first phase, which means that what would happen if your coordinator, after initiating the first phase, which means that while it is about to receive messages from the participating nodes, what if some of the nodes sent a the message, which means it send their decision, whether they can commit or report if they send their decision to the coordinator node, what would happen?
so some nodes who send that state are blocked on the coordinator to respond.
classic case: because your coordinator failed after initiating the first phase.
which means if b and c send the decision to a, the coordinator, now b and c would be waiting perpetually to receive response from a that what's the final decision?
now a needs to make the final decision and send them.
so if your coordinator fails after initiating the phase one, the, everything comes to a halt because the, the nodes who send the messages to a.
they are waiting for a response to come from a but a is crashed so they will not get any information.
but it is a critical case where up until the time your nodes realize that the coordinator is down, everything comes to a grinding halt.
they are continuously waiting right.
case number three, where your two face commit comes to a halt when the participant crashes before sending its preference to the coordinator because coordinator cannot proceed.
let's say you have three nodes, or rather your network has four nodes.
three nodes are sending the first node the information.
so b, c and d are sending the information to a.
a is waiting for the decision from d up until the time a realizes that d crashes.
so your entire two-phase commit comes to a grinding halt up until all the nodes can send their local decisions to a problem.
right, this is a failure scenario.
so if a participant crash at phase two, which means that they all let the coordinator know about the decision, now coordinator is sending the final decision to the participant.
and at this stage, if one of the participant crashed, now what would happen?
the coordinator does not know if the participant who just crashed crashed before applying the changes or after applying the changes.
right, all the coordinators know the global decision, right, whether it had to commit or abort.
but your participant who crashed, coordinator, does not know that if the participant applied the changes, or it or it was about to apply the changes, at that time the crash happened.
so when here, when the participant comes back up, it does not know if it has to commit or abort.
problem, this is a classic case.
so that is where obviously all the participating nodes needs to somehow maintain this state persistent so that even after recovering from the crash they have that information.
now things become extra interesting in the fifth case, where if coordinator and one participant die in phase two, so every node send its local decision to a.
now what a did is a, when it is broadcasting the information, it is broadcasting the information one by one to each of the other node, right.
so b, c and d, a sending message to bcnd individually.
say a send a message to b and after this a and b both crashed.
so when this happens, the biggest problem here is when other nodes would be electing the leader.
other nodes are not aware on what the decision was made by a because they are yet to receive the message from n.
before that only a crashed, which means the decision of the coordinator is not known by anyone.
and now, when the participant has, when the participant has crashed, the same problem comes back up again, where after recovery, participant does not know what to do.
so participant in itself needs to maintain the state if it received a message it crashed before or after and what not.
but this is a classic case where, after recovering, you are not like.
the entire system is not aware of the final decision that has been taken, so re-election.
after that, things come to a grinding halt problem.
so this is one of the reasons why two phase commit is called as a blocking protocol, because in case of a failure of a colleague or a participant, in most cases you are not able to confidently recover and resume your operations.
but just to do a quick complexity analysis of this, we know that your two-phase commit happens for two rounds.
because in first phase, every node sends message to a, which means n minus one message will be exchanged, and in the second phase, a will be sending message to n minus one nodes, so the total number of communication happening, or the combination complexity, becomes two times n minus one.
so two n minus two is the communication complexity of this algorithm, right?
that's not so critical as compared to the edge cases that we just saw, which is where we introduced a new protocol called a three phase commit, which will be taking a look in the next video, right.
it looks very easy, but it's definitely not, because a lot of edge cases are there, that that basically pops up when you are working in a distributed environment.
thanks, [Music].