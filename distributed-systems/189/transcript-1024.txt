this is where having a good knowledge of minimum spanning tree for the network comes in, because you can do that in the most efficient way possible, because you are minimizing the edges of it, and this is what makes this particular algorithm classic.
take it by congestion level: in in my network with the same connection, and what if one link is having very high load while other links are sitting idle again, minimum spanning tree is really important, right, because you are optimizing on time, you are optimizing on congestion, you are optimizing on cost- pick up, pick your favorite factor- and you would need a minimum spanning tree to solve this particular problem.
so, hence, what we can at max assume is we can assume that every node knows the weight of all of its incident edges and the total number of nodes in the network.
so if i were to, if i were to formulate the problem statement, it would be: find the minimum weight spanning tree for the entire network, such that each node slash machine decides which of its incident edges are part and not part of the spanning tree, right?
every node would just know out of, let's say, if a node has four incident edges at the after this algorithm is completed, it should know out of these four edges, which edges are covered and which edges are not in the spanning tree, because there would not be anyone who don't have the entire information.
the core strategy to construct a spanning tree in a distributed setup is we start small, with a forest of spanning trees and we repetitively merge them to create a single spanning tree, kind of like divide and conquer, right?
so what would have is, let's say, uh, at a particular state of my network, i have two components, each one having some nodes con, which are creating a spanning tree, a subspanning tree, within that.
so if i have n nodes in my network at level 0, where there are no edges covered yet, this is the spanning forest of n spanning trees.
now, because this is a distributed setup, no node in my component knows which are the edges that are outgoing edges.
when a node receives the search message, what would happen is it would be searching for an outgoing edge that is going out of the component.
so what every node would do is every node, upon receiving the search message, it sends a test message to its neighbors and the neighbors respond with the leader uid of its component.
so every node knows the component that it is part of and the leader uid of that component, right?
so if i receive the message, what i would do is i would send it to all of my neighbors saying, hey, i am this node, i have this leader, what do you have?
it would say that, hey, i am this node, because it would know, like, this is the node and i am part of a component having this as a leader.
if leader uid varies, then they are part of the different component and that's how it would know that this particular edge that took me toward this particular node is connecting me to a different component.
right now, that every node knows, if applicable, one, one outgoing edge that connects itself to the com, to another component.
right, so it would know that these are the peripheral nodes of my component, because this is what we have to find.
now, once these nodes know that, hey, this is the outgoing edge that is connecting r component to other component, what it would do is it would, it would uh, of all of these minimum edges, it would send this information back to the leader, that every peripheral load, it would send a message back to the leader using what converge cost, right?
it would compute the global minima and that's how it would know that, hey, i need to connect to, like, i need our component to merge with that other component, right?
now the components combine over this mwoe minimum weight outgoing h right, the edge that was chosen by the leader.
they are connected by this minimum weight outgoing edge and these two components would merge on that.
so leader of the component talks to the nodes connected via mwoe, the minimum weight outgoing edge, because the leader itself chose that edge.
so the leader would send a message to both the nodes connected via this mwoe to tell you, hey, change your edge.
so the way it would happen is the new leader of the merged component will be out of the two nodes, that whose who are connected by mwoe.
the node having the larger uid becomes the leader of this merged component.
when the two nodes who are connected by this minimum weight outgoing edge they merge, or like they are changing the edge, both of them knows each other, the both of them knows each other's uid and they would know: hey, my ui dislodger, i'll be the leader.
so every node would send null responses to the leader saying that, hey, there are no, like i do not have any edge that connects our component to other component.
and when we talk about communication complexity, what is happening is each, at each level, order of n messages are sent and order of e messages are received to decide m w o e, because leader, like every node, sends a message.
now let's see how our life becomes super simple when we already have a minimum spanning tree constructed and if you want to do leader election, because this shows that how one algorithm empowers hundreds of different use cases.
when it's happening this way, there would be two cases: either that node receives messages from all of its neighbors without sending anything, that becomes a leader.
and this is how, and this is how you can power a leader election algorithm in a network who has all that has already constructed a minimum spanning tree.