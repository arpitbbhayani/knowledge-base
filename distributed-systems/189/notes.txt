Minimum Spanning Tree in Distributed Systems

Minimum Tree distributed system Spanning in say , a node wants to broadcast a message in a distributed network , but it has to be extremely efficient about it . This is where having a Minimum spanning Tree makes a difference . Tree Spanning A tree that covers all the nodes through selective edges Minimum spanning Tree is a spanning tree built such that the total cost included is minimum of edges . 7 But what does it mean for a classic graph algorithm distributed system ? B say , nodes are connected and the 30 communication lines have different tanit A F- Nodes = machines 10 lines edges = communication 20 Weight = cost to move packet across C have to D For an efficient broadcast . We cover minimal all nodes by covering edges such that cost is

Distributed Setup distributed setup there would Given that we are working in a , not be that has the entire any node topological information . and hence we assume 10 27 every node knows weight of all its 20 52 incident edges every node knows the n total nodes in the network 10 Problem statement 20 Find minimum - weight spanning tree for the 22 entire network such that each node machine 56 / decides which its incident of edges are 77 tree and are not part of the spanning core strategy start small with a forest of spanning trees create and repetitively merge them to a single spanning tree .

The GHS algorithm " The algorithm operates on level collection trees and each level is a of spanning that Forest we call Spanning level has leader Every component ( tree ) at each a and the spanning tree is identified / represented by it . GHS algorithm is synchronous and hence node proceeds every synchronously in rounds . level 0 consist all the nodes and of no edges Each node is tree . a spanning and for n nodes we have a spanning forest og n spanning trees . At this knows stage . every node ' ' - total number of nodes n - incident edges to it its component UID of the leader of - ( spanning tree)

Each node within the component sends a search message within the component to get NIWOE Minimum Weight Outgoing Edge using Broadcast is sent BFS Search message Each node the search message receiving . - searches for an outgoing edge that is the component ( incident that node ) going out of on it selects the one - Out of all such edges with the minimum weight the node know if the other node its But how would along the component not ? outgoing or within edge is same * Every node sends a test message to its neighbours with the leader of its component neighbour can respond UID and comparing it the node knows if test > < the is it to edge connecting some other leader not component or . other to determine this * We can use any way .

* it applicable Now that node knows every og one that connects and outgoing edge itself the component to another component it sends this edge and node into to the leader of the component . Out all the minimum edges that of leader receives , it evaluates the global minima and that becomes the edge that is MWOE of the entire component . Merging The components combine over this MWOE and form a larger component - But how ? M leader of the component talks to the nodes : either side i M connected over MW OE on i , ' , i. i - mark the edge to be in the new tree New leader this merged component will be of the node with larger UID , of the Kuo connected over MW OE . This info is Broad casted across component .

level by level there chance that Because each node is independent , so is a nodes form conflicting components and merging them forms may a cycle , hence we need to bring order . . . Hence level the algorithm proceeds level by level O : each node is a component in itself become level L level L : two level 0 components merge to one level L and level 0 merge to become level 1 Process continues and level K nodes keep on merging and forming higher levels

Termination of algorithm number levels the spanning After some of , forest will contain just one tree containing all the nodes . Each node oeil I know the edge part of the spanning tree . When the algorithm will try to find MWOE , it would not find The leader will know about this because it would get any . suggesting the completion empty responses from peripheral nodes Complexity Analysis " At each level there are at least 2 nodes Because the components are merged by level Total levels are at most 10g n Each level takes 01m time hence time complexity is Olnlogn ) communication complexity = 0 ( Intl F- 1) login ) 0 (E) at each level 01M Msg sent & message for deciding MWOE .

leader Election with MST Once NIST is constructed , leader election becomes pretty simple , so long as we have u IDs information . A node with no outgoing edge is a leaf and sitting at peripheral is a leaf node leaves initiates a converge cast . but Internal node waits to hear from all one neighbours Then it sends message to the remaining neighbour a ' Termination : nr its neighbours if a node hears from all without itself sending any message leader > the " it declares itself new u as nodes receive messages it two neighbouring > n < each the round from other in same , one with the higher UID declares itself as the new leader