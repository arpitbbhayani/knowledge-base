in this one, let's implement a two-phase commit protocol locally, right, the idea, or we, we basically continue our same example of zometro's 10-minute food delivery, and what we'll do is we'll go through the different components that we would need or the different low-level details that we would need, understand the database schema, understand how two phase commit protocol helps us ensure atomicity, like how it guarantees atomic transactions.
the core idea here is, like, with respect to zomatos principle, what it says, that it will bulk, purchase the food from restaurant, keep it in the store and have a fleet of delivery agents who are there to delivery, to to basically deliver the food within 10 minutes, because the food is pre-purchased, it just needs to be heat, it just needs to be heated up and assigned it to a delivery agent to be delivered.
but now, to guarantee a delivery under 10 minutes, what zometo would have to ensure is that the food is available, like when it shows to the user that the order is placed.
when it shows to the user that the order is placed, the food has to be available in the store and the delivery partner has to be available to deliver the food.
so here the core part that we have to guarantee is: unless both of them are there- which means unless the food is available- and delivery partner server, then only you will tell user that the order is placed.
so let's say, if there is one delivery agent, agent one and that particular delivery agent- like that should not happen- that two orders are assigned.
the same delivery agent or the same food item is not assigned to two orders, right?
so the end goal here is our end user should never see order placed if we were not able to get one food and one delivery agent assigned to it, right?
so order service will talk to store service and say, hey, reserve food.
order service will talk to delivery service and say, hey, reserve an agent.
this is not about assigning an agent to an order, it's just about reserving that particular person for delivery, who anyone can use it, anyone like.
right, you would have a timer set which say that, hey, after this much time, my resources would be free, like the food packet that you reserved for a particular order will be free, will be now available for some other order to be picked.
which means that when i am assigning a, basically when i'm assigning a food packet or a food to an order, it's more like.
so the flow of the request or the flow of the communication between services goes like this: so user makes a call to order service saying: hey, place this order with for this food and whatnot.
the call will go to store service and it would reserve the first available packet for that particular food.
again, similar to food, we are reserving a delivery agent for some order.
right, if any of this is unsuccessful- as if i'm not able to reserve food because, let's say, packets are over, if you're not able to reserve an agent, let's say because everyone's they're out on the delivery- we would return saying order is not placed.
it would get order not placed or food item not available or delivery agent not available, something, something.
obviously, actual implementation might vary because as business you would want to accept as many orders as you can and then figure out a deliver, then then figure out the delivery agent to to deliver the food.
right, so food was assigned to an order but my agent service was down.
so when i say assign put, which means the store was given a command to start heating up the food and preparing it for the agent to be basically preparing it for the delivery.
you might have some business impact because you accepted a like you assigned a food to an order which is not ready, which cannot be delivered because there is no delivery agent assigned to it.
so here, because we are not implementing timer or expiration or auto free up, once food packet or agent is reserved, they will remain perpetually blocked, right, but having an expiry solves this problem, okay.
so all of these four transactions, all of these four updates that we are making across two different services, they are all individually done atomically, which means once a food packet is reserved, it cannot be us, it cannot be made reserved again, right?
if once you are very sure that you have food and you have delivery agent ready, then only you are saying to the user that hey, i'm there, like i'm, i'm basically be able to serve you or deliver the food to you in 10 minutes.
so finding the first packet that is reserved, belonging to a particular food and which is not assigned to any order, and then we are updating it over here- is reserved is false and order right is equal to something.
so, let's say, i'm placing 10 concurrent orders for a particular food item and this means that at the end of my transaction there should be 10 delivery agent assigned to 10 uh and 10 and 10 foot packets assigned to one assigned to 10 orders.
you would see like there were 15 packets, uh, out of which 10 got placed, after which 10 got assigned to a particular order, right.
because my delivery agent- because my delivery agent- is already assigned to a particular order, it should give end user order not placed, right?
there were 10 delivery agent, but if i see through my packet, you would see all of these five are now reserved right, which means that they are now exclusively there for in.
uh, it would assign that packet and that agent to that order, right?