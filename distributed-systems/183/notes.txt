LCR Algorithm for Leader Election

LCR algorithm for leader Election leader Election is automated an way of system Recovery . When the leader node is down the leader Election , algorithm is triggered which elects the new leader thus restoring the system and synchronous The LCR algorithm a the simplest leader Election LCR is one of r > algorithm It works with network . any topologically arranged in a - which is < ] v unidirectional [ bare minimum ring . when the total number nodes unknown Algorithm works even of are Assumptions : node has a unique UID every - - U IDs are comparable node knows its immediate every - clockwise neighbour

The algorithm ^ the election Every node participates in > to be the leader r and pitches itself new . Pitch create a message with its oven UID : - < and send it to its neighbour . When a node receives a UID , it compares the With its UID incoming UID oven to its if incoming UID > own UID : forwards UID neighbour the if incoming UID 4 Owen UID : discard incoming UID declares the leader if incoming UID = = own UID : itself as Because every single node participates , the message by the node with the largest UID will survive and will eventually reach the node from where it started . The node will thus know it has the largest UID and hence the new leader The new leader is then announced through another message passed across the topology .

the Halting algorithm There to automatically is no way for a node it would not know stop , as if everyone completed their pitching . ( total node count could be unknown ) that leader Only the new leader would know it is the new and hence it initiates the HALT The new leader initiates a message having a I. the new leader information > r 2. notification to stop / halt the election " " - when a node receives this report Msg , < halls the election - " process stores the - new leader information locally - forwards the message to the next node complexity since each node pitches itself and the message may make entire trip , the worst case of communication complexity [# messages ) is 01h2 ) where number nodes in the network n : of