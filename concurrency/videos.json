[
  {
    "id": 226,
    "topic": {
      "id": 0,
      "uid": "concurrency",
      "name": "Concurrency in Depth",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT3VjDhjMb5yBsgn0wn2-fjp",
      "bgcolor": "#C7EFFF",
      "themecolor": "#2390BB",
      "course_url": null
    },
    "yt_video_id": "f9gUFy-9uCM",
    "title": "Why most TCP servers are multi threaded and how to build one from scratch",
    "description": "System Design for Experienced Engineers: https://arpitbhayani.me/masterclass\nRedis Internals: https://arpitbhayani.me/redis\n\nLink to the repository: https://github.com/arpitbbhayani/tcpserver\n\nTCP is the most reliable way for two machines to talk to each other over the network. The real question is how is one web server able to handle and serve multiple TCP connections?\n\nIn this video, let's understand this by building our own server from scratch using raw sockets - while doing so! we will understand system calls, socket programming, and their limitations, and then we will tune it to handle multiple requests simultaneously.",
    "img": "https://i.ytimg.com/vi/f9gUFy-9uCM/mqdefault.jpg",
    "gif": null,
    "duration": "28:28",
    "view_count": 6393,
    "like_count": 313,
    "comment_count": 34,
    "released_at": "2023-04-21",
    "gist": "",
    "notes_gd": "",
    "slug": "why-most-tcp-servers-are-multi-threaded-and-how-to-build-one-from-scratch"
  },
  {
    "id": 224,
    "topic": {
      "id": 0,
      "uid": "concurrency",
      "name": "Concurrency in Depth",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT3VjDhjMb5yBsgn0wn2-fjp",
      "bgcolor": "#C7EFFF",
      "themecolor": "#2390BB",
      "course_url": null
    },
    "yt_video_id": "2PjlaUnrAMQ",
    "title": "Writing efficient and fair multi threaded programs with hands on examples",
    "description": "System Design for Experienced Engineers: https://arpitbhayani.me/masterclass\nBecome a member for exclusive in-depth videos: https://www.youtube.com/c/ArpitBhayani/join\nRedis Internals: https://arpitbhayani.me/redis\n\nWriting a multi-threaded program is easy, but writing an efficient multithreaded program is difficult. In this video, we take a look at a hands-on example to understand how to write good multi-threaded programs that are not only fast but also efficient and optimal.",
    "img": "https://i.ytimg.com/vi/2PjlaUnrAMQ/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/3o6MbbUcnt8V46x2so/giphy.gif",
    "duration": "19:26",
    "view_count": 6152,
    "like_count": 296,
    "comment_count": 29,
    "released_at": "2023-02-27",
    "gist": "Writing concurrent programs can be easy, but ensuring their correctness and optimality can be tricky, especially when dealing with multi-threaded programs. In this article, we'll discuss some best practices for writing good multi-threaded programs that are both correct and efficient.\n\n## Ensuring Correctness: Locking and Atomic Instructions\n\nWhen dealing with multi-threaded programs, it's important to ensure that the program's correctness is maintained even when multiple threads are accessing the same resources simultaneously. This is where locking and atomic instructions come into play.\n\nLocking is a technique used to synchronize access to shared resources. By using locks, we can ensure that only one thread can access a shared resource at a time, thus preventing race conditions and ensuring correctness.\n\nAtomic instructions, on the other hand, are low-level operations that are executed atomically, meaning that they are indivisible and can't be interrupted by other threads. These operations are useful when updating shared resources, as they ensure that the update is performed atomically and that no other thread can interfere with the update.\n\n## Ensuring Optimality: Fairness and Efficient Logic\n\nIn addition to ensuring correctness, it's also important to ensure that our multi-threaded programs are efficient and optimal. One way to achieve this is by ensuring fairness, which means that all threads are given an equal chance to execute and that no thread is starved and all threads complete nearly at the same time.\n\n## Counting prime numbers\n\nFor example, let's consider the problem of counting prime numbers to 200 million. We can use a sequential approach to check each number for divisibility by any of its peers. However, this approach can be slow and inefficient. By adding threads, we can speed up the process, but it's important to ensure that the workload is evenly distributed among the threads to avoid bottlenecks.\n\n### Approach 1: Threads handling a range\n\nWe can divide the workload among 10 threads, with each thread handling an equal range of numbers. But this isn't optimal.\n\nThe smaller numbers can be quickly checked for primality which means the threads handling larger numbers will take longer to complete.\n\n### Approach 2: Threads as workers\n\nLet's have a global variable called `currentNum`, which is updated atomically to keep track of the next unprocessed number.\n\nEach thread can then loop until all numbers have been processed, incrementing `currentNum` atomically to check the next unprocessed number for primality.\n\nBy using this approach, we can ensure both correctness and optimality, with all threads completing their work nearly simultaneously.\n\n## Conclusion\n\nIn summary, writing good multi-threaded programs requires careful consideration of correctness and optimality.\n\nBy using locking and atomic instructions, we can ensure correctness, while threading with fairness and efficient logic can ensure optimality. With these best practices in mind, we can write multi-threaded programs that are both correct and efficient.",
    "notes_gd": "https://drive.google.com/file/d/1inBtu78zfjMMooxUfRZsajWsUqovFTyO/view?usp=share_link",
    "slug": "writing-efficient-and-fair-multi-threaded-programs-with-hands-on-examples"
  }
]