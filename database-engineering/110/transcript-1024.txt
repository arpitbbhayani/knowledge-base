um, what are quick, short-term solutions to get your database up again- which means get your applications up once again very quickly by minimizing the downtime- and, more importantly, what should be the long term fixes that we should be doing in order to ensure that a database does not go down again for the exact same reason.
let's say, if we talk about a very simple sql database, so api server will create a sql query, will fire on the database, will get the response and send it to the load balancer on load balancer will send it to the users, right?
but if the number of users increase, we would want to horizontally scale our api servers, which means more users.
right, all of this, every request that comes to our api server will translate into at least one, at least one sql query that is going to hit your database.
so getting your database up again is your number one priority at that moment, and you have to do it as soon as possible because every minute of downtime costing you business, right?
if a lot of request comes in at that same time, it might take your database to run, or to it might take time for your database to execute, to complete the execution of the queries so like, let's say, two queries your database can handle very well.
so that's what that also could happen, that you have large number of api servers and eps servers are not able to even create new connections on your database.
so in order to now, if we jump, like basic, before we jump into short-term solutions and long-term solutions, one very key point that i would want to highlight is you need to have a very exhaustive monitoring on your database.
so that's where you need to know he, what is what, what is wrong with my database on the first place, like, what is the root cause of it, and then solve it right.
so when that happens, it means that your api servers will not be able to create new connections onto your database.
right, when api is not able to create new connections onto a database, so how, like, even though you have accepted the request from your users, it is not getting executed on your database.
so, yeah, like, your user will see 5x6, some error or worst time out, after like let's say, a minute- they would say timeout key- it could not get anything out of your database, or or this part of your response.
the first thing that you should be doing is to go and check e, which are the queries that are running on my database from a very long time.
like, even if a normal user are not able to do so, root user will be able to connect to the database to solve this exact same problem.
so through root user login to your, let's say, if you're using mysql, log into the mysql through mysql console, login to your database and then find out which queries are running from a very long time.
as soon as you kill them, a lot of short, short sql queries will come and solve like, will come and execute themselves and basically get the response and go away.
so when you know that cpu is constantly under 100, which means that even though your database can accept large number of connections but there is no cpu cycles to execute it, because it, because the wait time is very high, because there are far too many queries that have come in and you're able to handle the connections but you're not able to execute the query, so that's where your cpu is operating at 100, and few fixes for that is, first of all, killing the queries that are running for the long time.
if a query is running for a long time, and if there are such such queries that have either taken log on a database or are basically constantly hooked up and are very cpu intensive, kill them.
like check, if any recent deployment was done that led to that, led to a push of a very inefficient query, uh, which is getting executed onto a database, maybe a few joints here and there which were not needed, maybe maybe very poor indexing that might have done on your database, like you might have written a query that, or someone else might have written a query which is literally scanning the entire table every time it is executed.
and if you see a consistent usage of, let's say, your cpu was always around eighty percent and now it has hit hundred percent, where you are not able to execute it, that's where, now that, since you have seen consistent usage of cpu, that's why you decide, hey, now it's time to scale the database up right.
this is the most common reason that i have seen your database operating at 100 cpu, like if you do not have the right set of indexes on your table that you are querying.
that's where you need to monitor the, the queries that are taking a long time on your database to execute, and see if it needs indexing of some sort, and do that.
there are settings like zero, one and two, but what it says is that if you want to synchronously commit the, if you would want to synchronously flush the commit log that has made uh, uh, that was just done- onto your database, onto the disk, right?
so to handle large number of traffic you might want to evaluate: hey, should i have, like, what should be my flush request?
right now, let's say you are rendering, uh, 10 blogs like, and when you are reading 10 books, you want to fetch the details of the 10 authors of those block.
right, like you might just have one database uh in your system, but if you have seen a spike, evaluate if you would want to have read replicas for your database and move a bunch of read loads on to read replicas versus only master handling all the thing.