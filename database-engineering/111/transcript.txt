[Music] so in order to find out if your sql queries are efficient or not you would want them to process a lot of data in order to do so you'll need data right so in this video we'll be generating 5 million rows worth of random data in less than 100 seconds of processing time using just sql in the process we'll be uncovering a lot of interesting sequel tricks so let's get started what we are trying to achieve over here is we are trying to build the taxonomy of udemy uh on the udemy side when you go on the on on the top section you will see category sub categories and topics uh a category is a global topic say a software or programming of basically it's art software business and whatnot subcategory becomes uh becomes like programming languages databases etc while topic becomes your core languages like like python javascript and all so if you would want to store this kind of structure into a relational database we would need just one table to hold this up let's call the table topics it would have an id a name a parent id so this parent id would point to the same table it would have a foreign key pointing to the same table so can we so that we can maintain a parent pointer and we'll have type the type would store if it is a category or a sub category or a topic right so uh our thing that we would be working on is uh we'd be generating uh date uh we'd be generating data for 50 categories each of the category would have 100 sub categories each of the subcategory would have 1000 topics right so that's a humongous amount of data and in all it would it in all it turns out to be five million five thousand and fifty rows right and what we'll be doing is we'll be using just equal to generate this data and a very interesting thing we'll be using the worst or the most reddit part of sql which is join to do so so let's jump right into the world of sql and uh see this in action so here what we have is i have so i am using mysql8 which is connected to my sql interface and now what i'm doing is first we'll create table which is topics it would have an id which is a primary key auto incremented it would have a name which is varico 256 it has a parent id integer null and why is this nullable because a parent of a category is nothing so we would need to handle that case uh and then we'd have the fourth column which is type small end uh that says one that stores value one if it is a category stores value too if it is a sub category and three if it is a topic we define a foreign key constraint on parent id that references the same table topics and we would create an index on type right here what we are doing is we are assuming that we have yet another helping table called counters and what it has is so counter stable is a very simple one it has one column called id whose type is character what it stores is it stores value from zero zero zero to nine nine nine so it has one thousand rows it stores value zero zero zero to nine nine nine so i chose nine nine nine because the maximum fan out that we require is along the side of topics where each sub category has 1000 topics right so given this what i've done is i've just pre-populated this table from for value zero zero zero to nine nine nine okay so now what we'll do it is if i were to so we'll start with inserting categories into it so we or what we have to do is we want to insert how many we want to insert 50 categories so what i'll do it is i'll write an insert i'll say insert into uh topics oh i didn't let's let's first create a table i didn't create a table let's just create it tick tick tock we'll see output it says completed in 133 isn't good so what we'll do is we'll insert into table since id is auto incremented we won't need that we'd be giving name parent id and type so what we'll do it is what we would do over here is we would want to pipe the insert and the select statement so in insert you can either explicitly specify values that you would want to insert for each row or you can specify that insert from the select so what i'll do is insert into this topic and i'll pass a select query to this and uh what i'll do is i'll select uh i'll select id from i'll select right and select id from what id from counters limit 50 because all we want is 50 uh 50 rows right so here i'm selecting id what it would do it is this command when i do this output of this command is having just 50 rows uh from 0 0 0 to 0 4 9 right so we'll be using this to create 50 uh topics now when i would want this so what i want is i want three columns here name parent id and type so what we definitely know is that id so we are selecting id counters and 50 uh sorry we are selecting id from counters and in all 50 rows what i would do is i would wrap the select into another select and i would specify this thing so i i'm putting i'm i'm using nested select so that code becomes a little readable and so now what we have done is we have selected id 50. so this internal query so sorry this inner select would fetch 50 rows and now what we want is we want this three to be over here okay so we want name parent id and type over here right so we know that since we're inserting just categories we know that the parent id of category is null we know that type of category so the so the value of type if it is a category is one if it is a sub category then two if it is topic than three so this is hard coded null in this now what we want to do is we want to create a name so how we would do it is we would just do a simple concatenation of c a t hyphen and we'll give id that's it so now what it would do it is this particular select comma output will be so output of this of output of this particular select command is uh a material a a sort of temporary view that has 50 rows here like here the first row has a c80 hyphen zero zero zero zero zero zero comes from this this inner query where we are selecting just fifty from zero zero zero to zero four nine then the second one is null third one is one right so i'll be using this this thing to create a temporary view that is of the format that we require it to insert within topics so if i club this insert and select statement into one so the output of this select would go into this insert all right so this way we'd be generating 50 categories right so now when i execute this category in the output says 50 rows affected so now let's open this topics table and see if it is really inserted or not so it's loading it's connected to something uh yeah so now you see our topic table is populated so this id is auto incremented one name is c a type zero zero zero then we have parent ids now because though all of these are categories and type is set to one so we have inserted fifty rows into table right now comes to the next part where we want to uh where we want to insert what sub we want to insert sub categories similar to how we insert categories we'll be inserting subcategories so what we would want to do it is we would want to insert into topics name parent id and type so over here name is okay so we'll change the prefix to sub cat hyphen and id something the parent id is something that would be specific to every subcategory right so every category has 100 sub categories so we'll start by yeah so and the type will be 2 okay so now what we now what remains is we want to uh handle this id and this parent id so what we'll do it is we know that so we here over here if we do select so for every category so yeah for every category we want hundreds of categories so if i take a join without specifying where clause it literally matches every single row to every other of that other table right so if i have two table first one having three rows second one having five rows so i'd be getting a mapping of every row from this table to every other row of the other table we'll be using this thing so just to start with a very small example i'll just use this select uh i'll have what i'll do to select a star from what select star from topics or rather let's say i have counters as c1 and counters as c2 instead of doing this if i use topics as t1 and counters are c2 right so if i have this and what i select is uh p1 dot name and c2 dot id right so output of this would be it would be combining the topic name and id right so for every single topic out there for every single topic out there which is inserted right now it would map it to all the rows of counters so if i see over here uh the first column name is my topic name it has zero four nine mapping to zero zero zero four eight mapping to zero zero zero similarly and so on so forth i'll have my cat 0 0 0 here my cat 0 0 0 mapping to 0 0 0 of counter similarly for 0 4 9 it maps to 1 and the list goes and so forth right so this is basically n square so every row of this gets mapped to every other row of this we'll be using this very thing in order to generate data for subcategories because that's exactly what we want for every category we want 100 sub categories so now to do so we'll be using this very thing and what i'll be doing is select id from counters limit 100 because what we want is we want 100 sub categories for that for every category so i'll be using select id from topics uh where type equal to one right and now basically i want to have a join of this two so what i'll do it is i'll put this in bracket i'll put this other one in bracket so now this is essentially creating join of this two but we also have to give names over here so i'll say topics is name of this and counters so instead of topics let's call it categories okay because these are because since we're specified by types is one this becomes categories and this becomes counters so now what over here while selecting i can do my id of my sub category or rather my name would need to have mapping of sub categories topics this is sub category id pro topic i name it as category select from output yet another select i'll put yet another select from this like this so select categories dot id comma counters dot id okay so our categories dot id become cat catagory id and our counters.id become [Music] counter id okay so now my sub category in order to give it like a unique identification or something in the name making it explicit i would name it as a category id so i'll be converting subcat hyphen category id and i'd be capping it with so i'll be continuing with counter id okay and now i can use this category id as my parent key right so now effectively what i'll have from here is this two thing would run first of all it would take in all the categories out of it and join it with all the counters out of with all the hundred counters out of it so since we have put a limit of 10 it would take all the categories which are 50 it would take 100 counters so 50 into 100 right so it would have 5 000 rows over here and now it would do a select of it would do select from this thing and it would say categories.id as category id and counters.ids counter id and i will be using this category id and this counter id in order to do a select which in turn goes to insert so now i'll be doing a select of concatenation subcat counter id and a category id so this becomes my name of the sub category parent id becomes category id so whatever the category id comes from the join that becomes my parent id and type is to because it is subcategory and this all of this goes into insert right so if i do just this i run just this and see this in action and then we'll run this again and put it under insert so if you see over here the output is here category 5 0 0 0 0 right and then it has category id is 50 and this has two so this becomes my sub category whose category id is 50. so this is the child of 50th category or a category whose id is 50 and this type is 2 so i'll be putting and similarly this we would have close to 5 will have exactly 5000 rows for this so it creates mapping of all the categories to also it it goes to 0 over here checkout category it goes to 1 and then it again starts from 50. so for every single sub category that it has it would so for every single category it has it would create it would have an n square join from that and it would generate the value and now i'll put this in insert and when i run this thing we'll see how it does uh running the insert statement it inserted 5000 rows in 560 milliseconds that's it that's all it took for us to puff up an inside now in order to insert topics what we want to do it is similar to how we did it for uh similar to how we did it for sub categories we would do it for topics so let's say we have topics we have topic and instead of picking categories we would want to pick sub categories sub categories are the one whose id whose type is 2 and we want 1 000 from counters right so we because we want thousand values from counters so this join would create five thousand sub categories were there five thousand into one thousand is google will give you five million so this output of this join would be five million rows we'll be picking in sub category id from this and we'll be picking subcategories id as this we'll be using subcategory id and a counter id this becomes subcategory id that's it so now when i this is exactly very similar to uh how it generated subcategories right so taking joint amplifying using joins and then creating a select on top of it and just formatting it with respect to our required format for insert and the type of this would be 3 the parent of my topic is a subcategory id which comes from here and i can just run this insert and see this in action so now when this query is running it would take close to a minute for it to execute and once we have it we would see it inserting five million rows into the table right so out after after going through all of this three explicit steps where first we inserted categories then subcategories and then topics we have seen that we can amplify using just one helping table which is counters and while doing so we have populated 5 million rows using just sql so this is a very neat trick where we used insert along with select such that output of select goes into insert and we have used joins to amplify the reach because for every one item we need 100 others or 1000 others right so this is something that joins gives us so now this query is still running uh it would just take a minute or so and then once this is done we would see an output and we would open the table topics to just see on how it has actually inserted the value or not uh so just waiting for this to completely take one minute 11 second is there will take just five uh 10 or 15 more seconds but here the assumption that we played around was having a counter table having values from zero zero zero to nine nine nine right so that's the only assumption that we made so the queries execution is complete we have created five million rows affected or basically created in just one minute 22 seconds that's it that's all it took for us to insert so now if i refresh topic stable we would see that it would have all of these rows and i can just apply where clause and see that it it indeed has generated this thing so what i'll do is i'll apply type equal to two type equal to three because that's what we inserted we inserted topics we would say topics being inserted over here and say topic six four something here it is topic six four zero zero zero parent id sixty four type six uh type is three right so this is how you can generate an entire topology of categories sub categories and topics having five million rows and under 100 under 100 seconds so just to show that it indeed takes a less than 100 second let's just drop this entire table uh let instead of topping let's just truncate the table uh truncate topics and once this structure is done what i'll do it is i'll run insert statements that inserts categories sub categories and topics and here we'll see the time on how long it takes for us to put five mil to ingest five million uh rows randomly generated with this very special requirement of having a taxonomy structure in less than 100 seconds so this is still running so meanwhile what will also do it is uh we have this counter stable right we assume that we'll have counterstable with us now this counter table is actually very important uh because you can't because counter table determines how your amplification would work right so since you need maximum of thousand you need and to have thousand entries in the counter table so if you see the counter stable it has zero zero zero one zero zero minus one so how will you put all of these values or how will you put all of these things into this table so for that we use again joins to amplify a very peculiar structure of digits is uh so if you see the numbers from 0 to 999 it's basically the combination of every digit with every other digit and it's like basically three times join right so what i've done it is i've created a table digits having values like 0 1 2 3 4 up till 9 and then in order to insert values into counter all i have done is i have taken three joints so i have made joints from digits to digits to digits and my output is just concatenation of the counters so since these are digits it has just single digit value which is zero one two till nine and when i do a concat of that it gives me zero zero zero zero zero one zero zero two zero zero three zero zero nine then zero one zero zero one one and so on and so forth this way it generates nine nine nine it generates basically one thousand values and similar to other steps i've used this select to ingest data using insert and yeah that's how we generate counterstable right see uh now the entire process is completed it took one minute 23 seconds only so 16 23 is 83 yeah just 83 seconds to uh to populate five million rows with this particular taxonomy that we are looking for and for counters uh let's just see this in action quickly now before we wrap up so what i've done it is i've created a table called digits digits has value 0 to 9 as shown there let's just open yeah so digit has value 0 to 9 now what i'll do it is i'll explicitly run a select statement or select a d1 select star from digits i'll say d1 and i'll do d1 dot id okay so this would ideally print all the rows of digits table right and now if i okay these are the rows yep so now if i do join with digits d2 and i say select d1 id d1 dot id and d2 dot id what i'll effectively be getting is 100 rows from 0 0 0 1 0 2 and so on and so forth or or rather 9 0 8 0 7 zero six zero five zero two zero one zero zero zero then nine one eight one seven one six one five one so we get hundred rows out of it so now since we want to generate one thousand random value uh one thousand values so from zero zero zero to uh wait uh we let's just so here we get it in two columns right first one is d1 d2 we just run a concat over this and put d1 dot id d2 dot id within that so this way we just get output as one column where the values of the corresponding cells get get concatenated into one so we get nine zero eight zero seven zero six zero and so on so forth right similarly we'll get all the values 0 9 nine two nine three nine and nine nine right so we get one zero zero to ninety nine now if i were to pull this off for zero zero to zero zero zero to nine nine nine i'll add one more thing one more digits car join and then i'll run d3 dot id over here and once i do this what i'll get is i'll get 1000 rows it's running it's running what i'll get is i see it starts from 090190290 and so on and so forth and it will go till it will generate one thousand from zero zero zero to nine nine nine so three seven three four seven three five seven three and so on so forth right so this is how we can generate a uh random so we generate five million items in a taxonomy using just equal if we were to do this using any python script or javascript and if we do just insertion of one right at a time it might have taken us days if not hours to do that and if we would have even done it batches we would have to keep track of all the inserted ids and whatnot it was much easier for us to do this using sql and obviously the time taken for us was like literally less than two minutes right so yeah that's all i wanted to cover uh i'll basically put a link to a public gist or an article in the description you can check the script out and try it on your mysql server and let me know how that goes so basically that's it all from me for this video uh i'll see the next one thanks [Music] you