so today i want to introduce you folks in case you are aware to a very interesting class of databases called embedded databases in this video we will go through like i'll be introducing you to the world of embedded databases but more importantly we'll understand why do we need it and where can we use it i have been fortunate enough that i have got chance to use at least three embedded interfaces across my career and i could not see any other way to have scaled those systems without using it right and embedded database to be really honest it's right there on your phone not even kidding not even it's right there on your phone we are just unaware about how important these databases are so this video would serve as an introduction to that and more importantly understand if you would want to ever use it when like basically the kind of use cases for which you would pick it and how do you actually use it and what's the core idea behind it right so let's jump right into it so most common class of databases that we all are aware of is servered databases for example mysql postgres right mongodb elasticsearch one thing that ties them together is you always spin up a server right you you run a mysqld command on your local machine on a particular port so that database so the database boots up within that machine and then you connect to that machine using a certain port like a very standard way a very standard way to build system is this you have a user you have a bunch of api servers and then you have a database and all api servers connect to the database right so here if you see there is a separate instance of database which has spun up which talks over a particular port so anyone anyone who wants to talk to your database talks to a particular port and your database is directly exposed on that port right so this is a very standard way of connecting to a database right so here if you see you would have one machine beat ubuntu 1804 over 220 windows whatever machine it is within that there would be a process and that process is your database process which is listening on a port you expose this port so that everyone else can connect to it this is a standard server database which has its own place in your architecture and a lot of api servers are talking to it now comes the class of databases that i would want to talk about today embedded databases embedded databases operate operate a little differently so let's say let's say hypothetically you are running uh or you are part of a team at facebook or something which deals with user profiles right and what you do is obviously you have a profile service running somewhere and and this service obviously would run on top of an operating system let's say again ubuntu 18.05 is the operating system on which on top of which this service is running but what you are also doing is whenever you are fetching a profile from your db hypothetically let's say you are also caching that information on that api server not on a central redis cache on that api server so which means and on that api server as in maybe an in-memory hash table right and an in-memory hash map you are whatever api uh whatever profiles you are getting it from the database you are also caching it for some reason right just to like for the subsequent because if it comes to the same server it would serve it hypothetical example so here if you see your in memory hash table which is this particular kv block here it's contained within the profile service this profile service is contained within this operating system as in your server your physical ec2 machine or your order linux controller anything so this particular case like this particular kv store in which you are storing the profile that you just accessed from the db you are you are basically caching it you are putting it and it is contained within this profile service right here if someone wants to directly connect to this kv store they can't they have to go through the profile service to talk to this right and even people and even no one would understand how to talk to it because it's contained within the profile service so this database is embedded database because it is embedded within a process there is no separate process of the database which is spun up right so the database is part of the parent process so if parent process dies off your like no one will be able to talk to your database right and these databases like one really really solid case of databases is for example if uh this profile service right if i just extend this example and say that hey this profile service now would not want to store it in in-memory hash table but maybe on the disk of the server right so then anytime a profile is get from the database you would want to cache it on the local disk of that server now what's your use case you would be a given a profile id and the profile information you would want to store it onto your local storage and upon and upon getting that same request for the same id you check the local storage and get the information if it is there right so now if you would want to do this so what you would need on that local machine only you would want to do it you cannot use an external server like let's say a central cache server or something you want to keep it local only so then how do you implement it you can either have a directory on which you are creating those files one for each profile and then storing it basically you need a way to build your own key value store on your local disk storage why would you want to reinvent the wheel there is a class of database called embedded database specifically for this use case because your use case is very confined for a service right and it gives you a very nice way to put the data get the data retrieve it efficiently and what not because that's a part of basically that's the feature of that particular database right so these these sort of situations is where embedded database has proven very handy some really famous embedded databases are one of the most famous widely used massive massive massively popular is sqlite so sqlite it's there on every single on every single android phone for sure i'm not sure about ios but every single android phone has sqlite in it when you start a django server the default database it uses to create that migrations and whatnot is sqlite right so you would see a sqlite.db file created on your local machine when you start a avengers at a django server for the first time without giving any any database correction string so that that is an embedded database see that particular file is acting as an embedded uh is your embedded database right there which which what's its speciality it's it gives you a sequel like interface to talk to it right without like and like for example if you want to do a basic testing or if you want to run basic unit test automation test integration to something that can run on your local machine why would you want to spin up another server to do it because that's like spinning up another environment like speeding up another environment to do that testing and then you're destroying it versus just do it on that on the self-confined space of that embedded database so then you can like just delete the file in your entire database is gone right so and that's just confined within that one server right again embedded within that process so sqlite is something that almost every single android you would see would be using some some other feature of sql database right then there are two very famous databases of very famous key value stores uh first one is level db second one is rocks tv both are just keywords so level db was created by google and roxdb is fogged out of level db and is optimized for uh for base for uh for basically multi-threaded performance out there we will talk either one of them in depth in in basically coupling weeks and then one that i very personally like very closely used is a forked out version of berkeley db that's a k value store that gives you acid compliance locking and replication who would i imagine who would have imagined acid locking and replication on a key value store in an embedded database it's a very interesting concept that embedded databases like they solve really amazing use cases so long as you are okay com it being confined to a space right you don't need a central server but a local sort of way to get and put and basically delete data right ember databases work very nice so the core idea of any embedded databases that you would see out there on github or any popular open source thing you'd see that they solve one niche of a problem one very specific niche of a problem but really well like they nail it like anything so here one one example that i'd like to talk about is let's say you have a server right or you have a particular service and you and it's a very high right injection service you cannot wait or you you cannot make a network call to write it to a particular uh central database like mysql or mongodb or whatnot but you have to accept the right but you have to keep it persistent as well so you would basically accept the right and put it onto your local machine and then have a separate process that takes it out of the local machine and puts it into your central storage like if you have flow like this how would you store that data on the local machine there should be a way to find out most recent data there should be way to get the data query that or something that's an embedded database has come into the picture very niche use case very high right throughput you want so they that particular database would be very heavily optimized to accept as many rights as it can so long as your machine resources are not choked up and they they are fabulous in handling that some very interesting or some applications of embedded databases would be your browser on which if you are watching this video on web your browser your chrome your firefox and whatnot you would see in the dev tools you would see indexed db uh under the storage tab that indexeddb is your embedded database perfect perfect use case your browser is a self-confined thing imagine your browser does not need to connect to a remote sql server all the data all the file all the urls that you have accessed all of your browsing history all of your cached pages if any sort of information that your website needs to put in browser exposes index db so that you can use that right and that index db is a classic classic classic example of an embedded database confined within that space again imagine your browser connecting to a remote mysql server upon every request that and who would handle that database nah right so all of the browsing information the way you can quickly search in your uh browser's address bar through this is through this index database right then mobile phones android specifically sqlite very very very classic use case another use case that at scale you would say embedded database is very heavily used for is let's say if you would want to build hypothetically you'd want to build your own partitioned key value store right so here what you can do is if you want to build a wrote party should key value store where you know that hey i would have three partitions to handle for now so what you will have you will have a you will have a db proxy you will have three partitions like here you have key value store embedded databases on each of their api servers this embedded database is part of your db's process so it's like when you fire a put request the put request act the the put request actually comes to your first db proxy where you say hey i want to put this key into this database it comes to a db proxy dbproxy applies hash function on the key then it picks out a particular database let's say this one second one it goes there db api understands hey i got the put request i want to store it where would it sorry there is no central database the data would reside here within that database here within that key value store present on that local machine right so the end this is what would guarantee your persistence and basically that's what the use case is whenever the request comes in it only will go to that particular server and then obviously you would have to take care of your own fault tolerance replication of order but that's not the main point the main point is how do you fit a embedded database into a scheme of things like this i've worked on a very similar use case like this where used to have thousands of servers each server running its own copy of a small embedded databases accepting uh not really doing the rights but it was more of a read-only use case where we just copied that small embedded database and we basically uh that server was responsible to handle all the load for those specif those for those particular specific set of keys requests used to come to the server from that local embedded database is to read so no remote reads very high rate performance onto our system so that was a really amazing way to use embedded databases so energized in a gist if you would want to ever ever ever query a data right which ca which if confined which if it is okay for you that that particular database is confined within a space you can go for a empiric database rather than reinventing the wheel trying to hack your way out or from the local machine or basically from the local disk hacking your way out it's always better to use an embedded database which gives you very nice get put delete and if you're using sql it gives you a raw sequel like interface to fire advanced queries create small set of indexes on it and whatnot so anytime you find such use cases go for an embedded database that they are mind-blowing mind-blowing to be really honest like in every database is really solves for a niche so would really heavily encourage you to explore the first three of them at least sqlite level db roxy if you haven't heard of them just google it and obviously one of them is actually built by google so yeah google it that's quite quite quite quite quite quite an amazing set of databases out there right in future video we'll definitely do a deep dive into internals of a few of them and see how they actually gain this performance but it is important to understand embedded databases folks from the cs background for sure in your database in a dbms course even when i was in college like we used to have one chapter dedicated for embedded databases and we didn't understand the thinking what exactly were they right this is like okay it's part of process and all i used to get very confused unless i stepped into the industry and saw how it actually works so that's it for uh this one i hope i introduced the world of uh embedded databases to you very well so yeah if you guys like this video give this video a thumbs up if you guys like the channel give this channel a sub i post three engineering videos every week so see you next time thanks bye