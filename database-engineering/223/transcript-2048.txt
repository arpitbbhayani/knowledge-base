So, to very similar data types present in most databases be relational or non-relational that we use to store data times is data time and time stamp in this video.
I'd like to walk you through on the difference between these two data types and it would help you make a decision on which one to use when because it's very common that hey, you think, hey, let me store everything in data but in some cases data time is not good.
In other cases, you might say hey, let's just store, apoc everywhere and let's just go with time stamp on an integer that has its own disadvantages as well.
So, let's go deeper into what each of these data type does, how are they performed, which one to use when and where and why?
So, the date time, what it does is it stores not only the date part of it but the time part of it as well.
So, it stores date time as quote unquote date time.
The range of date time is pretty huge.
So, what it does is it stores the date starting from 1st January year 1000 to 31st December year 99999.
And because it stores date time, it starts from the first second.
So, it covers a massive spectrum of date time.
Then comes another type called time stamp.
In time stamp, what we do or what database does rather?
Database stores the time stamp as a pop, which means number of seconds elapsed since 1st January 1970.
It stores it as a raw integer.
So, you'd say hey, but if it is storing as an integer, why it is called as time stamp or rather why there is a separated type called time stamp?
Because it's for your database to know that hey, the value that is being stored over here, it is an epoch time stamp, which means that when you are retrieving, like if you are using on the client side, use it as a date time.
So, whatever programming language you are using, it would convert it into a date time.
Although I'm storing an integer, treat this as a date time, which would treat this as a time stamp and then convert it to date time and have some operations on top of it, whatever they want to do.
Now, the interesting part over here is because we are storing the number of seconds, elapsed since 1st January 1970 as an integer, it has a limit.
The range, the date range, what it can cover, when you store timestamp, is much lesser than date time.
You can cover a range from 1st January 1970, 0th or 0th minute, 0th second, till 19th of January 2038, 0 3141, 0 3147.
So, now here you can see that, hey, if your use case needs you to store date time, which goes beyond 2, 0th, 3, 8, you cannot use timestamp.
Then all obviously databases will come up with other data types to store and extend it.
For example, an 8 byte integer, it might store, like the timestamp might modify in later versions of databases.
But you see the drill, that hey, if your use case, if your current use case requires you to store a date time, which is far away in the future.
Let's say more than 2, 0, 3, 8, 8, here, you cannot use date, you cannot use timestamp.
Apart from this, it is very much a very common need that, hey, I don't want to just store till seconds, I want to go till microseconds level granularity.
When you are going till that level of granularity, databases, most relational databases, especially when I'm talking about, they give you an option to specify fractional seconds, which is microseconds, milliseconds and whatnot.
Now, obviously, this is not part of your native storage, which means that when we say that hey, my date time takes up five bytes to store the data, it does not count the amount of bytes required to store the fractional seconds part of it.
The idea you are being that in most common use cases, it's the seconds, the time spent in seconds is what matters and not microseconds.
Very few use cases require you to go, to go at a granular level then a second.
Now, but when you are going in that level of granularity, you need extra space to store the information.
And this is very specific to my SQL, but you get the idea like other databases would have something very similar.
So, go through that documentation to understand how they are doing it, but this is little specific to my SQL, but you would open up your mind around how date times and time stamp actually, because that concepts remain fairly similar across all databases.
So, fractional seconds take up to take up to 0 to 3 bytes, depending on the precision.
So, if let's say you don't want any, you don't want to store fractional seconds at all, so it takes up 0 bytes.
So, it would not require any space to store it.
This way, your core storage for date time is five bytes, time stamp is four bytes, but depending on how much of a precision you require on the fractional side, you can, it takes up that much of extra space, right?
So, this is my SQL specific, where the date time object takes up five bytes, while time stamp object takes up four bytes, and it sources as an integer, right?
Let's go deeper into understanding what date time actually does, how it stores and when to use it.
So, date time, typically, you would use date time when you are storing something which is use case specific.
So, the appointment time, that could be a date time.
You'd say, yeah, but that could also be a time stamp.
Yes, that can be a time stamp.
The appointment that you're booking, movie booking timings and whatnot, like something which is scheduled to execute at something, something that you are showing to the user, right?
This is a very general, it is not a hard bound that you cannot use time stamping, you can use time stamp there.
But the advantage of using date time in those cases is that your database is give you native functions to perform operations on dates.
For example, date underscore add, which adds a certain interval or a certain offset in your date column, and then you can do operations on top of it, right?
So, when you want those native features to work with date time, your database already gives you those tools.
When you would want to leverage that, it is better that you store your, you type your column as date time instead of a time stamp, or even a native integer, right?
Other thing that we saw is that date time covers a massive range from 1000 here to 99999.
Now, what this tells us is just why, because time stamp requires four bytes, but it gives you only till 2038, by just adding that one extra byte and storing it in date time gives you this massive range, much longer than what time stamp is giving you.
So, this way, when you know that you are storing a huge amount of range, or your data that you would be storing will be might cover this even 1000 here, or even beyond 2038, you have to go with date time, right?
And the best part is that date time objects, they are human readable.
So, when you fire a select query on your MySQL console or view it there, you can literally see the date time object, and you can interpret, okay, this is the date, this is the year, this is the month, you can very easily interpret it.
In case of tilesync, you cannot, because it's a system integer, this is number of seconds, you cannot do that calculation and see, oh, which date is this?
Okay, given this, when should we use time stamp?
Time stamps are stored as integers in your database.
Because it's epochs seconds, number seconds, elapses since first year in 1970, as per UTC, right?
Now, when we are talking about this, it is because as it is as per UTC, one thing to remember is, whenever we are connecting to a database, we can specify the time zone, in which we are communicating to the database.
Now, which means that whenever you pass date time in your, when you want to store it as time stamp, your database does this implicit conversion from your native time zone to UTC, before storing, and when you retrieve it, converts it into the time zone that is requested by the query and send it back.
So, it is possible that, that you might, that the value that you are seeing, changes with time, depending on what is the time zone of the connection.
So, if your application is working with multiple time zones, just be aware of this fact, that depending on the connection that is established to the database and the time zone settings of it, will affect this particular value.
Always remember this, because all the time stamp is the static unit in time, that is there, which is stored in UTC, consider this fact that, depending on which one is reading your data, which connection, what time zone is set in that, it would affect it.
Okay, but we can think of time stamps as very lightweight, very is a strong word, because it just one byte better than date time.
FII, before my SQL version 5.6.4, date time used to take up eight bytes, and not five bytes.
While time stamp used to take up four bytes, there was a 2x difference in storage.
So, in most cases, you should be tempted to go towards date time, but it's not a hardbound rule.
Okay, given that what we are storing in time stamp, is the number of seconds elapsed in a very simple format, which is integer.
What we get is what we typically use it for, is to record system time for a particular event.
For example, when you tweeted a post, created at is a time stamp.
Transition time is a time stamp.
Metric injection time is a time stamp.
Something event happening, you just want to record it.
In that case, that sort of columns fit very well in case of time stamp, because it's very efficient to store, very efficient to process, very quick to read, no extra in memory of just required to hold the data.
I scroll to data, because imagine when you're creating a date time object in any programming language, you have your month date, those attributes, and you have this class that you create.
So, your data is going to process things having time stamp much faster than what it can do with date time.
And this is what are the core differences between date time and time stamp.
So, just to give you a just use date time when you're storing something user specific, which is time zone sensitive, and time stamp when you just want to record an event.
But depending on the use case, just do a small benchmark, and see which one fits your needs.
In most cases, date time gives you this very nice convenience of, hey, it does not matter which programming language I use, it would convert it into the date time object, and I can just start using it.
With time, you might have to do a little extra, and when storing a raw integer, definitely you have to do a lot more extra.
But think of the functionality that your data is provides out of the box, and use it to build your next feature.
Thank you so much for watching.
Thanks for that.