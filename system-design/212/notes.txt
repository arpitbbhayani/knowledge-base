How Grab stores and processes millions order every day

Architecture of Order Platform of Grab Grab order platform processes millions of orders, across Food and Mast every day. Query patterns Two kinds of queries 1. Transactional - get, create, update orders 2. Analytical - Historical orders, statistics Traffic patterns spikey load and during peak peaks can are harsh. become balax r Y Design goals handle high aps (reads and crites) 9 High availability 1. Stability: some fragment going down should not affect everything degraded peg <> complete outage 2. Cost effectiveness: be cost effective & scale Consistency: strong for 3. transactional eventual for analytics

Architecture 1. separate databases for Transactional and Analytical OLTP: Online order processing. Golds data for short time single source of truth - - heavy analytical queries won't affect this DB not hold all the data may - OCAP: same data but historical & statistical processing - data stored for longer duration - specialized Pi to make analytics efficient 2. How do we keep data in sync? DynamoDB strong consistency 3 orders SUC Transactional s Analytical - 3 I Redshift BigQuery Kafka Eventual > Consistency Batc Ingestion ASYNC Distributed consumption spark, consumers

Type Transactional Queries of 3. key value queries: get, create and update an order grab chose to go with DynamoDB available 1. Scalable and Highly Consistent 2. reads by primary key 3. Internally moves the data across partitions to balance load handles hotkey problem by moving infreq ones to dedicated portion (hot can use entire capacity Schema: orders table - order-id-Partition key when order is 'ongoing - state Grab stores created at <user-id] user-id-gsi - - = user-id but when - ongoing done global secondary -> - user-id.gsi - Index user-id-gsi = NUIL the *This removes entry from 4SI, keeping the index lean and performant. to auto delete Set * TTL entry after 3 months

9. OLAP Database orders Grab uses Mysal as their OlAP for system 1. data is partitioned by created at monthly e. minimal cross partition queries 3. old partitions (26 months) are dropped YNGMODI strong & consistency 3 orders SUC Transactional saS will 7 .......... F end letter Queue D) Y 3 3 Kafka > MySQL y 99.95%. SLA Consumers *Upsent Out of order messages update only if * latest 1. update before heate 2. Update 2 came before update 1