How Dropbox efficiently serves large number of thumbnails

How Dropbox efficiently serves a large number of Thumbnails we can upload photos , videos and other media objects to Dropbox . When we the open corresponding folder cue . can see all photos arranged in a grid . Instead the actual photo of serving , Dropbox serves thumbnails of each d. smaller resolution photo To save data transfer challenge : when user is quickly scrolling through the photos how large number thumbnails can we serve of and quickly efficiently Note : We assume communication is happening over HTTP 1.1 this problem Note : HTTP 2 has different approach to solve . Other related systems : Google Photos , Instagram , Flickr and , many more

this ? Why is even a problem The answer is simple . Request Queueing Browser / Client can create at Max 6 or 8 concurrent to domain request a eg : say we have 60 photos of equal size ie time to fetch any one photo is same browser 60 requests to load 60 photos when your fires , the will be made 6 at a time request photos 1 to 6 while the other photos 7 to 12 requests would be i i. queued . Photos 55 to 60 So , how did Dropbox solve this ? Note : This is HTTP 1. I based solution [ excellent hack ] if you are on HTTP 2 , a lot of other approaches can be taken .

Batching Request Expose an endpoint (GET ) that accepts multiple image paths GET https:// photos dropbox . - com / 1-batch ? / path I timg 1. / path / timg 2. paths = png , prig . / path / tiring 3. png / path / timg 4. , png The these backend base 64 server fetches images in the , encodes it in and responds HTTP /I - I 2000k ( > content - Type text / plain : Transfer encoding chunked - : image index -0 : data : image / jpeg ; base 64 , 2 : data : image / jpeg ; base 64 , y 1. server fetch images in parallel base 64 encoded image it does not before 2. wait for all images sending response 0 s < it sends chunked response

Chunked Transfer Encoding ' ' Response header Transfer Encoding - : Chunked We use this when we do not know the length of the complete response . Core idea : server keeps on sending HTTP response complete then it and once entire request is sends the termination chunk C Null response) GET . _ _ . . Server fetches all images , s in parallel . Whenever i 3 i4 it i2 it has a few handy , to client ' ' it creates a chunk response and sends back ( encoded ) the client plugs them in upon receiving images the " Ling tag using JavaScript " src = - > . * we are kind of streaming the response from server few image at time hence Head line block a a . no of .