so a classic challenge that comes while building Instagram or Google photos is about quickly and efficiently serving and rendering a large number of thumbnails.
in this video, we take a look at an ultimate Hack That Dropbox used to very efficiently serve a large number of preview thumbnails by streaming the response from the servers using chunk transfer encoding.
so they what we typically see is we see thumbnails, and when someone Taps on it, we see the enlarged photo, right.
so if you have hundreds of photos listed there you would want to fetch- you need to fetch those explicit images from the back end, right?
your, your photo might be 2mb, 3MB, 5 MB big, but your thumbnail can be 1 KB or 2 KB big, right.
so, given that you would first want to show a large number of thumbnails and then, when user Taps on it, you see, you show them high quality picture, right.
so this is what is the very interesting challenge that comes in, because now imagine this: you are using this app, you are using Google photos, you're using Dropbox and you are constantly scrolling to go to the photo of that particular time that you are hunting and as you scroll, you would want to see every single photo's thumbnail so that you can make a decision.
okay, before we jump into the solution, before we see what Dropbox data, how Dropbox solve this particular problem.
right, and it is happening over HTTP 1.1.
so typically what happens is that any browser slash client that you are using that has a limit, that has a limit on how many maximum concurrent TCP connection that it can create to a particular domain.
so what would happen is, if you are making a lot of request, all the requests would be initiated, they would be queued, six would be picked and then when any of one of them completes, the next one would be picked from the queue.
now, let's say you are rendering, that, you got 60 image URLs, right, and you are loading it in IMG tag.
so what would happen is your browser would make 60 request, one for each IMG tag, to get the photo.
so if I assume that every uh, the time to fetch every photo or every thumbnail is exactly the same, it would happen: first six would take place, then second six would go in, then third six would go in, and so on and so forth, and finally, from 55 to 68 would be making the request and you'll be rendering the photo, right?
in HTTP 2, a lot of things have changed and a lot of other approaches can be used to solve this exact same problem, right, okay.
thumbnails are small, thumbnails are not 1mb, thumbnails are few KB bits at bags, right, so what do you do is you expose an end point whose job is to do a thumbnail batch and in which it accepts paths which are comma separated path strings to those particular thumbnails.
so, for example, if you want to load thumbnail uh one, two, three and four, you take those path and pass it through this HTTP 1.1 rest endpoint that you are requesting for thumbnails of this four photos.
right, the idea here is pretty simple.
no, you are not in some API response- you would get all image URLs, this image URLs you would use and basically pass it through this particular end point.
from this end point, the job of this endpoint is it would make a call to the server, server would get this image Parts, all of this image parts, and server would send you the actual image data in the response.
so it's actually binary data, but the encoding that you are using is base64 encoded, which means it makes it safer for us to transmit it in HTTP response level.
use it as a string if you would want to, right, and the response looks something like this: it's HTTP 1.1 200.
here you can see a number 0 and then data colon, image slash, JPEG, base64 and some bytes, which is base64 encoded string.
so the idea here is that you requested four images: image one image to image 3, image 4, right, so here what you are returning back is: you are returning back for each of that image, you are returning the base 60 for encoded part of it.
so in this one HTTP response you are sending four Images data, the actual image you are sending in a base 64 encoded form.
now this image can then be used by your client to render it at that particular place, right.
you got a batch request from your client around four paths.
it goes to the storage, gets that image data right, gets it actual image, converts it into base64, it encodes it into base64 and then sends it back in this response.
but now here you can very clearly see that if I request, let's say, 10 images in batch, I get this.
then you, your server, got the request.
you are making 10 parallel calls to S3, waiting for it to send you the response.
then you are encoding it, putting it over here and then sending it back as a response.
so if you are using HTTP 1.1, this is a, this is a massive, massive feature when you are transferring large files, right?
so to have your client understand that you would be sending response in chunks, you have to pass this response header called transfer hyphen- encoding- chunked- and the idea is the core idea behind transfer encoding chunk is like, for example, your server doesn't know how big the response is, right.
while sending the response, the server knows how many bytes it has to send.
it sends the content length header in the response itself so that your client also knows that these many bytes are coming my way.
but there are cases where your server doesn't even know how many bytes it would need to send.
the idea here is that instead of sending just one response to the client, you send response in chunks.
as and when you are getting something, you are sending it back to the client, right?
and because you have specified your transfer encoding as chunked, it means that in every response that your server is sending.
so here it's not that your client is sending the request and server is sending the response.
your client sent one request, this one request that contains all the path, right?
and now your server would be sending multiple responses to the client will say: how is it even possible?
remember, HTTP connection is based on top of TCP, right?
if no one terminated the that connection, server can send the response to the client over this, correct, which is where your client is not breaking the connection because your encoding is set to chugged.
your client would terminate the connection when it receives the termination chunk, right?
so the idea here is: your client send a get request with a lot of parts in it.
your server went to the storage to get as many images as it can and as and when it is getting image it is sending.
it is creating a chunked response out of it and sending it to the client, right?
so, for example, in the first chunk response it got like it made.
let's say you requested for four image: i1, I2, I3, I4, right, and your server, when it got this request it made fourth, it created four threads and tried to fetch four images in parallel.
it created a chunked response and sent I3 to the client.
then Server create another chunked response and send it over that exact same TCP connection to your client.
and then server got i1 and I2, so it put both of them in that one response and send it back.
one server knows that, hey, it wanted to fetch four Images.
so that's why your server would send a null response.
so it would send an HTTP response having the null byte in it, marking that your chunk transfer is now done and now you can stop sending, or now your client can terminate the connection.
so every single- uh, so basically every single language that you are using, it supports partial streaming of responses to the server, or twos, or to the client, right?
so in nodejs you do res dot send, you can invoke res dot send as many times as you want and your server would keep sending the response to the client.
similarly with golang, similarly with python using core routine, similarly with Java as well, every single server supports every single programming language supports a way to send chunk responses- right, because at the end it is just a TCP connection you can invoke send as many times as you want, but, depending on the framework that you are using, you need to see how to do partial streaming of responses right once these images are received on the client or these responses are received on the client side.
so how, how is every single response looking like?
for index 2, this is the base 60 for encoded string, right?
so when you get, when your client receives a chunk, when a client receives a partial HTTP response, other client would do it would know that hey for this Index, this is the one.
by the way, in case you don't know, in SRC tag, in SRC attribute of your IMG tag, you can pass in an HTTP URL or any URL you can pass in, or you can literally pass in this base64 data, as is this form: a data caller, image, slash, jpeg, semicolon, base64 comma, your base64 encoded image, and it would render that image as is: hey, this is, this is how you would be building this part.
if you're using apps, some minor things here there would change, but if, overall, the essence would remain the same- that you are sending requests in bulk, your server is fetching multiple images in parallel, as in when it is getting this image, it is creating this chunked response and sending it back to the client once all the images are sent.
then your server sent General request or sorry, it sends a null response.
right now, with this streaming that we just saw, what's happening is we are preventing head offline blocking, which means that even if I get request for 100 images, my server is not waiting to get response from 100 images.
if it got response from 2, it would send two to the client.
it would got response from 4, it would send four to the client, right.
this way what happens is you are not waiting for all of them to be fetched from your S3 or from your storage, and then you compile one gigantic response and then send it back to the client.
that is the power of chunked responses.
with this chunking, what is happening is, even though your server doesn't know what's what's going to be the total size of it, it does not have to buffer all the responses.
whatever it has handy, it is sending it as one HTTP responds to the client, back to back, back to back, until all the things are done, and then your server sends a nothing right, amazing, amazing, amazing.
so chunk transfer encoding is something that you can very easily try out on your local.
extremely simple, hardly take you two hours of your time to implement this, but again, urging you to implement this to get a much deeper and better understanding of this, right?
thanks [Music].
thank you.