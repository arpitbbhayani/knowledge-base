nrtSearch - Yelp s in-house Search Engine

nrt search Yelp 's search : engine on top of Lucerne Yelp is a website where To make better Yelp discovery . businesses list themselves used Elastic search , but they people engage with them for services soon built their own . . . . . and post reviews about them here's why . . . replace Elasticsearch ? Why Document based replication Document is indexed independently - on and hence every replica scaling out also requires scaling CPUs on replicas . Search < > - uneven load distribution Hot node shard distribution is managed by ES and hence can make load uneven . hence some nodes become hot Manual rebalancing required for even distribution auto scaling is challenging - load wee provision for peak . Adding new nodes or removing some requires shard migration / movement . It is expensive and non-trivial .

Elastic search and lucene built Elasticsearch Elastic search is on top of lucene luiene HTTP top lucene It is an server running on of " " Elastic search makes lucene " " simple and distributed replication , stranding , LTR , custom fields and analytics Two key features of Lucerne 1. Near - realtime segment replication has Lucerne segments immutable segment pulled WRITE by replica No need to redo the 0 > > operation on replica _ Primary Replica Ino re indexing ] Node Mode 2. Concurrent search Lucerne can search over multiple segments in parallel READ 0 > leveraging multiple cores . ^ ^ ^ parallel over segments

Implementation tune server project Because they threw out [ cash , search . , Lucerne server they needed HTTP server over lucene Lucerne GRPC and proto but Replaced REST / JSON based API with GRPC / proto but to improve serialization / deserialization performance Lucerne server GRPC Lucerne server < , Lucene Lucerne segment Replication GRPC Primary Replica gateway Clients who talk GRPC can For folks who talk REST / JSON natively speak Quick Fai lovers node fails time for takeover should be less Requirement : Wehen a , Approach 1 : - primary writes to disk to S3 - periodically uploads - other node on boot , downloads from S3

Approach 2 : Attached storage if primary instance crashes Mt search or moves to other node , * no need to download the primary EBS node volume index to the new disk , just plug the same EBS . ntrt search very fast recovery / boot when new replicas start , they can download the latest backup from and start S3 serving . Primary Replica Sync downloads latest segments from primary node WRITE SYNC 0 > < > GRPC Primary Replica ( notifies replicas about the new writes ) Apart from these Yelp. also added features that would make nrt search closer to Elastic search .

Performance improvements I. Virtual stranding , called slices search request is sent to multiple segments in parallel More allocation even of search threads on these search Thread 1 slices ( consistent work ) Search Thread 2 2. Parallel fetching of document fields 3. Segment level search timeout ( consistent SLA ) to Mt search Migration from existing 95% > ES ES ES > Apollo , Mts nrts nrts Proxy > 5% Dark launch : send send request 5% to new to both as well } Compare the results for correctness rollout with Once confident then do a phased exclusive traffic moved to nrt Search 100%