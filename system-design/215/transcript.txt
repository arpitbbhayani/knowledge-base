say you are writing a payment service and you wrote an API that transfers money from one account to another but because of a network glitch the client automatically retried the API call and this led to the reduction of money twice to handle the situation we need our apis to be item potent and in this video we take a look at what Ida potent apis are how to write them and how they form the heart and Crux of any payment service but before we move forward I'd like to talk to you about a course on system design that I've been running for over a year and a half now the course is a code based course which means I won't be rambling a solution and it will not be a monologue at all instead a small focused group of 50 to 60 Engineers will be brainstorming the systems and designing it together this way we build a very solid system and learn from each other's experiences the course is enrolled by 800 plus engineer spanning 12 codes and 12 countries ingenious from companies like Google Microsoft GitHub slack Facebook Tesla Yelp Flipkart dream11 and many many many more have taken this course and have some wonderful things to say the course is focused on Building Systems the way they are built in their real world they will be focusing heavily on building the right intuition so that you are ready to build any and every system out there we will be discussing the trade-offs of every single decision we make just like how you do in your team we cover topics ranging from Real Time text communication for slack to designing our own toilet balance inside to cricbuzz's live text commentary to doing impressions counting at scale in all we would be covering roughly 28 systems and the detailed curriculum split week by week can be found in the course page linked in the description down below so if you are looking to learn system design from the first principles you will love this course I have two offerings for you the first one is the live cohort based course and the second one is the recorded offering the Live code base course happens once every two months and will go on for eight weeks while the recorded course contains the recordings from one of the past cohorts as is if you are in a hurry and want to learn and want to binge learn system design I would recommend going you for the recorded one otherwise the Live code is where you can participate and discuss the systems and its design life with me and the entire code the decision is totally up to you the course details prerequisites testimonials can be found on the course page arpitbani.me masterclass I repeat arpitbani dot me slash masterclass and I would highly recommend you to check that out I've also put the link of this course page in the description down below and I'm looking forward to see you in my next cohort say username makes an API call to the backend and there was some issue with the network because of which the call failed in this situation we can do one of these three things first we can ignore the error and move forward the easiest of all the second we can pass the observed error to the user and then let user decide if he or she try or do whatever with it and third we can do an automatic retry on our own typically you would think that hey automatic retries gives the best user experience so let's just do that but depending on where the failure happened it would determine if we could retry or not let me give you a few examples so let's say we look at the failure timeline on where possibly the failure could have happened first let's say user a makes an API call but before this call even hit the server the the network got interrupted which means the request did not even hit the server if in case you know this you can automatically retry it's basically safe to retry it given that you know that the request didn't even hit the server second situation is when the request hit the server the server started processing it but before the process could even complete the network got terminated or basically there was a network hiccup in this case you are not sure if you should retry or not because you don't know what's server or at which stage of the server like while servers was processing at which stage did the network become unreliable now if you retry you don't know what kind of implications would it have right third case which is where the request went to the server server did its entire computation entire processing and while it was about to send the response before the response could hit the client the response or the or the network became unreliable or the network crashed in this case again your client doesn't know that the processing was done although your server did the processing now in this case again you are not sure if you should retry or not right so given the three possible places where all three possible time when the error could have occurred you would want to either retry or not retry so which means retrying or automatic retrying is subjective now how do you handle this so if I take an example like what could happen why why are we talking about this what could happen if we just do a normal retry right now if we just by default always do an automatic retry there is a chance where some critical endpoints might lead to an unintended Behavior firstly for example let's say with payment service where you have an API that transfers money from a to B's account right and in that case let's say you have a URL called slash payment slash B which any authenticated user would hit and in the payload may pass in the amount right so let's say you would want to transfer ten thousand dollars to user B now in this case if we just automatically retry every time we see a failure what could happen is if let's say we retry n times due to failure that has happened it is very much possible that we might be deducting n into ten thousand dollars from a and moving it to B it's totally unintended right so in this case we cannot just blindly retry until we know or unless we know the that server has definitely not processed it now here how do we how do we build a system that is robust enough to handle such situations that either it gives us freedom to do automatic retries or it dictates when to retry and when to not retract so in either case the answer to this is we need a way to be item potent which means no matter how many times the operation or the request goes the server will Pro will process the request exactly once so what we are looking for over here isn't exactly once semantic now that is where idempotent API is coming so the idea here is the apis that we build needs to be item potent which means that when the server sees the API for the first line it processes it if it sees called multiple times it either ignores or throws error totally depends on the use case but what we are exactly trying to do over here is we are trying to build an exactly one's semantic that if a request is made it will be processed exactly once not twice not Thrice not zero times but exactly once now gives us a problem right hey at least we have now converts to a part where we understand the problem really well and now we would want to define a solution for this in order to now here we can very clearly see that when we are getting so many requests we need to know that because we would want to process the request exactly once no matter how many times it comes we need a way to understand or to keep track or that hey have we seen this request before so you may be tempted to just do a copy paste of URL or rather keep track of all the requests that you have seen and then you see if if you have processed it before or not right now here few challenges with that that if you just do if you just keep track of URLs if you just keep track of URLs then and if the payload is different then you don't know like what to do or what not to do because you may think that you have already handled it but you would have not because payload would be different so then you would you might be tempted to keep track of the URL and the payload maybe some parameters you are passing in in HTTP header so then how do you actually compute you may be tempted to let me do hash of it and move forward so instead of making it highly complicated we keep it really simple right and how we go about that is using something called as item potency Keys instead of doing it implicitly with HTTP URL headers and whatnot let's just keep it simple and let's just create something called as item potency Keys now item potency Keys is something that would help us or help server disambiguate the request now here how the flow happens first your client before making the actual API call First talks to the server to generate a random ID this random ID will be the item potent key that it would need to pass in future request now this key might or it totally depends on the implementation but against this random ID your server might store what purpose or what API did the user want to or what operation did the user want to take for example money transfer would be one of the operations you might have other operations for which you are generating the item potent keys now this key and the purpose that you and this is something that your server would store in the backend so that the next time the request comes in the server keeps or the server can validate if it has handled this request or not now here let's say the first let's say your client wanted to transfer money from A to B account so first step we did is it talk to the server to generate a random ID right your server took the operation or generated ID store the operation against which this user created something like that meta information second you your client then then invokes the actual Epi to do the actual money transfer but while doing that it passes the random ID that was generated which is the item potent key the server then checks the ID that it got in the request and when it validates that if it has already handled it or not if it has already handled it then it ignores or throws the error depending on the implementation if not then it handles it and then it updates that hey I've already handled this particular key now this is where your server is keeping track of a state that if it has already handled this request or not so then it's responsibility of the server that once it handles it it either deletes it or marks it as done right now it is possible that while this request is being sent or being partially handled your client sees an error your client sees an error because of network glitch that happened now your client would by default retry the request it would retry the request with the same because now it only has this one one either potent key and because there was a network glitch your client your client retries the same API with the same idea potent key if it generates another idle potent key which means it is a new request so when you are retrying you would be retrying the same API again which means you'll be passing the same item potent key to the backend now when server gets this request it checks that hey have I already handled this other potent key or not if it has already handled it would throw the error ignore the request and tell Clan to not retry or if it has not done it before then it would just ask and then it would just handle it right this so beautifully solves the problem so instead of doing an implicit thing on URLs and headers and payloads or hash and compute and whatnot you keep it really simple and ask your client to tell to ask server for an idea and server keeps track of it now here this is exactly what almost all payment service out there does so stripe you go through Stripes API documentation you are required to pass an item potency key header while making the API request of transfer and this is exactly what are this is exactly how most of the payment services are built they handle item potency this exact same way and this is exactly how you are that you could pass item potency key you can also pass in with query parameters and whatnot but stripe asks you to pass a request header called adopt and Z key in which is add a potency key is faster right okay so a basic flow of Architecture is where instead of just having a user in API server and your payments DB you would have an auxiliary database a simple key value store with some TTL in which the idea is that whenever your client would want to make a critical API call it would first generate an either potency key from the server the server would generate one keep track of it in a key value store with some TTL stored let's say red is you may pick any by the way it really does not matter so the server keeps track of all of these item potency key in this database that you have it's a simple key Value Store when the operation is successful the server actually deletes it from the system this way what you get is the server will always ensure that no matter what the pro the request is processed exactly once right no matter how many times your client retries the server would do would process this request exactly once so what we just pulled is we built an exactly one semantics for our API and this is not just limited to payment CPI you can apply to any critical API that needs to be executed exactly once no matter what and you can add meta information to handle other cases if you want or just handle the validation of user and operation and whatnot but the idea is to have a separate database or a separate table to just keep track of all the item potency keys that the server has ever generated for a user for a particular operation right you may have a TTL to reduce space and optimize storage on that part right and this is how most payments services or most payments apis are built by considering item potency that's really important when you build a critical system like this right and all of this is taken from Stripes engineering block which I've Linked In the description down below I would highly recommend you to check out the stripes API documentation to understand what all apis require you to pass item potency keys and what all apis are just normal normal plane simple API that basically does not require you to pass such keys right you can very clearly see the difference of which apis are critical which apis are not right and yeah that's it from me for this one uh I hope you found it interesting I hope you found it amusing uh I know that is it for this one I'll see you in the next one thanks [Music]