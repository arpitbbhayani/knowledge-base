Designing Idempotent Payments API

Designing Idempolent APIS say user Amakes an call to the API backend and there was some issue <mammus API USER A with network and hence the call failed! what do we do? that Depending on 3 1. We ignore and more forward we are building, we 2. We pass the observed error to the user pick one ofthese ways 3. We retry on our own handle to better # user experience hence prefered Failure Timeline client knows that the requestdidn't >X API even reach the server, hence, safe to retry USER A @ Failure while server is executing client >X API cannot be sure of retrying. USER A seven completed execution butbefore usera X> API the response reach client, no failed client cannotsure of retrying.

What could go among if we always retry? say, the APIwas about transferring money from to B A I payment/<B>S amount:100003 If the API call was processed successfully, but we still retried, then the amountwill be re-deducted. for a retries, the amount deducted $10000 = n x Payments and other critical APIs needs to ensure idempotency thatwe so safely retry. Idempotent API it seeing it the 1sttime Come idea of building an idempolent APIis proceed that the server should somehow know otherwise that it has seen this request earlier. ignore know error semantics Whatwe are trying achieve to is Exactly once Disambiguating requeston the basis of simple URL is not a good idea How keep track many URLs would we of? Whatifrequestis genuine? High men consumption

The this is way to achieve Idempotence keys 1. Clientfirsttalks to the server generate to a random IP the ID may be operation specific eg. Money transfer 2. Client passes this ID along with regular payload do actual to openan it has handled it 3. Server checks the ID and validates if already already if handledit - ignore/throm error not if -> handle it 9. Ifclientsees the error, then it retries the request with same IP extracts the and then 5. Server ID, validates, -> usecase specific decides to handle it, resume, or ignore How do we pass the idempotency key? 1. 2. RequestHeader Query Parameter 3 most common stripe requires clients to pass Idempotency keys in RequestHeader "Idempotency-key"

Architecture 1. Server maintains all idempotency keys in a database 2. When operation is successful. the server deletes the key for the 3. For every request, server checks the DB key < > API 7 a user payments X DB H3 key:3 operation. User, Redis key2:I operation, user, H3 I simple KYstore with TTL) keys:9 Operation, user. tH3