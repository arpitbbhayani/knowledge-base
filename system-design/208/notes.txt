Designing Review System for Booking.com

Designing and scaling Booking .com 's Review system for 10000 RPS You book hotels can flights , , stays , tours , and much more on Booking and Reviews system is the core of the platform I. users use the reviews to make an informed decision 2. reviews are authentic user 's cannot post review without making a booking Review system is a high throughput system - Reading Reviews High availability and low essential latency is because reviews act as a booking funnel * People will not book without reading reviews Booking Review Service will be a simple REST based that exposed API to get , create , edit and delete reviews . Tragic Peak ~ 101000 rps with p 99 of 50ms I indicates ( mostly ) the cache reviews are served from or the pre materialized relational databases views on

Amount Data of 250 million reviews and each review contains I. answers to some objective questions ratings 2. on various parameters 3. textual feedback 21<13 then total data if we assume per review will be 250M 2 KB = 500GB To time under 50ms we have to shard the DB ensure response have bunch + a of replicas to protect us against network / hardware failures . Replica + availability Lone failures ' ' Availability ' * is most important - ' Master - - - . . . . . . . Stranding Replica accommodation id The reviews are stranded by in other Az so that all reviews accommodation of an are present on the same node

But , how do we route the request ? > Simplest one is the Hash based < > Reviews . > Acc _ id % # shard = i challenge > As soon as cue add / remove nodes our routing function changes requiring a massive data shuttle . the entire data re - partitioning of solution to this problem is pretty standard we use Consistent Hashing Reviews . data ownership with minimal data movement * I have a blog post where I explained and implemented Consistent Hashing arpit-bhayani.me / blogs / consistent - hashing Practicality of resizing 1- add / remove nodes that needs to be moved 2. copy the data notify Review service to start 3. consuming new ring - Routing

Architecture Consistent Hashing for Ownership MySQL > 1- Materialized views 0 < f- " 2. High cache hit ratio } Reviews . { > 0 is critical Availability ^ 3. * < > " - - : - i. : Cache Replica " " 1gameA2] " " i. Replica 1 another A2 ]