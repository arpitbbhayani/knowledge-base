Blue Green Deployments

Blue Green Deployments Blue Green Deployment is a deployment pattern that reduces the downtime by running two identical production environments called Blue and Green * at one time , only one of the environment is live 0 I } Green is live , while 0 ± ! } the Blue env is idle . Router ; API restart the During an server , in-flight requests are hampered and the server does become unresponsive . Server needs time to be fully functional → transient errors micro - downtime 5✗✗ Three key advantages we get here are - simple rollout rollback though quick expensive - easy disaster recovery -

How Blue Green Deployments are implemented ? Need of a proxy In order to do a Blue Green Deployment , we I. ensure the changes are forward and backward compatible 2. setup a parallel infrastructure [ API server fleet ) " " 3. deploy the new version to the new fleet green V 100 v10 I the 4. validate correctness of the new setup - QA , sanity , vitals 5. configure the proxy to switch 100% traffic to green 0 ± ; 0 > ± > ? Router } 6- After everything validated , remove / stop the Blue infrastructure

Pros of Blue Green Deployments having - Rollbacks are Superfast and simple back the Rolling 0 v00 to the % ; changes ◦ ! state is previous ± > } , ,, , } Router just a route change - downtime during deployments is minimized The incoming traffic is instantly flipped from to downtime Blue green setup , leaving no scope of . * No period where no request could be served - deployments are quick Just a flip of a switch , no need to wait for changes to to another happen from one server . - disaster recovery plan is super simple hours - deployments can happen in regular - we can debug why a release failed

Possible challenges of doing a Blue green Deployment the be during deployments infra cost would 2x - separe fleet of infra 0 ± ; during deployment -1 ◦ } ± > } for some more time router } - stateful applications would take a hit local cache The information stored on instances • 1 • • like cached files , artifacts , will be lost • • . When we switch from Blue to green would need to be rebuilt * Everything then cannot use BG cannot recreate if it is something we , we Database migrations time for data cost - involved copy 5 In Blue Green Deployment , the DB is not copied Hence we need to ensure forward and backward in schema alterations compatibility

- Forward and Backward compatibility for APIs Along with database migrations , we would need to ensure that the API responses across versions are compatible new attribute added in response eg : still hearts with API response app should new previous version of - handling shared services across Blue Green setup to be extra we need careful on how shared services would behave across setup takes time to have Blue Green setup - it and efforts a Blue ? when to use green Deployments wish to have downtime you no deployment - - you can tolerate a 100% instant switch to new infra / version - you can bear the cost of running 2x infra

Points to remember - have a solid automation test suite - ensure forward / backward compatibility - before switch validate the setup infra cost will shoot minimize the time - up , for which both infra are up .