what if we have a place to deploy our changes and validate them before it hits production and we have a super quick way to roll back if something goes wrong?
this is the core idea behind blue green deployment.
in this video, we take an in-depth look into this deployment pattern called blue green deployment, understand why we need them, what problem it actually addresses, learn how they are actually implemented, talk about its benefits and challenges and conclude with some points to remember when we adopt this deployment pattern.
but before we move forward, i'd want to talk to you about a code based course, or system design, that i have been running since march 2021.
for example, you would not want to copy your entire production database into your dev setup so that you have a very quality queue environment, because it would shoot up the cost.
so what we actually want is that, after all the testing dev qa is done, when i am taking it to production, i just want to deploy that one last time to just see if everything's okay.
we would have it configured as either forwarded traffic to the blue setup, which is the old setup, or the green setup, which is the new setup.
so the idea here is we create a separate fleet of instance, we deploy the new version of our code there, we validate those changes there and once we are okay, we would make that switch from old infra to new infra in one shot.
[Music] during an api or or basically whenever we do normal like why, why did we okay, apart from testing, why, like like, why else do we need this particular kind of setup?
no, because we have immediately triggered a deployment, like in- not in case of blue green, like, basically, blue green addresses this problem, but in a normal, classic rolling upgrade, if you would do, we would want to put the changes in the server and reboot it, right.
so that's where blue green deployment comes in, where we say that, hey, i'll prepare a separate fleet of instances that is warm, all ready to serve traffic.
so the key advantage- is the key advantages that we get with blue grid deployment- is that we get a simple rollout, we get very quick roll back and we get easy disaster recovery.
so, like the how we discussed in the previous video with respect to the canary deployments, here also, what we would need is: you need a proxy seating in between, which can be an api gateway or a load balancer, right?
but the idea here is, in order to implement this, what we would have is the first and foremost thing that we would have to ensure is that our database changes, if any, or our code changes, if any, they are forward and backward compatible.
we would have to ensure that that happens, then only we can go for the blue green deployment, because if the changes are not compatible and if you create a separate return, everything would be a mess.
step two is you set up your parallel infrastructure, which means that your api server fleet that you have that is serving your api request, you create a parallel setup.
now what you do is you take the new version of your code and you deploy it into the green fleet.
so green fleet is the new fleet, blue fleet is the old one, right?
once the fleet is set up, you may want to just validate the correctness of the new setup with respect, to do a, do an integration test, do a regression test, finals led test, check the core vitals of the cpu: memory and basic- uh, basic non-functional vitals are okay or not.
once we do that, we then configure our router, or our proxy that was sitting in front, to now start to transfer 100 percent of traffic from blue to green.
we just did all of our setup on the blue, on the green fleet.
now what we would do is would configure on the router: hey, now flip all the traffic, move all the traffic to green fleet.
this way, your entire traffic gets switched in a fraction of a second from blue to green, from version one zero zero to version one zero one, okay.
so now, once you're now, this is where, well up, this switch is actually your deployment, where you're switching from blue to green.
the green infrastructure that you just created is now turned blue, because that becomes the old one, right?
so that's why it's called blue green deployment, right?
so blue is the old one, green is the new one.
so here in case, if something goes wrong, let's say you move the traffic to green and something broke- your roll back is pretty simple.
hey, move all hundred percent of the traffic to blue setup, right.
plus, you would not get any downtime, because now that you have prepared your fleet, uh, and you have provisioned it for the necessary load- because, like seven servers in old, seven servers in you, you are very well provisioned for that- making a flip will not cause any issue whatsoever, right?
so now let's take a look at pros of having blue green deployment.
although grass is green on this side, but let's still look at on the overall pros that we get by using a blue green deployment.
it's just a flip, just a small configuration chain, and within a second your entire traffic would be serving from the old fleet.
so cold start problem is basically: does not, does not exist for these micro down times, right, so incoming traffic, because it is immediately flipped, no scope of downtime whatsoever in flight request can be served, and then the new request can be moved to the newer fleet- right.
you- you take your time putting your code into the newer fleet, but the actual deployment when?
deployment duration is the time when it takes, like the time it takes for you to serve 100 of traffic from the new version of the code.
now what you would do is because you, it's expensive, but if you constantly have a blue setup running, then recovering from this disaster is a piece of cake, because if a major outage happened on the new deployment, it happened.
you can just make a flip to the blue setup, like the old setup, so your disaster is recovered.
so blue greens plus, even if you don't have that setup running, like the best cases, you have that blue setup already running and you are just flipping the traffic.
but even if, in case, you don't have that because you have adopted blue green deployment, you would have those necessary scripts and automations to take your old artifact and create a fleet out of it.
so your disaster recovery plan looks like a normal deployment and would happen very quickly, as we just saw right.
this is a big advantage for a developer productivity because now, because you are creating a totally parallel infrastructure, whenever you are deploying the changes to this new fleet, the old traffic is not getting affected.
so, so long as our infrastructure can take the load upon a 100 traffic flip, you can do deployments during day hours, like during, even during peak business time, right, although you are incurring a little extra cost of 2x or infrastructure, but that is okay if you would want to guarantee all of this.
what you would have is you are deploying a changes into the new fleet that you created, let's say green fleet, due to any reason it failed.
so let's say you did the deployment, you put it into the green, onto the green traffic, and then after some time things started crashing because your infrastructure is there.
let's check out the possible challenges, not really disadvantages, but basically some set of possible challenges that we would have to face when we adopt a blue green deployment.
we literally have to have two parallel setup of our infrastructure, a blue and a green, the old and the new.
so you are literally doubling your infrastructure cost by doing this, at least, if not at least during your deployment time, right?
so you first set up, validate, then you make a switch, then you wait for some time- at least for that duration you would be paying 2x of your infrastructure cost.
if you are not, then blue green deployment is not for you, right then?
if you are not, then blue green deployment is not for you, right then?
the second challenge that comes in with blue green deployment is what if your application is stateful?
if you are okay, then go for blue green, otherwise you don't have to.
the first question is: in a blue green deployment, because we are having a separate production fleet, does this mean that we also clone the database and put it one copy in blue and one copy in green?
plus, when a write comes in the old setup, how would like, for example, you have only been blue- one db in green.
when the right happens onto the blue, how would the green get that?
the database is common across blue and green, so that we don't run into this issue.
uh, like, for example, you, hypothetically, let's say, you change the type of a column from a string to an integer, right from a string to an integer, and when you did this, uh, the old setup or the old apis, our expected string, the new setup, expected integer.
now when you do the deployment, your old setup would start to fail, like if you ever roll back on the new setup would have.
like everything should happen as soon as possible, otherwise you are seeing downtime there, like, even though we say that blue green development does not have a downtime, but in this case, whenever you have a stateful database, that would become a problem.
so we need to always ensure that the changes we make on to our database schema, they are always backward or forward compatible.
the next one: handling shared services across blue green setup is a pain, so we need to be extra careful on how shared services would behave like, for example, authentication service across blue and green.
and final point, a micro point, is that it takes time and efforts to have a blue green setup.
it takes times to- uh, it takes time to have a barrel setup for a blue green deployment.
okay, so now i went to use blue green deployment.
this is a critical point because what if, like when you, when you make a switch from blue to green, literally hundred percent of traffic will be coming to your green fleet.
so you should be able to bear the cost of running towards of infrastructure, at least during the time of the deployment, and then you can go for a blue grid setup.
first of all, you need to have a very solid automation test suite, because you saw that when, like the way we were setting it up, you were setting it up a green fleet.
third, before we switch, we have to have to have to validate the setup, because otherwise, without validating the setup, if you are directly triggering the deployment from blue to green, you might see a downtime, because that's what we tried to reduce it in the first place.
if you can minimize, like minimizer time would be few hours, or rather one hour before the actual deployment happens, to do setup and validation, and all during the deployment you make the switch.
those are the four points to remember whenever you are adopting a blue green deployment.