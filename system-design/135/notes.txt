Introduction to Serverless Computing

Serverless Computing Traditional way of computing " , < > Server mrm API 's are hosted on a server > that is continuously running expecting a continuous traction 4GB RAM 2- core machine eg : a to handle 1000 RPS running But what if your traffic pattern , is like this 1000 RPS ^ ← Instead of continuous your request pattern is busty . need to be to But you prepared handle the peak . Your to handle infra is provisioned the but provisioned peak of 1000 RPS is over serverless computing for 99% of the times So there , what if is some Infrastructure as a service , that ↳ scales traffic up and down as per ↳ is billed per execution ↳ is self maintained - and fault - tolerant

Serverless does NOT mean that server to execute the code is not required It solely means . . . not and scaling the server you are managing with server less are billed per ^ ← 1000 RPS you request ( execution ) and hence you can handle the desired scale with seamlessly zero to no worry . With server less computing , engineers can solely focus on their Core Problem All cloud have server less major providers one opening AWS : lambda Functions Gcp : Google cloud functions cloud flare : cloud flare workers Azure : Azure Server less Functions

Real world applications of serverless I. Chatbot Internal chatbot to respond to requests / The requests to > holidays coming an internal chatbot is very burslty , so a server less arch is ideal this use case for ¥ < > > / holidays < > Serverless < > Database slack 2. Online Judge - time bound Triggering automatic code evaluation upon - short lived a user submission is best done server less bursting traffic - > 0 > serverless < Database Evaluator ^ < > API status check

Machines 3. Vending machine invoke Upon purchase vending can a server less function to update the inventory . Because traffic is very fluctuating , using server less here saves bunch a on money . < > < > serverless < > ⑦ , Database update inventory 4. Scheduled DB backup database backup day at 4pm Trigger a every G < > Triggering a DB backup is just an Serverless API call because DB is managed Database schedule work 5. Batch / Stream processing Trigger a server less function as soon as a Msg comes in your broker . event consumption reactive * Making No need to run consumers continuously

Advantages of serverless computing and maintenance 1 . No server management servers are managed by the vendors ( AWS GCP ele ) and engineers need not , , worry . control So no DevOps , access , security patches . ele 2. Pay-as-you-go Pricing Charged only for what you use . So ideal for I 100ms ¢ per bushy tragic where you do not need to constantly of execution keep your server running 2 pay full price 3. No Capacity Planning Provisioning is on - demand . precise and realtime . So , engineers do not need to plan capacity for the incoming traffic Upon the burst , the function will automatically scale horizontally . Traditional arch overwhelms when it sees a surge of requests

No Silver Disadvantages of server less Computing Bullet 1. Cold Start Problem time nexec cold start Because the function is not constantly running , the ← • " 1-h__ container to boot 1st invocation may need up upon and hence time to serve the 1ˢᵗ request might be high ↑ ¥ unnecessarily very • > Function slept 2. Not built for long running - processes Server less execution has a time limit ( say 15min ) which means you cannot deploy a logic that requires > 15 mins for its execution server less eg : Huge map - reduce job is not for a traditional server is a better choice 3. Testing and debugging is tough logging is not straightforward , no visibility to • ' server to check whats happening 4. Vendor lock in- vendor to another Hard to move from one

So when should NOT server less ? , you use 1. load is almost constant and predictable 2. long running process and execution 3. You need multi - tenancy 4- You want to use server less , just because it is cool . ? So when should you use server less , Quick build test and 1. , prototype , deploy 2. Use case is small and lightweight Peak to 0 alternates 3. traffic is barsky . . _ .