it supports operation like Get, Set, partial updates, delete and expiration right.
so let's say we are building a food delivery app, for example, something like swiggy zomato or deliveroo, right.
and to store this information in, let's say, dynamodb, what you need is you need a partition key, right.
now, if you would want to register that if a user, if a user, favorited a particular restaurant or not, you would have a partition key that is combination of your restaurant ID and user ID, right?
you don't need a sort key for this particular use case, right?
and you'd have additional attributes like created at and user ID, so that you can query on it and see if this user has marked a particular restaurant favorite or not.
so if this key exists, which means that user like this destroy is marked as favorite by a particular user.
so this schema that we just created works very well for our pointed queries, for example, that if I want to get if user U has restaurant R in its favorite or not, it's just a simple get.
extremely simple order one right now: marking a favorite, rest or unmarking are just pointed operations of your mark If you mark As favorite or unmarked, so it just pointed get or pointed create or basically pointed delete.
let's say, on the application, we would want to render a list of restaurants that is ordered by the restaurants which are most favorite, which is favorited by most users.
so, for example, if one of the restaurant received 1000 favorites and other restaurant received 200, 300, 500, so I want this list to be ordered by the, the first restaurant should be the one that is most favorite by most users and then in descending order after that, right now, if you want to design this, because dynamodb does not support aggregation, so we have to build our aggregation.
that API call is typically making pointed queries on this, your, your database, your dynamodb table, in which you are storing all the favorites that we just saw the schema for right now.
so we would want to show that this restaurant, a particular restaurant, are received n favorites.
this event is sent to a stream and this stream is something like bin log or change log that we have heard of, right?
now, from this stream, we can invoke a Lambda function, entire serverless architecture, right?
so all the events that happened on the table get streamed to the stream and it's consumed by this particular Lambda.
so every time an event comes in, this Lambda function gets invoked, right, and so on.
this Lambda function will do this aggregation part, right.
so, for example, for it might have, it might make an update in some table, some dynamodb table, in which you would have a restore ID and the total number of favorites that it received, right?
from dynamodb the events are configured and sent to the animated we stream from which you write a language function to consume those events, right?
so let's say, we create a new table and this table would be storing the aggregated favorites count.
so, for example, if I have, what I'd have is I'd want to store for each restaurant for a particular time window, what is my total but what is my favorite count, right?
so restaurant ID becomes my partition key, time window becomes my sort key, right?
for example, all time, one entry for all time, one entry for a particular month and one entry for a particular day, if you want to do that right, so this would be our partition key.
other thing, like your time window, would be the sort key, and then you would have a favorite count and updated that right, and whatever aggregation or or what would your aggregator function would do, is every time you receive a batch right.
so from dynamodb, your Lambda function would receive a batch of events.
this is not an atomic operation because there would be multiple concurrently executing Lambda functions trying to act on that same restaurant object.
if, let's say, multiple people marking the same restaurant as favorite or not, it might lead you to it might lead to invoking of concurrent Lambda functions acting on that same object.
so instead of using this we- because we have to automatically update it- instead of uh invoking set, we would be using add, Addis and operation in dynamodb that is atomic in nature and would do increment or decrement using it right.
now, when you are updating in the table, do use a dynamodb transaction to do that right, so that it ensures that in case there is a failure, your data does not pick up like, does not go in an inconsistent state.
so dynamodb offers your transactions and you can use that to write to do batch updates of 100 rights at a time.
like every time an update is happening, every time an event is there, and like we have to pick this up and Lambda function needs to be invoked.
imagine, on your app, on your food delivery app, How likely are you to Mark a restaurant as your favorite?
it is extremely cost efficient for a given user Behavior, right it.
you have to use it for use case where it makes sense here: marking some restaurants favorite and removing it from if it is not very common right, it will be an obscure event.
you just saw how we write our API server rights like: creates an interior, removes an entry from the dynamodb, but our dynamodu stream is unaffected.
you might think, hey, instead of me adding this serverless layer or to that and like, let me just do a daily full set and what?
so, in case you are fine, you find yourself using dynamodb and you want this kind of aggregation, do a basic capacity planning and see if you need constantly running servers or you can go via serverless right, using dynamodb streams and Lambda functions, right, I hope.