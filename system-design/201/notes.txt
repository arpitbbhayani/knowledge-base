Realtime Data Aggregation with DynamoDB

Realtime Data Aggregation with Dynamo DB what is Dynamo DB ? El low KY store [, Dynamo DB is - latency opened by AWS . El Operations it supports are GET . SET . PARTIAL UPDATE , DEL . TTL Deliver 00 Data Model Deliver 00 does food delivery and it is quite popular in Europe . 1. Restaurant owners list their restaurants 2. Users can browse through them . pick their favourite . and order ' also mark restaurants ' Users can some as FAVOURITE favourites table restaurant id Partition _ _ user _ id : key ' ' This restaurant favourite of this user } created at other attributes - user _ id

Getting if ' ' ' 1. a user U' has restaurant r in favourite is just a simple GET ( KY lookup ) 2. Marking a favourite or un marking are pointed operations Thus 0111 time we see , all user operations happen in Feature request : show list of restaurants ordered by FAV counts " " Hence we would need to aggregate favourites and keep the favourite count handy at a restaurant level . 0 stream I Dynamo DB 0 } API server > > Favourites DDB " . N Favourite Agg Core Idea : Consume all the updates Favourites table and Lambda Fund happening in them in different table aggregate a

Aggregated Favourites restaurant A _ id : partition key All TIME _ 729 A AUG 2022 42 time - window : sort key B ALL TIME 10072 20220801 - All TIME _ , AUG 2022 , favourite _ count updated - at Aggregator function would batch updates happening Favourites table receive a of in - INSERT and REMOVE events - filter increment decrement the count atomically or per restaurant - , instead use ADD of SET use DDB transactions to batch update 100 writes Isn't ? "" tree ent action at ace Lambda costly " " oof } # > ~ Fav per day < $1 per month Each execution ~ 25ms Mem consumption 64m13

Advantages behaviour - extremely cost efficient forgiven user - APIs response time unaffected because A- SYNC better than traditional approaches - table ( not realtime ) daily full scan - to Aggregated synchronous update Favourite table - ( APIs would become slower )