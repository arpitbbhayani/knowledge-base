right, we'll start with what is system design, then we'll take a look at the two approaches and then i'll share the three key pointers that you should remember while you're designing any system out there.
right, every single problem statement comes with a brainstorming session where we all together brainstorm and evolve our system.
indians, like we'll build that intuition on, if you were to ever design your storage agent, how would you do that right?
seven is about building uh ir systems, basically information retrieval systems, and add-on designs, where we design our own message brokers like sqs, where we design distributed task scheduler.
right, i have also attached a video verbatim, as is from my first code where we designed and scaled instagram notifications.
when, hey, let's say, your customer says i need a live class solution, hey, i need real time interaction, hey, i need to upload my data into a particular location, right.
then your product manager or your business uh team sends a requirement to the product- even product team designs that part- and then it comes to you, right, and that's what translates into that system.
or it could be an actual physical hardware that you are shipping, where you were given a product requirement and the only thing that you could do is actually ship that hardware, that embedded system, to your users or to your customers.
right now, when someone says, design a system, it could be one or all of these three things: first, a high level architecture diagram where you get to see a macro bird's eye view of that system, where your design, we are supposed to design a macro bird's eye view of that system, where, hey, these would be the micro services that talk to each other, and then you are, and then, and then this is how the interaction would happen, this, how this, basically, this is how the persistence would happen, and all on a high level architecture side.
right, then it could also be a logical design in which they ask you to do like you are required to do: business logic algorithms, core data structures, right, core storage techniques that you would be using, core persistent algorithms, that you would be using that part.
if you are in the interview, then i would highly encourage you to limit the scope of your discussion and pick one and then solve it really nicely right now, talking about how to approach system design, the two approaches that i've used in my career, the first one is what i call a spiral approach.
the spiral approach is where you decide the core of your system design and then you start building around it.
right now, for example, you start with storage.
and then you evolve to the next part where, hey, you said, now i have this service, now i need another service, right, for example, this is the first step that you started with a simple database.
that's a key thing- when you are experienced enough, or when you know the problem statement is simple enough that that the decision that you are making is very crisp, is very optimal and this is exactly how it should be done.
you are very confident on that spiral way of designing systems works the best, right?
these is how i represented this is through non-concentric circles, because you know, you started here, then you added, then you added some part to add more skills, but then you added some more, and then this oval which is, which is very obscured in its stay, in its shape, because you thought your system is evolving in a certain direction, but because of change, because of scale, it evolved into some other.
for example, you started with a single user, a single api server and a single database.
hey, this system was working fine, but now, when i got even more users, my system started to choke up.
so tackling one scale or one level at a time is how you go for an incremental mvp approach where incrementally, you are trying to evolve your system to just be able to sustain the next scale right.
and this is how these are two very similar yet yet different approaches of system design that i would highly encourage you to pick your problem with like.
for example, if you know the the solution very well, go for a spiral based approach.
if you don't know the solution, variable, start with the day 0 architecture and then scale individual component out right, and then break it into other services and all right.
so key pointers to think about when you are approaching a system design is, first of all, every single system out there is infinitely buildable.
you have to restrict the scope, right, that in the stipulated time of, let's say, while you are at work, you know that this is what, like, you have two weeks to actually implement it.
hey, restrain the scope so that you design that one thing really well, right?
second key pointer is: see clarifications from your seniors or your interviewer, right, because every single system design problem is actually ambiguous.
ask us critical questions that challenge design decisions.
ask those critical questions that actually challenges your design decision.
then suddenly your entire architecture changes like: why do, why does this need to be real time?
in incremental based approach, what we did is we took a day zero solution and then we we basically operated at a very small level and then we increased the scale to handle it to the next level, and then the next level and the next level.
so this is very important: whenever you are approaching any system design, try to break it into manageable sub problems and solve each of those problem very optimally.
this is something that i personally used throughout my career and, and even today, when someone gives me a system to design, this is exactly how i approach, right?