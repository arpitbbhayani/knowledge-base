so search is one of the most used features in any e-commerce and to give a better user experience it is almost customary to provide type by head search suggestions in this video we will talk about how Flipkart made that type ahead search hyper personalized and dive deep into their high level architecture and key design decisions that makes it extra special but before we move forward I'd like to talk to you about a question system design that I've been running for over a year and a half now the course is a cohort based course which means I won't be rambling a solution and it will not be a monologue at all instead a small focused group of 50 to 60 Engineers will be brainstorming the systems and designing it together this way we build a very solid system and learn from each other's experiences the course is enrolled by 800 plus ingenious spanning 12 codes and 12 countries Engineers from companies like Google Microsoft GitHub slack Facebook Tesla Yelp Flipkart dream11 and many many more have taken this course and have some wonderful things to say the course is focused on Building Systems the way they are are built in the real world we will be focusing heavily on building the right intuition so that you are ready to build any and every system out there we will be discussing the trade-offs of every single decision we make just like how you do in your team we cover topics ranging from real-time text communication for slack to designing our own toilet balancer to cricbuzz's live text commentary to doing impressions counting at scale in all we would be covering roughly 28 systems and the detailed curriculum split week by week can be found in the course page linked in the description down below so if you are looking to learn system design from the first principles you will love this course I have two offerings for you the first one is the live cohort based course and the second one is the recorded offering the Live code base course happens once every two months and will go on for eight weeks while the recorded course contains the recordings from one of the past cohorts as is if you are in a hurry and want to learn and want to binge learn system design I would recommend going you for the recorded one otherwise the Live code is where you can participate and discuss the systems and its design life with me and the entire cohort the decision is totally up to you the course details prerequisites testimonials can be found on the course page arpitbani dot me slash masterclass I repeat rpbani dot me slash masterclass and I would highly recommend you to check that out I've also put the link of this course page in the description down below and I'm looking forward to see you in my next cohort so when a user is typing a query we have to suggest some Search terms because this gives user a better experience because now user does not have to think twice on what needs to be typed what's the spilling of it so it just reduces the friction so this makes life very simple for them it makes them very easily or rather very quickly hunt for the products that they desire now the problem is how can we make this type of headset suggestions hyper personalized so for example if your past history suggests that you have bought a lot of shoes and if you type sh like your shoes should come at the top and if you have purchased let's say always purchase Shoes less than 2000 then shoes under 2000 should be the hyper personalized search suggestion that it should give so in this one we'll dive deep into their architecture so personalized suggestions so here the idea is that for a given word now this word can be an incomplete word for example s H we would have a lot of candidate matches for example the words that start with SH the words in which the substring is sh or a phrase is in which a word starts with SH can also be your candidate now given all of them pick the top five top ten that is hyper personalized for the user who is making that search now this is what is the problem statement right so now when we are thrown at this problem statement or rather when Flipkart was trying to solve this particular problem statement the first thing that they thought is hey what are the parameters to rank it because this entire problem statement boils down to how we are defining or how we are defining the ranking function because we might have thousands of terms that matches sh but out of which picking the top five that suits the user the best is what we want so the parameters for ranking the first parameter for ranking would be the quality of the suggestion so for example should you even be considering some uh search phrases that are not at all popular for example if a search phrase is not at all popular why should you even consider it in your search suggestions even if it is hyper personally so you might want to have a threshold that a search term should have been searched for at least n times then only I would be considering for it because this means that it's a high quality search or it's a high quality search term second is performance which means that does this search term when click because if you are recommending a search term the user is very likely to tap on it which means that if a person Taps on it there has to be enough items in the search result otherwise the performance is not good which means the user is tapping on it and let's say you say no results found it's a very poor user experience so that should be your the another factor that you would be considering when you're thinking that hey I want to surface quality result the third one is the grammar quality it would look very bad if a company like Flipkart surfaces grammatically incorrect uh like basically grammatically incorrect suggestions so there should not be any spelling mistake any grammatical mistake anything so it needs to be very clear this three parameters would Define a good quality search suggestion first thing second is prefix like should you only consider let's say person typed in sh should you only be considering the terms that starts with SH or sh can also be a prefix or s message can be a word within the phrase that starts with SH something like that right so it totally depends on how you would want to tune it and the third one is this is where the user personalization comes in that hey given that I know which user is firing the query I would know the past action that the user has taken for example if a user has made last three searches of shoes the next search is very likely to be of shoes category right similarly if I know that historically user has purchased a particular item having a particular property let's say user has always purchased items which are under 2000 rupees this makes it very simple for us to have that filter in the search query where you would in the suggestion itself you would show shoes under 2000 for example right so this is where your personalization comes in so this is where we would be putting our focus on okay so now one very naive way to build this if I'm talking about non-personalized way is to get all possible Search terms that user fired on your platform let's on flip cut everything that the user fired and you just rank them by popularity or by frequency and you show them and you just order it by them right that's the easiest way to build it but does that make sense no it's not the next level engineering that we are talking about so that is where just imagine if three different types of users come in and all of them search for sh and the first user sees sport shoes and on the second it's he or she sees shirts well the second user sees a casual shoes because that user has a history of purchasing a lot of casual shoes and formal shirts while the third user sees shirts under 2000 as its first suggestion well the second one is sneakers right so depending on which user is searching what if this search suggestions can become hyper personalized this is the problem statement that Flipkart tackled so now let's dive deep into the solutioning part of it so first of all a nice way to think about this is hey let me just create cohorts of user let me just create groups like let me just create small groups of people having similar purchases to a similar interest and then to all of them let me show the same set of suggestions that's a nice way of thinking it because what that would mean is that even if like there would be a chance where a user would be misclassified into a particular code very high chance right so you would not want to do that let's because every user search journey is going to be unique the needs are going to be unique or the context is going to be extremely recent which means that user has made last five searches belonging to a particular type of thing then the next one is highly likely to be belonging to the same category so given that you cannot create code so there has to be a better way so that is where the first thing that we have to do is to understand the user intent that hey if user search for something what does that user actually mean so this is where every e-commerce including Flipkart has their product catalog has their taxonomy so on Flipkart or on any e-commerce website you see top level categories let's say fashion electronics and whatnot and within fashion when you go you would see clothing footwear jewelry this is the taxonomy that I am talking about now depending on the search term every search term that user is firing could belong or rather could come would belong to one of these categories given that it would belong to one of these categories we can leverage this information to create that context so that the next time the request comes in for search suggestions we are able to use this or leverage this particular taxonomy to suggest the right item to the user so the ideas in this taxonomy closer the entries in the tree for example shoes and sandals are close to each other because they share the exact same parent called Footwear so which means shoes and sandals are very similar to each other now if my query is classified to shoes and sandals like one query classified to shoe second query classified to sandal which means the entire context remains around Footwear so the next query or the next search query that is coming in very likely it would be a footwear based query right second is where your past searches browsing history purchase history can be clubbed and mapped onto this exact same taxonomy and you can group them and then use some sort of AI ml not really AI but basically machine learning model to do Predictive Analytics and see hey what suits the best right so map the input that you are getting the input query that you are getting onto this taxonomy you would have mapped all of the past history browsing history previous searches to this taxonomy this would become the core and the Crux of making a better personalized uh or rather hyper personalized uh query suggestion right so this is the first step understanding the user intent then so for every query so for example if I'm firing a bunch of queries then for my for the current query that I am grabbing the suggestion we should take a look at last n queries now n could be 3 5 10 15. it is highly configurable but typically within a session you might want to take it so for each query that the user has fired you would see which category it belonged to right and how would you know that by because user would click on something and then click on a product you would grab those metrics and see user clicked on this product so this query belongs to this particular category so you would see the category so if last n queries belong to the same category so the current query highly likely will belong to the exact same category again right so this is where we evaluate two things first is we evaluate the category similarity which means that a probability that the current query that the user is firing is similar in category to T minus X for example if I am searching for computer monitor and then if I'm typing c o very high chances that I'm looking for computer mouse because that starts with a C right so because they should belong to the same category second is evaluating reformulation which means that for example if user is reformulating the query which is typically what we do for example we are looking for shoes we saw a bunch of options we didn't like it let's say we have a very specific I have a red shoe but then I like the bunch of Nike things so I striped Nike under 2000 but then what happened is I typed a so my first query was choose second query was red shoes third query was Nike under 2000 so then if my fourth query starts with an A there's a very high chance that I'm looking for an Adidas shoe so this is our Ray formulation this is about reformulating the query step by step because that's how you typically browse so leveraging this you build a predictive model that tells okay hey what are the chances if a person is typing this you would want to build a predictive model that it belongs to this particular category it's a very simple model very simple linear model would work just fine over here then comes the part of personalizing the search now that we have the data we have mapped it now we understand what we would want to leverage now if we think about personalizing the suggestions so this is where what we use it's the idea is pretty simple the model that you will be building this model needs to be built on how user interacted with your system so for example if you showed user 10 suggestions and user didn't click on any of them that's a negative feedback for you if user clicked on one of them but didn't click on any like the other obviously user would not click on any line so which means that that un like the one that the user clicked on gets a higher score while it gets a negative score for the other nine items this way you would want to rank it you would want to start ranking and assigning score to each of the suggestion that you are giving and that's how your model would need to learn over and over and over and over again a great way to do this is via simple decision tree but one decision tree would not work that is why you would want a group of decision trees to answer that is where you can use something like an XG boost XG boost would work just fine and Flipkart actually uses XG boost with 100 with 100 plus threes in their production environment to do this to do this analysis I right so if you're unaware in case you are unaware about XJ boost and decision trees you are just a Google search of it just a Google search a way to diving deep into what it does how do you train it and how do you fire it now we'll talk about how all of this fits into a big scheme of thing through this high level architecture so here the idea is very simple when your user when your end customer fires a query that hey I am the user typed in sh now the query or the request the API request would come to our Auto suggest service now Auto suggest service would make two calls first is for example you Auto suggest sir uh sorry auto suggest service would first check hey is there a scope of personalization or not if there is a scope of if there is no scope of personalization it can go to a cache because non-personalized queries would serve the exact same result so if you cannot personalize the output to a particular user you would want to serve it from the cache because that would not change for anyone because it is not personalized at all it's just globally popular things done if it is suggestions based that is very last that is what Flipkart uses solar solar is a search engine through which they power this part but in solar you take hey how would TF IDF work no so they use LTR ranking so LTR is basically learning to rank in which you can inject machine learning more models on top of solar elasticsearch slash Lucian it's a standard out there now so LTR model you can or rather LTR learning sorry LTR ranking is what you can use and then you would want to you would have to provide your machine learning model to that so which means that solar uh as in your search engine because the query would be firewire given this prefix match all of them this would be firing on solar because it's very efficient to do so right now how would your search engine rank it the way it would rank It Is by using a machine learning model but how to use a machine learning model with solar you you want to change your ranking function from TF IDF to LTR right but now first of all with this solar how would it get the machine learning model so that is where every search in like solar elastic search if I talk about they you can like with LTR ranking model you can provide a Json in an HTTP request you can provide the model Json and solar would be storing that model would be using it while ranking so for example as we discussed we would be using xgboost uh we'll be using basically XZ boost algorithm to do this so now XG boost model would be learning let's say every day using your events and data platform to get that event that which item was clicked or which search is recommendation or sorry which source suggestion was clicked which was not clicked and it would build the model the model would be Trend explicitly then once once the training is done this model would be exported in a Json this Json would be then ingested in solar and then solar would know okay hey now my racking strategy is l2r this is the model that I'd be using so solar will then use this thing like the Json that you provided and this is not for every request you're providing you'd just be ingesting this entire model solar bit keep it with itself and it would use it for ranking now how would solar get the search suggestions there would be gigantic big data pipelines around all the search queries that has fired on the system you would want to do that that particular grammatical check quality check popularity check and then then you would want to ingest it into solar this is how your data would flow into solar via Big Data pipelines right and this is how your entire thing would be powered right so Auto suggestion feature would have a cache a solar a big data pipeline a machine learning model training and explicit server to do that that would consume the data the data from your event slash data platform maybe through a data warehouse or something once the training is done the Json the model would be exported as in Json inserted into solar so that it can use it for ranking right so the idea is pretty simple if someone searches for red shoe and then searches for Nike shoes and then types A you would want to so Show Adidas shoes and not Apple laptops because context matters and this is how Flipkart made their search suggestions hyper personalized and that is it that is it for this one I hope you found it amusing in case you did give this video a massive thumbs up right so yeah that is it for this one if you guys like this video give this video a thumbs up if you guys like the channel give this channel a sub I post three in-depth engineering videos every week and I'll see the next one thanks [Music] thank you