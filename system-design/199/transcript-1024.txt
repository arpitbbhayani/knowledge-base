so when a user is typing a query, we have to suggest some Search terms, because this gives user a better experience, because now user does not have to think twice on what needs to be typed, what's the spilling of it.
so, for example, if your past history suggests that you have bought a lot of shoes and if you type sh, like your shoes should come at the top, and if you have purchased- let's say, always purchase- Shoes less than 2000, then shoes under 2000 should be the hyper personalized search suggestion that it should give.
because this entire problem statement boils down to how we are defining, or how we are defining, the ranking function, because we might have thousands of terms that matches sh, but out of which, picking the top five that suits the user, the best is what we want.
for example, if a search phrase is not at all popular, why should you even consider it in your search suggestions, even if it is hyper personally?
because if you are recommending a search term, the user is very likely to tap on it, which means that if a person Taps on it, there has to be enough items in the search result.
second is prefix like: should you only consider, let's say, person typed in sh?
for example, if a user has made last three searches of shoes, the next search is very likely to be of shoes category, right?
similarly, if I know that historically user has purchased a particular item having a particular property, let's say, user has always purchased items which are under 2000 rupees- this makes it very simple for us to have that filter in the search query where you would, in the suggestion itself, you would show shoes under 2000, for example, right?
so now, one very naive way to build this- if I'm talking about non-personalized way- is to get all possible Search terms that user fired on your platform.
so depending on which user is searching, what if this search suggestions can become hyper personalized.
so, first of all, a nice way to think about this is: hey, let me just create cohorts of user, let me just create groups, like, let me just create small groups of people having similar purchases to a similar interest, and then to all of them, let me show the same set of suggestions.
that's a nice way of thinking it, because what that would mean is that even if, like, there would be a chance where a user would be misclassified into a particular code- very high chance, right?
because every user search journey is going to be unique, the needs are going to be unique or the context is going to be extremely recent, which means that user has made last five searches belonging to a particular type of thing.
every search term that user is firing could belong, or rather could come, would belong, to one of these categories.
given that it would belong to one of these categories, we can leverage this information to create that context so that the next time the request comes in for search suggestions, we are able to use this or leverage this particular taxonomy to suggest the right item to the user.
so the next query or the next search query that is coming in, very likely it would be a footwear based query, right.
second is where your past searches, browsing history, purchase history- can be clubbed and mapped onto this exact same taxonomy and you can group them and then use some sort of AI, ml- not really AI, but basically machine learning model- to do Predictive Analytics and see, hey, what suits the best, right?
this would become the core and the Crux of making a better personalized uh, or rather hyper personalized, uh query suggestion, right.
so for each query that the user has fired you would see which category it belonged to.
for example, if I am searching for computer monitor and then if I'm typing c o, very high chances that I'm looking for computer mouse, because that starts with a C, right, so because they should belong to the same category.
second is evaluating reformulation, which means that, for example, if user is reformulating the query- which is typically what we do- for example we are looking for shoes.
if a person is typing this, you would want to build a predictive model that it belongs to this particular category.
you would want to start ranking and assigning score to each of the suggestion that you are giving, and that's how your model would need to learn over and over and over and over again.
so here the idea is very simple: when your user, when your end customer, fires a query, that- hey, I am the user- typed in sh.
so LTR is basically learning to rank, in which you can inject machine learning, more models on top of solar elasticsearch.
sorry, LTR ranking is what you can use, and then you would want to, you would have to provide your machine learning model to that.
so, which means that solar- uh, as in your search engine, because the query would be firewire, given this prefix- match all of them.
the way it would rank It Is by using a machine learning model.
but how to use a machine learning model with solar?
right, but now, first of all, with this solar, how would it get the machine learning model?
you can like, with LTR ranking model, you can provide a Json in an HTTP request.
now, how would solar get the search suggestions?
so Auto suggestion feature would have a cache, a solar, a big data pipeline, a machine learning model, training and explicit server to do that.
once the training is done, the Json, the model, would be exported, as in Json, inserted into solar so that it can use it for ranking, right?
and this is how Flipkart made their search suggestions hyper personalized, and that is it.