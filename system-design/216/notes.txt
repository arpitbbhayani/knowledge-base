API Retries - Thundering Herd Problem

Thundering Herd Problem say user Amakes an APIcall to the backend and there was some issue <mammus API USER A with network and hence the call failed! what do we do? We retry * assuming our APIs are idempolent But, how should retry? we simplest way of doing it I For i 1 = t03; > mun? 7 S doIt(); simple enough solution, butit falters at scale ... imagine the server is Things just gotcorse overwhelmed because which APIcall of failed and client retries!! every single connected The overwhelmed already server No room to recover - more request due retries to - new requests

Exponential Backoff Instead of repeating immediately back to back we retry with a backoff This gives servers a breathing C, 1 I 1 needed space and the much 22 1 1 1 I time to recover. 1| 1 (3 1 But, the retries still coincide!! T T1+ T2+ 74+ puts pressure on server You this action Gmail and slackwhen internetgoes see in on away. T 1 + C, Exponential Backoff +Jitter I I 1 1 22 1 1 m I atimmediale Instead of retrying 5, instant, we add some random (3 1 w 1 I I T 52 Jilter and this randomness (delay) reduces the coincidences during retries. This ensures retries are distributed and does notadd to the problem. retries While implementing ensure 1. You add random jitter 2. Metries are exponentially spaced