How Razorpay Scaled their Notification System

at Razor Scaling Notifications pay Notifications system Outbound communication eg : SMS Email , Push Web hooks Razor , . their pay notifies Meeting SLA is super important customer payer and payee 0 0 about the transaction Razor pay ^ B SMS Email Push A , , a push celeb hook email critical ! Given that the money is involved . maintaining a strong SLA is Existing Notification Flow > Executor > API > 0 0 > Worker nsas , -1 MySQL schedules the { scheduler < All about Executor is writing message to be to the DB about retried . guaranteeing sent delivery notification 1099 drops from 2sec to 4sec for > 1000 TPS

Challenges while scaling 1. Read load on DB during peak 2. Scaling of worker POD is limited to IOPS Of database events hard to handle 3. Surge during special were Rearchikcting Notification system load 1. Prioritizing Incoming Transactional Not all notifications are equal >> Marketing - - - One type of notification should not altect others Solution : Queues customer 's events not others To ensure one are affecting . we orate limit . Each queue , event . customer has some configurable rate limit , breaching which the message goes in a separate Queue > O O PO Queue Sas > API > Limiter > 0 0 PL Queue Sas > O O P2 Queue 0 Oc Sos Rate limited Events

2. Reducing DB Bottlenecks As load increased , the worker / executor increased but DB is not elastic and hence its IOPS became the bottleneck . and Vertical scaling is costly we cannot do it forever Solution Write to database asynchronously : > 0 0 Sas > API > Limiter > 0 0 Worker Sas > O O O O e ^ SQS Rate limited Events Executor Retries scheduler 0 De n kinesics a MySQL Observability : Dashboards on grafana . Alerts , Anomalies, Health , Success rate , SLA measures