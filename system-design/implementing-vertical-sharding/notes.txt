How to Implement Vertical Sharding

How to implement Vertical stranding what is stranding ? El database splitting across multiple É a machines is called stranding Shard 3 shard / shard 2 Vertical stranding Distributing tables across multiple shards ¥1 ¥1 Tables T.it . / -13 , The , ✓ shard L Shard 2 Shard 3 Database Idea : separate databases for set of tables - Better load handling scale payments related tables in one DB server Handle larger - eg : DB server auth related tables in another You will have to shard the DB when * vertically moving to microservices ? so how do , we implement Vertical stranding ↓ Move tables database to another from one server

storing meta information and reactive update given that we will have multiple databases be distributed among which the tables will We would need a way to store this into - to have consistent view enabling everyone a Also , upon any changes in configuration ( Table ownership ) the API servers need to be notified . Zookeeper both these concerns Hence , we use to address of knows to connect DBL for TL → from zookeeper > API server TL > ape server > API server y T2 DB 2 { UPDATES Zookeeper < Table TL → DBL Table movement Table T2 → ☐ 132 [ config changed ]

How to tables MySQL to another ? move from one El F/ Move Table Tz from DBL to DBZ " Tz with minimal downtime - DBI DB 2 Dump the table Tz 1. along with ' Bin log position using Mysql dump < 156 The dump will have the entire data with the bin 109 Position of the table along binlogol.bg 2. Restore the dump to another database ' TT load dump Sql . to DB 2 dump Sql . DBT 3. start the replication betueeed the two databases ensuring we only -12 to the intended only apply changes specific Replicator > updates table -12 Newer changes will thus flow to DBZ

4 . Once other database DB2 is almost caught - up , a. Rename the table T2 to 72 - bak ↳ DB should stop it encounters this statement sync blue the 2 as b. Update the entry in Loo Keeper to say that table -12 is now present on DBZ Once the made to changes are Zookeeper . they are creatively sent to API which then starts to for table -12 servers connecting DB 2 > API server is 0 3 > API ¥ DBI server ; > API server ^ n ¥7 -12 > zookeeper < Update T2 → DBZ time partitioning Svc * For a small blind out of Table TL → DBL n we will get Table -12 → DBZ Table not found errors Engineer consistency over availability * The approach works well for small / medium tables for huge tables replication lag Cui 11 be an issue .