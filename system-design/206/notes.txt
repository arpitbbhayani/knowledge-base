Himeji - Central Authorization at Airbnb

Central Authorization Service @ Airbnb Only checking for au then cation is not enough we need granular access control for Auth and Auth do what the defining who can on platform eg : can user I edit post pts ? ? can user 2 access wifi into of property P2 3 read ? file present folder shared with group 93 can user in Authorization in monolith Things are simpler when it is monolith all the checks are well within the codebase and the business part of logic microservices central auth when we adopt . . need . we a service Himeji - Central authorization @ Airbnb Authorization is modelled on Entity Relation Principal U : 123 post : 123 : comment WRITE 's comment User 123 has write privileges on post : 123

This information is stored in database as a triple entity # relation @ principal optional Entity is a three - fold into : type : id : part comment # @ 123 post : 123 : WRITE user : How the rules ? are defined and configured tuple for each permission for each entity will explode data Writing one Hence , we need to leverage rules , transitivity and set theory } WRITE read and write " "" eg : " A % OWNER read , write and owner privileges On airbnb Hence , we define relation on listing that defines access hierarchy as LISTING ' ' While relation listing checking : WRITE on a # wa ,, , , ' ' relation check UNION of WRITE or OWNER Union : I - # write - # OWNER listing ' checking ' While READ creation on a # READ : ' Union : check ' UNION Of READ and WRITE relation - # READ ( transitively OWNER too ) # WRITE -

the database will have Say , User : 123 is owner of listing :L , one entry # OWNER @ user 123 listing :L : should return say , we want to check True / False check ( listing :L , READ , User : 123 ) Because of the rule we defined # READ LISTING : listing :L # WRITE : union / # WRITE and # READ ) Union : < Union of # WRITE - # write and # OWNER - # OWNER # READ : < union : QUERY : LISTING :L # READ @ user : 123 - # READ LISTING :L # WRITE @ user : 123 # WRITE - LISTING :L # OWNER @ User : 123 # OWNER @ user 123 contains entry for listing :L : Because our DB the evaluation of check ( listing :L , READ , User : 123 ) TRUE but what if access to something depends on the existence other ? of some entity

want to allow people to read location if they reservation Say , We made reading location LISTING : allow of listing LOCATION : ' if user is the owner of the listing , or ' # READ : I Union : - # OWNER For the entity in question - LISTING :$ id # RESERVATION @ N -r Reference ( Reservation :$ rid # GUEST ) have Say , we following entries in database listing :L # owner @ user : 123 listing :L # reservation @ ref / reservation : 500 ) reservation : 500 # guest @ user : 456 should return say , we want to check True / False check ( listing :L : location , READ , User : 456 ) # @ 456 Query listing :L user owner : : listing :L # reservation then : matched references " reservation : 500 # guest @ user : 456

clients Architecture } Orchestration Himeji Read Himeji write hashing } consistent cache Caching > Himeji } \' > stranded DB Data cache invalidation Kafka orchestration layer - receives request from client - forwards request to cache using consistent hashing - computes response as per config and responds rate ) caching layer 198% hit - stranded and replicated - consistent hashing determines data ownership Data layer logically stranded persistent database - - mutations in data invalidates the cache