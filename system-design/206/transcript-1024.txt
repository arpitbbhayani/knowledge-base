let's say you are Airbnb and you don't want people to access Wi-Fi information unless they have made a reservation on it, right?
third, a little more complex example: let's say we are in Google Drive and can user u3 read file present in a folder shared with group G3?
right, for this service, for himeji, an authorization is modeled as a tuple, a tuple that contains three items: first is the entity, second is the relation, third is the principle.
so let's say, user ID 123 has the right privileges on post with id123 on command.
obviously, you can store it in any database that you want, but a simple way to visually see this sort of relation is something like this: entity hash relation at the rate principle.
so this information is stored in database as a tuple: entity hash relation at direct principle.
so, for example, if I would want to write it same information, I would write it something like this: post, colon one, two, three, colon, command hash, write at the rate user123, which means that user123 has write privileges on post with id123 on Commit.
so on post, you might have title description comment like: share something around that, right, so you can Define that that is a part of that entity and this is optional.
and because if you're storing just this thing, like, there would be so much of tuples like this that you need to store, for example, here, if I am the author of a post, so I would be able to read the post, I would be able to edit the post, I would be able to read the comments, I would be able to edit the comments, I would be able to like the post, and now creating these many tuples for me is such a big pain, right?
so the right relation on a particular entity is a union.
so anyone who has owner privileges or who has right privileges can write on a particular listing.
so by transitivity, owner can also read, write and anyway has the owner privileges on it, right?
now, so, say, user123, user123 is owner of listing one, the database will have one entry, which is listing colon 1 hash owner at direct123.
that's it database only has one entry for this because user123 is the owner of listing one.
now, given that, say, we want to check, can user123 read this particular post?
now let's see how that gets evaluated, because we are checking if user123 has read privileges on listing one or not.
how this will get evaluated is we are evaluating listing colon 1 hash read, right.
now listing colon or listing colon 1 hash read gets evaluated as a union, as a union of read and write.
first is listing colon 1 hash read at the rate user123.
on, the only entry that exists in the database is listing colon 1 hash owner at direct user123.
the second that would be fired is listing colon 1 hash right at direct one, two, three.
write is Union of right and owner, so listing colon 1 hash right at the red user123.
the third is listing colon 1 hash owner at direct user123.
now, because a database contains this entry, the check of listing one comma, read comma- user123- evaluates to true right.
so, whatever the entity hash relation is append at the rate, the user in action or the entity in action or, sorry, the principle in action- you just check for existence of it in the DB.
right now things get complex because now there are cases where your access to something depends on existence of some other entity.
read is a union of owner relation and existence of this entry.
so here, what we are defining is either user has owner privileges or this entity exists, or this entry exists in the database.
there is a reservation relation to a particular user, right, you would have something like that, but then instead of user ID you would have a reservation ID.
first entry is that listing colon 1 hash owner at direct user123, because user123 is the owner of listing one, which is what we have first entering the database.
second entry in the database is listing colon 1 hash reservation at the rate reference reservation, colon 500.
now, let's say we want to check if user 456 can read listing listing colon 1, colon location.
so the first query that would go is listing colon 1 hash owner at direct user, colon 456, because that is a principle in action.
we are checking for reference of reservation colon dollar rid hash guest.
now, this would be evaluated as: because the principle in action is user colon 456 because that has the reservation that we are checking for that particular user here.
we check for reservation colon dollar rid hash guest at the rate user colon 456, which is what gets over here.
we check for this: reservation colon 500 hash guest at direct user colon 456, and this entry exists, this 500, this 500 C.
we check for listing colon 1 hash reservation and then a reference of reservation colon 500, because that gets replaced after evaluation of this.
so here what we are checking is reservation colon rid hash guest direct user colon 456.
so reservation colon ID, like rid, will be replaced with 500 and this is what we would be checking when we are evaluating it.
so reference bracket: reservation colon 500 and this: that entry exists in the database.
you would check for reservation colon dollar, rid hash, guest at direct user, direct user, colon 456.
so it would be replaced with 500 goes over here, which is what we are checking: reference of reservation colon 500.
because this exists, listing colon 1: hash reservation reference bracket: reservation, colon 500..
now your client can either do or read and basically check for, uh, the existence, or check for the authorization, or it can do rights, where it is updating the system for new relations that are created.
if not, it goes to the database as a fallback and then read the data populate in the cache and responds back to the user, right.