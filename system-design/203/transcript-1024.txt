because when you're serving an API given a request, you send the Json response.
so, serving API, scaling it, it's relatively easier because you can guarantee millisecond level of response times from your backend servers.
but the real challenge comes in for a company like Jiffy is, while they serve images like gifs and videos, the media content that they have.
so, given that that is where the real challenge lies, and now obviously you can think of it that GP would be using to serve images and videos, some kind of CDs GP uses fastly as a CDN provider.
so request for those images go to CDN, while the API responses go there go to their classic API servers, right?
so instead of giving you, basically, instead of giving the domain name of your API server, you give domain name of CDN and on CDN, configure origin or something else.
this way you can serve API responses from CDN.
first of all, authentication API, because CDN has a cache in itself, like basic.
right for authentication API, you should not be serving it from the CDN.
but what you can definitely serve is search and discover API responses because they very rarely change, like for a particular search query.
you may very easily capture API responses for trending for, let's say, three hours or five hours until your next job runs, right.
Jiffy uses CDN to Cache images, videos and some apis around search and Discovery, right, okay, next then, why?
for example, in for a company like Jiffy, where they have users all across the globe, what if their main data or their main images lie in, let's say, India and a user from the US is trying to access it?
so people from the US, their request will go to the nearest Edge server if it has a data itself set.
if it does not have the data, it comes to the origin, gets the data, caches it and then serves it.
it goes to the origin, gets the data, caches it here and then sends the response to the user.
so, given that, given that, as a use case, given that you may have thousands of AD servers and now each Edge server would have its own cache.
it would go to the origin- maybe your S3, maybe your search service, maybe your backend API service, wherever right- and then it would put unnecessary load on your origin server.
so if your content is going viral from a particular region, if that region has, let's say, 5 000 death servers, so request from all 5000 unit servers because there is a cache miss.
this way, let's say, if I have four ad servers and two Shield servers, the number of requests going to origin will not be four for each Edge server, but it will be two for each Shield server.
this way, CDN helps you prevent, or helps in preventing, making a large number of requests on the origin, be it S3, bit or API server.
no, it has to be very specific to the resource, which is where almost every single CDN provider gives you a way to specify the cash duration for each URL pattern.
so, for example, for an API response like slash V1, slash GIF, slash trending, you might want to have a smaller duration, while when you're serving the actual GIF- let's say slash GIF, slash one, two, three, four, five, dot GIF- that would have a longer duration.
the next feature that Jiffy uses is around response configured cache.
so, which is where what you can alternatively do is, in the response coming from the origin, be it S3, beat or API server, you can configure a max age or s hyphen, max age header which your CDN can read and understand, and then cache that particular response for those many seconds, right?
so this is where response oriented caching also comes that way.
so what if you have an API that you cached on the CDN and now you want to invalidate it?
but it's not just that single, so single APN validation is a very simple thing, so, and you can just ask your CDN making an API call that, hey, this is the URL, please invalidate the cache.
let's say you want to invalidate the API response, the cached API responses on the CDN that contains a specific GIF.
so if that got delay edited, imagine if your API server or, sorry, imagine if that API response is cached on the CDN, right, and the GIF was deleted, so, which means that URL doesn't exist anymore.
request from the user, request from the client to come in, because CDN has the Epi response.
it would serve it in the API response.
you will need to delete the 8 because API responses are cached on the CDN.
you would want to invalidate the API response as that contains that specific chip.
it's like, in simpleness, it's like tagging a cache key with something that you would want to access it and delete it with right.
so, invalidating cache API responses containing a specific chip- very common use case.
then invalidating all cash API responses from an API key.
so what if a client, a customer of Jiffy, wants to invalidate its own cache, like anything that it has ever accessed?
then the next one is invalidating Cash API responses when the query contains a particular word.
or you are basically caching search queries- uh, sorry, search API responses on CDN, my bad.
uh, if you are doing that and let's say you would want to invalidate all the URLs or all the API responses that contains a particular word or that particular search tab, if you'd want to invalidate that- again a very common use case, typically when it comes to search ranking, right.
when, let's say, you rewrite everything, you want to invalidate it, right.
you can leverage that, that specific tags, to eradicate or to invalidate the cache entities on the CDA, which is what subjects that is really important for a use case like Jiffy, right?