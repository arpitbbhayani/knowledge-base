so Jiffy is the world's most popular gym website and it serves 10 billion media content every single day and we can totally guess it would be using some kind of CDN to do that but is that it in this video we dive deep into how GP uses different features of CDN to solve different kinds of problems and while going through it we will also take a look at a very interesting internal implementation detail of a CDL but before we move forward I'd like to talk to you about a course on system design that I've been running for over a year and a half now the course is a cohort based course which means I won't be rambling a solution and it will not be a monologue at all instead a small focused group of 50 to 60 Engineers will be brainstorming the systems and designing it together this way we build a very solid system and learn from each other's experiences the course is enrolled by 800 plus engineer spanning 12 codes and 12 countries ingenious from companies like Google Microsoft GitHub slack Facebook Tesla Yelp Flipkart dream11 and many many many more have taken this course and have some wonderful things to say the course is focused on Building Systems the way they are built in the real world they will be focusing heavily on building the right intuition so that you are ready to build any and every system out there we will be discussing the trade-offs of every single decision we make just like how you do in your team we cover topics ranging from Real Time text communication for slack to designing our own toilet balance live text commentary to doing impressions counting at scale in all we would be covering roughly 28 systems and the detailed curriculum split week by week can be found in the course page linked in the description down below so if you are looking to learn system design from the first principles you will love this course I have two offerings for you the first one is the live cohort based course and the second one is the recorded offering the Live code base course happens once every two months and will go on for eight weeks while the recorded course contains the recordings from one of the past cohorts as is if you are in a hurry and want to learn and want to binge learn system design I would recommend going you for the recorded one otherwise the Live code is where you can participate and discuss the systems and its design life with me and the entire cohort the decision is totally up to you the course details prerequisites testimonials can be found on the course page arpitbani dot me slash masterclass I repeat arpitbani dot me slash masterclass and I would highly recommend you to check that out I've also put the link of this course page in the description down below and I'm looking forward to see you in my next cohort so Jiffy you can host serve and search gifs it serves 10 billion media content every single day and if you think about it serving API is a relatively easier job why because when you're serving an API given a request you send the Json response these Json responses are are tiny hardly one key bit at Max 2 KB 3 KB it would go in right so serving API scaling it it's relatively easier because you can guarantee millisecond level of response times from your backend servers but the real challenge comes in for a company like Jiffy is while they serve images like gifs and videos the media content that they have why because API responses are not short when you are serving images images could be 512 KP big or 1 MB or 2 MB or 5 MBA big right same goes with videos right so given that that is where the real challenge lies and now obviously you can think of it that GP would be using to serve images and videos some kind of CDs GP uses fastly as a CDN provider so what happens is they may be maybe we don't know that they may be storing their gifs and videos on S3 they would be using some kind of CDN here they use fastly that we know of so request for those images go to CDN while the API responses go there go to their classic API servers right so this is how a typical CDN is set up now what does GP cache on CDN so we typically know what can be cash static resources static resources like images videos JS bundles and whatnot but on apart from that what GP also uses CDN for is to Cache API disposition and we'll say hey API responses yes CDN can also cache API responses so the idea here is while you serve apis right so instead of giving you basically instead of giving the domain name of your API server you give domain name of CDN and on CDN configure origin or something else this way you can serve API responses from CDN but obviously you should not do or you should not serve every single API from that first of all authentication API because CDN has a cache in itself like basic CDL is a casual itself so you would not want to Cache uh API responses of apis that are dynamic in nature right for authentication API you should not be serving it from the CDN but what you can definitely serve is search and discover API responses because they very rarely change like for a particular search query you would very rarely change the responses like maybe once a day some ranking job runs and that's when you change and maybe you're trending trending make you may very easily capture API responses for trending for let's say three hours or five hours until your next job runs right so this is what GP does Jiffy uses CDN to Cache images videos and some apis around search and Discovery right okay next then why why CDN CDN is not just to Cache things but what it also does it gives you geographical nearness for example in for a company like Jiffy where they have users all across the globe what if their main data or their main images lie in let's say India and a user from the US is trying to access it then all across the world the request needs to come across and then the response would be created here and then sent back so this would take a lot of time why because the response size is higher images videos they tend to be chunkier like they tend to be larger in size which is what is the problem that is where to give the best experience to the user you use CDN like Jiffy uses CDN to use geographical nearest because CDN has Edge servers and these are called Edge servers they are distributed all across the world so people from the US their request will go to the nearest Edge server if it has a data itself set if it does not have the data it comes to the origin gets the data caches it and then serves it so CDN is a classic classic cash so every single server just to reiterate every single server is every single server of CDN is called an edge server people making request the request is automatically routed to the nearest eth server if H server has the data good enough it would serve it back if it does not have the data it goes through the origin it could be S3 it could be apsr it could be anything it goes to the origin gets the data caches it here and then sends the response to the user right now here one very interesting detail very very very interesting internal detail that comes our way is hey if what could happen if there is a Content that is going viral now obviously for a particular reason there is not just one Edge server there could be hundreds and thousands of AD servers for each region right so given that given that as a use case given that you may have thousands of AD servers and now each Edge server would have its own cache so in the world a lot of AD servers are distributed each region have hundreds and thousands of web servers each ad server has an independent cache independent cash so it now it's not that all its servers are sharing a cache or if they're sharing a storage so every ad server has its own cache so now what would happen if a Content goes viral viral only from a particular reason if I think of if a content is going viral from a particular region a lot of requests will be originating from that particular region it would go to Edge server it's not just single server of that region there are hundreds of its servers now obviously because it's a each Edge server has an independent cache the for that the content going viral there would be a lot of cache misses given that there would be lot of cache misses where would the request go to it would go to the origin maybe your S3 maybe your search service maybe your backend API service wherever right and then it would put unnecessary load on your origin server so if your content is going viral from a particular region if that region has let's say 5 000 death servers so request from all 5000 unit servers because there is a cache miss it would go to origin so origin has to handle a large number of requests so is that this is that the best architecture because then it is unnecessarily putting load on the origin although subsequent requests would be faster but it is putting unnecessary load on your origin can you reduce it this is where what CDN employs a CDN employs something called as An Origin sheet it's not a single layer cache it's multi-layer cash it's something that CDN does it we don't have to configure it so what do you have head servers are something which acts as the point of interface from your client so user's requests come to that server request for the ad server if it has a retired subset pack if it does not have the data instead of it's a directly talk to the origin and server makes a request to a shield server this is an origin Shield server now original Shield server are the ones that make call to origin to get the data and they have their own cache so now what happens is request from that server comes to the shield server now if Shield server has a data it sends it back if it does not have the data it goes to original and gets the data now Shield server are not many Shield servers are only few there are few as compared to its servers this way let's say if I have four ad servers and two Shield servers the number of requests going to origin will not be four for each Edge server but it will be two for each Shield server this way CDN helps you prevent or helps in preventing making a large number of requests on the origin be it S3 bit or API server such a brilliant way to design a system I loved when I first went through it right such a brilliant way okay what else which other feature does Jiffy use the next feature that gpus of CDN is a route specific TTL obviously when you are setting or when you are using CDN as a cache a CDN is a cache so when you are configuring it you would want to specify that hey please catch the response of this for n minutes but now should n be constant should n be same for every single resource that you have no it has to be very specific to the resource which is where almost every single CDN provider gives you a way to specify the cash duration for each URL pattern so for example for an API response like slash V1 slash GIF slash trending you might want to have a smaller duration while when you're serving the actual GIF let's say slash GIF slash one two three four five dot GIF that would have a longer duration right which are the feature the next feature that Jiffy uses is around response configured cache now obviously you may not want to just do route based cash duration it may be something that your back end is generating that hey catch this thing for five minutes cash this thing for 20 minutes so which is where what you can alternatively do is in the response coming from the origin be it S3 beat or API server you can configure a max age or s hyphen max age header which your CDN can read and understand and then cache that particular response for those many seconds right so this is where response oriented caching also comes that way then the next one this is very interesting now for example around invalidation this is all about invalidation so what if you have an API that you cached on the CDN and now you want to invalidate it but it's not just that single so single APN validation is a very simple thing so and you can just ask your CDN making an API call that hey this is the URL please invalidate the cache it would invalid the cache right away that is a pointed in validation but the next few are very interesting let's say you want to invalidate the API response the cached API responses on the CDN that contains a specific GIF what if you want to do that so let's say there was a gif that you that got changed due to anything or that got removed not just change that got deleted right so if that got delay edited imagine if your API server or sorry imagine if that API response is cached on the CDN right and the GIF was deleted so which means that URL doesn't exist anymore now what would happen request from the user request from the client to come in because CDN has the Epi response it would serve it in the API response it would be serving the URL of an image that does not exist so the UI would look bad which is very few case and GIF is deleted you should also be invalidating the cache but it's not just the GIF URL you will need to delete the 8 because API responses are cached on the CDN you would want to invalidate the API response as that contains that specific chip how do you do that there is something called a surrogate Keys it's like tagging it's like in simpleness it's like tagging a cache key with something that you would want to access it and delete it with right so those are called surrogative case highly or just a Google search away to find those things out right so invalidating cache API responses containing a specific chip very common use case then invalidating all cash API responses from an API key so now here what it is so Jiffy as a company it's not just a b2c company it's a B2B company as well so here you can make or you can generate your own API keys and use and integrate GP in your applications so what if a client a customer of Jiffy wants to invalidate its own cache like anything that it has ever accessed what's invalidated right very common use case again it uses surrogate keys to do that then the next one is invalidating Cash API responses when the query contains a particular word let's say you build a search query or or you are basically caching search queries uh sorry search API responses on CDN my bad uh if you are doing that and let's say you would want to invalidate all the URLs or all the API responses that contains a particular word or that particular search tab if you'd want to invalidate that again a very common use case typically when it comes to search ranking right when let's say you rewrite everything you want to invalidate it right so if you would want to do that how can you do it efficiently which is where again surrogate Keys come in so in case think about surrogate Keys as tagging when you are caching something you can pass in extra tags the extra tags could be Jeff IDs it could be search queries it could be something else you can leverage that that specific tags to eradicate or to invalidate the cache entities on the CDA which is what subjects that is really important for a use case like Jiffy right so yeah such such amazing pieces of functionalities that CDN provides I would highly highly highly encourage you to go through CDN documentation like Akamai fastly cloudflare and see the kind of features that they provide you then they while explaining in their documentation they also specify a few very practical use cases so I would again highly highly highly highly encourage you to explore those and see the beautiful world of cdnc the kind of things that they provide right so yeah that is it that is it from this one this entire thing was taken from jeffy's engineering blog I have linked it in the description down below again I would highly recommend you to check those things out for most more detail but more importantly go through serial documentation to understand the features that CDN gives you out of the box just their documentation is good enough for you to understand the features that they offer right so yeah that is it for this one I hope you like this video if you like like this video give this video a thumbs up if you guys like the channel give this channel a sub and I'll see you in the next one thanks [Music] [Music]