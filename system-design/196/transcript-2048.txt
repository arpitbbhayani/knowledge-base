so we all love food but are lazy to go out to a restaurant to pick it ourselves, and this gave rise to food delivery startups likes.
chatbots are essential for them, as they resolve most of the complaints that customers have without spending a lot of money on the customer service representatives.
in this video, we take a look at how swiggy designed their chat bots to achieve business efficiency at scale, and dive deep into their tech architecture and key components that we need to consider while designing it.
thanks, what are chat bots?
chat bots are computer programs that automatically simulates the interactions with customers based on some predefined events and conditions.
so, primarily, if you are unhappy with an order, you go to the support screen.
if your order is spilled, what you do if something else happened?
so you are taken on that journey which you would have inherently taken while on a call with a customer service representative.
right, and let's talk about how do we design a chatbot flow.
so, designing a chat bot.
what they say is: this is actually just a decision tree that is running in the back end.
this is a really solid insight because, if you think about it, when you are on a support screen, your chat bot is nothing but a decision tree which is taking you along a path, depending on some control variables that you have.
for example, you start your support, that that is your start node.
right, depending on which condition you move, you go to that particular node and then some other condition.
right, so this is a classic decision tree that runs in the back end to power a chatbot.
so if you are ever building your own chat bot, decision tree is the way to go, because in most cases you don't need fancy nlp, fancy bots, who talks different languages.
normal decision tree would work just fine for most of your use cases, right, okay, so what they say is: at each step of the chatbot flow, we show the customer a list of valid child nodes and, as an option to proceed further simple.
so if your order is filled, they might give you next screen.
hey, do you want refund of xyz amount?
or do you want to talk to customer care executive?
you tap on one, you go to that, you have picked that option and then the corresponding action is taken.
so building a chat bot is equal to just maintaining a good, or building a good decision tree and doing that state management right.
thousands of conversations created by the customers who wanted to cancel their ongoing orders.
so how would you build a chatbot?
so how would you build a chatbot?
so sorry, how do you build a decision tree?
so, because the heart and soul of your chat bot is a decision tree.
it is very important to build a good decision tree.
for example, these five are the top reasons for which people reach out to us.
so that becomes your level one node for this particular type of query.
these are the five reasons or five things that people ask for.
so, for example, if you are doing a cancellation of the order, a simple chatbot flow could be: ask the customer about the reason for cancellation.
show the predicted time for delivery just in case, like, for example, customer is trying to cancel the order, but if the delivery time is in five minutes, you may just want to check: hey, please don't, please don't cancel it, your order will be there in five minutes.
then you may want to show a cancellation fee that if you cancel this order at this time, this is what you would have to pay extra.
then ask the customer for a confirmation on the cancellation and then show details about refund that, hey, this is what you will get in refund, right?
so this is a classic step by step on which you would have normal conversation with an employee, with a customer service representative, simulated through a chat bot.
no fancy nlp, just normal decision tree iteration.
right, okay, what next?
the whole task has now become a self-serve for the customer and can be done in 10 seconds, which used to take 5 minutes over a phone call- 5-10 minutes on a phone call- can be done in 10 seconds.
now let's talk about designing this service now.
how would you design something like this now?
first let's talk about one very important decision before we jump into the high level architecture of this.
the biggest decision that they have taken is web view.
they do not want to build a native express, although you want to give a seamless experience to your end user, but what webview does is webview just injects a website, a web page, in your mobile app.
so, because it is a support tool you may not need- you need good ui, but not very fancy ui.
you don't need native device performance.
a simple web page loaded in the screen would work just fine.
so what speaker did is they built a simple web page and they just embedded it in the mobile app.
and with this webview, you get this flexibility that anytime new iteration needs to be made, you don't have to ship new version of your app.
it's just website being loaded there, right?
so how would your overall architecture look like?
now, whatever information was there in the chat bot, which means whatever option the user selected- all of this information needs to be shared with the customer support executive.
so this two systems needs to talk to each other.
now how is chatbot powered?
chatbot is powered through a decision tree.
now chatbot uses decision tree and state management is done in any database.
who updates the decision tree?
decision tree is created and updated by the product managers in the organization, so they on maybe some other support staff who does all the analysis of that, maybe an inside steam, maybe analytics team and whatnot.
they would be populating this decision tree.
your chatbot service would be just maintaining the state in this particular database.
then your customer support executive needs visibility on a lot of data, lot of data.
for example, your customer support would need to see an admin screen or an agent dashboard through which he or she can see what last order that you made, what's the status of that delivery service, logistics and whatnot.
it would have access to all the information about your last order for which you made the call right.
so now your payment service needs to send data to this customer support service.
then your order service needs to send data to this customer support service.
this customer support service might need to invoke notification.
for example, customer support says that, hey, you will be receiving an sms in two minutes, so they need to trigger some sms about some confirmation.
something, through notification may be a refund service.
more importantly, you need a fraud detection service because with chatbots in place, there is a very high chance of people committing frauds.
so your fraud detection service needs extreme like needs to be there that is powering this entire chat bot and support system.
so this is your entire support system, right?
your chatbot, your customer support, everything.
they are all talking to each other to ensure that not a lot of frauds are happening.
so a fraud detection service would get signals from a lot of other systems, for example payment system, for example order system, for example the chat that the user has made the chatbot state.
all of that becomes a signal for this fraud processor and they and it will have its own database in which it is talking about, like it is doing that fast computation to sell.
is this customer trying to make a fraud over here, like if the order is not spilled, still the person is saying that order is spelled something like that, and soon they would be acting in sync to power this entire chatbot.
right, and every system talks to each other so that, because there is a lot of exchange of information just to power this chatbot and- and this is exactly what these folks have talked about in this particular blog, where they have mentioned key components as webview, orchestrator, agent workbench, bot notification system, right- and when they talk about fraud detection, they talk about fraud modeling, in which they are using a machine learning model that takes several signals as input to define the fraud segment of all customers.
so all of these systems- historical data, what not- they become as a signal input to your fraud processor so that they can do in a nursing way, they can do it, they can do it in synchronous way, depending on the scale, they can pick that up and build its system out, right, okay?
apart from this, there is one very interesting thing that they have brought about is called as business continuity plan.
what if your chatbot system is down?
your entire support system is down?
your customers would not be happy.
so that is where you need to have a business continuity plan.
that in case, if your system itself is not working, what is your continuity plan?
so here, what they do is they have your, they have a third party agent chat as a fallback.
their primary thing is chatbot service, but if that doesn't work due to any reason, they would fall back to normal third party agent chat, simple chat interface in which people are typing and they are responding, and that's a fallback, it's more of a backup.
but if the chatbot is service is working, fine, everything will be served to the chatbot service.
right, and one very interesting thing that they brought about is: which key metric would you put your focus on, given this state, like, given that you are building a chatbot, which key service or which key metric that you will be putting your focus on?
so what they put focus on is called as both: uh, it's called, basically, bot efficacy percentage, which means that the percentage of conversions resolved by the bots versus the percentage of conversions resolved by the support executives, which means that they would want a large number of requests to be served by the chatbot and very few and very minimal human intervention.
this is an important thing because, at scale, when you are optimizing, you pay for fixed salaries of these employees.
that is where tech would enable you to make those critical optimizations in your businesses so that you save cost at scale, still while making your customers happy and doing your job.
now, obviously, because a lot of systems did have to talk to each other, all of them comprises in this support system.
it's not just chatbot, but it's just an entire support system, because they might have some services in java, some in nodejs, some in ror, apache, kafka, acting as a backbone where all the events and messages and whatnot are streaming- my sequel to hold this decision, tree transactional information, postgres- something similar- and redis.
this is exactly what would be embedded through a webview in their app.
so they don't have to build a different app interface for this and a different web interface.
they're just writing react and embedding that in a webview within the app.
so this saves engineering cost, right, and this is how amazingly well they have designed that chatbot system.
if you guys like this video, give this video a thumbs up.
if you guys like the channel, give this channel a sub.