so we all love food but are lazy to go out to a restaurant to pick it ourselves and this gave rise to food delivery startups likes we gained no matter chatbots are essential for them as they resolve most of the complaints that customers have without spending a lot of money on the customer service representatives in this video we take a look at how swiggy designed their chat bots to achieve business efficiency at scale and dive deep into their tech architecture and key components that we need to consider while designing it but before we move forward i'd like to talk to you about a course on system design that i have been running for over a year now the course is a cohort based course which means i won't be rambling a solution and it will not be a monologue instead a small focused group of 50 60 engineers every cohort will be brainstorming systems and designing it together this way we build a solid system and learn from each other's experiences the course to date is enrolled by 600 plus engineers spanning nine cohorts and ten countries engineers from companies like google microsoft github slack facebook tesla yelp flipkart dream 11 and many many many more have taken this course and have some wonderful things to say the coolest part about the course is the depth we go into and the breath we cover we cover topics raging from real-time text communication for slack to designing our own toy load balancer to quick buzz live text commentary to doing impressions counting at scale for any advertisement business in all we would cover roughly 28 questions and the detailed curriculum uh split week by week can be found on the course page which is linked in the description down below so if you're looking to learn system design from the first principles you will love this course i have two offerings for you the first one is the live cohort discourse which you see on the left side and the second one is the recorded course which you can see on the right side the live code base course happens every two months and it will go on for eight weeks while the recorded course contains the recordings from one of the past cohorts as is if you are in a hurry and want to binge learn system design i would highly recommend you going for the recorded one otherwise the live code is where you can participate and discuss things live with me and the entire cohort and amplify your learnings the decision is totally up to you the course details prerequisites testimonials can be found on the course page at binary dot me slash master class and i would highly recommend you to check that out i put the link of uh the course in the description down below so if you're interested to learn system design go for it check out the link in the description down below and i hope to see you in my next cohort thanks what are chat bots chat bots are computer programs that automatically simulates the interactions with customers based on some predefined events and conditions so primarily if you are unhappy with an order you go to the support screen that is where you are taken on a journey which requires zero almost zero human intervention around how your how you are navigating through it is your order if your order is spilled what you do if something else happened what do you do so you are taken on that journey which you would have inherently taken while on a call with a customer service representative right and let's talk about how do we design a chatbot flow so this is the official engineering blog of sweegee on this particular topic on how they do it so designing a chat bot what they say is this is actually just a decision tree that is running in the back end this is a really solid insight because if you think about it when you are on a support screen your chat bot is nothing but a decision tree which is taking you along a path depending on some control variables that you have for example you start your support that that is your start node then what do you have you might have four options is your order spilled is your order not delivered is your delivery late or something else right depending on which condition you move you go to that particular node and then some other condition you go to the next node then some other condition you go to the next node right so this is a classic decision tree that runs in the back end to power a chatbot so if you are ever building your own chat bot decision tree is the way to go because in most cases you don't need fancy nlp fancy bots who talks different languages normal decision tree would work just fine for most of your use cases right okay so what they say is at each step of the chatbot flow we show the customer a list of valid child nodes and as an option to proceed further simple so if your order is filled they might give you next screen hey do you want refund of xyz amount or do you want to talk to customer care executive these are possible child notes you tap on one you go to that you have picked that option and then the corresponding action is taken as simple as this so building a chat bot is equal to just maintaining a good or building a good decision tree and doing that state management right okay so now what else thousands of conversations created by the customers who wanted to cancel their ongoing orders we gathered common reasons of cancellation so this is about building the chatbot so how would you build a chatbot so sorry how do you build a decision tree so because the heart and soul of your chat bot is a decision tree it is very important to build a good decision tree you just cannot use common sense to do it you also need some historical data or some historical data backing it for example these five are the top reasons for which people reach out to us so that becomes your level one node for this particular type of query these are the five reasons or five things that people ask for those becomes your next level and then the next level so for example if you are doing a cancellation of the order a simple chatbot flow could be ask the customer about the reason for cancellation show the predicted time for delivery just in case like for example customer is trying to cancel the order but if the delivery time is in five minutes you may just want to check hey please don't please don't cancel it your order will be there in five minutes then you may want to show a cancellation fee that if you cancel this order at this time this is what you would have to pay extra then ask the customer for a confirmation on the cancellation and then show details about refund that hey this is what you will get in refund right so this is a classic step by step on which you would have normal conversation with an employee with a customer service representative simulated through a chat bot no fancy nlp just normal decision tree iteration right okay what next the whole task has now become a self-serve for the customer and can be done in 10 seconds which used to take 5 minutes over a phone call 5-10 minutes on a phone call can be done in 10 seconds this is what efficiency at scale is all about now let's talk about designing this service now how would you design something like this now first let's talk about one very important decision before we jump into the high level architecture of this the biggest decision that they have taken is web view now what webview is so they do not want to build a native express although you want to give a seamless experience to your end user but what webview does is webview just injects a website a web page in your mobile app that's what webview is all about so because it is a support tool you may not need you need good ui but not very fancy ui you don't need native device performance a simple web page loaded in the screen would work just fine so what speaker did is they built a simple web page and they just embedded it in the mobile app as simple as that and with this webview you get this flexibility that anytime new iteration needs to be made you don't have to ship new version of your app it's just website being loaded there right so how would your overall architecture look like so this is what is taken from the swiggis block i've just made it into a fancy little diagram so here what you would have is your customer is interacting with a chatbot so it is possible that when your customer is interacting with the chatbot there might be a need where a customer requests to talk to a customer support if such need exists or if such need arises then your customer talks to customer support executive now whatever information was there in the chat bot which means whatever option the user selected all of this information needs to be shared with the customer support executive so this two systems needs to talk to each other now how is chatbot powered chatbot is powered through a decision tree you may pick your favorite database to implement it now chatbot uses decision tree and state management is done in any database who updates the decision tree decision tree is created and updated by the product managers in the organization so they on maybe some other support staff who does all the analysis of that maybe an inside steam maybe analytics team and whatnot they would be populating this decision tree your chatbot service would be just maintaining the state in this particular database then your customer support executive needs visibility on a lot of data lot of data for example your customer support would need to see an admin screen or an agent dashboard through which he or she can see what last order that you made what's the status of that delivery service logistics and whatnot it would have access to all the information about your last order for which you made the call right so now your payment service needs to send data to this customer support service then your order service needs to send data to this customer support service this customer support service might need to invoke notification for example customer support says that hey you will be receiving an sms in two minutes so they need to trigger some sms about some confirmation something through notification may be a refund service more importantly you need a fraud detection service because with chatbots in place there is a very high chance of people committing frauds so your fraud detection service needs extreme like needs to be there that is powering this entire chat bot and support system so this is your entire support system right your chatbot your customer support everything they are all talking to each other to ensure that not a lot of frauds are happening so a fraud detection service would get signals from a lot of other systems for example payment system for example order system for example the chat that the user has made the chatbot state all of that becomes a signal for this fraud processor and they and it will have its own database in which it is talking about like it is doing that fast computation to sell is this customer trying to make a fraud over here like if the order is not spilled still the person is saying that order is spelled something like that and soon they would be acting in sync to power this entire chatbot right and every system talks to each other so that because there is a lot of exchange of information just to power this chatbot and and this is exactly what these folks have talked about in this particular blog where they have mentioned key components as webview orchestrator agent workbench bot notification system right and when they talk about fraud detection they talk about fraud modeling in which they are using a machine learning model that takes several signals as input to define the fraud segment of all customers so all of these systems historical data what not they become as a signal input to your fraud processor so that they can do in a nursing way they can do it they can do it in synchronous way depending on the scale they can pick that up and build its system out right okay apart from this there is one very interesting thing that they have brought about is called as business continuity plan so what happens what if your chatbot system is down your entire support system is down you can't just say that hey will not be resolving any conflict your customers would not be happy so that is where you need to have a business continuity plan that in case if your system itself is not working what is your continuity plan so here what they do is they have your they have a third party agent chat as a fallback their primary thing is chatbot service but if that doesn't work due to any reason they would fall back to normal third party agent chat simple chat interface in which people are typing and they are responding and that's a fallback it's more of a backup but if the chatbot is service is working fine everything will be served to the chatbot service right and one very interesting thing that they brought about is which key metric would you put your focus on given this state like given that you are building a chatbot which key service or which key metric that you will be putting your focus on so what they put focus on is called as both uh it's called basically bot efficacy percentage which means that the percentage of conversions resolved by the bots versus the percentage of conversions resolved by the support executives which means that they would want a large number of requests to be served by the chatbot and very few and very minimal human intervention this is an important thing because at scale when you are optimizing you pay for fixed salaries of these employees you would want to chop those costs down that is where tech would enable you to make those critical optimizations in your businesses so that you save cost at scale still while making your customers happy and doing your job and now what is the tech stack of the system so what they talked about the tech stack is that their tech stack includes java node.js ruby on rails kafka mysql postgres and redis now obviously because a lot of systems did have to talk to each other all of them comprises in this support system it's not just chatbot but it's just an entire support system because they might have some services in java some in node.js some in ror apache kafka acting as a backbone where all the events and messages and whatnot are streaming my sequel to hold this decision tree transactional information postgres something similar and redis for caching and for front end they use react this is exactly what would be embedded through a webview in their app so they don't have to build a different app interface for this and a different web interface they're just writing react and embedding that in a webview within the app so this saves engineering cost right and this is how amazingly well they have designed that chatbot system so yeah that is it for this one if you guys like this video give this video a thumbs up if you guys like the channel give this channel a sub i post three in-depth engineering videos every week and it's in the next one thanks again [Music] [Music]