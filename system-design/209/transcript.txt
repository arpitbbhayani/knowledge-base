so an emergency button in a ride hailing app like uber can be life-saving but what happens when you click it what kind of information does It capture how does it notify the nearest police station in this video we dive deep into the architecture of Uber's emergency SOS service and look at the key design decisions that make it highly available and reliable but before we move forward I'd like to talk to you about a course on system design that I've been running for over a year and a half now the course is a code based course which means I won't be rambling a solution and it will not be a monologue at all instead a small focused group of 50 to 60 Engineers will be brainstorming the systems and designing it together this way we build a very solid system and learn from each other's experiences the course is enrolled by 800 plus engineer spanning 12 codes and 12 countries ingenious from companies like Google Microsoft GitHub slack Facebook Tesla Yelp Flipkart dream11 and many many many more have taken this course and have some wonderful things to say the course is focused on Building Systems the way they are built in the real world they will be focusing heavily on building the right intuition so that you are ready to build any and every system out there we will be discussing the trade-offs of every single decision we make just like how you do in your team we cover topics ranging from Real Time text communication for slack to designing our own toilet balance side to cricbuzz's live text commentary to doing impressions counting at scale in all we would be covering roughly 28 systems and the detailed curriculum split week by week can be found in the course page linked in the description down below so if you are looking to learn system design from the first principles you will love this course I have two offerings for you the first one is the live cohort based course and the second one is the recorded offering the Live code base course happens once every two months and will go on for 8 weeks while the recorded course contains the recordings from one of the past cohorts as is if you are in a hurry and want to learn and want to binge learn system design I would recommend going you for the recorded one otherwise the Live code is where you can participate and discuss the systems and its design life with me and the entire code the decision is totally up to you the course details prerequisites testimonials can be found on the course page arpitbani dot me slash masterclass I repeat at with many dot me slash masterclass and I would highly recommend you to check that out I've also put the link of this course page in the description down below and I'm looking forward to see you in my next cohort so during an emergency every single second matters which means that whenever a button is stopped you have to do whatever you can to ensure that very quick actions are taken during such time so first of all we'll take a look at what kind of information should we be capturing when an SOS button is pressed on the app so the critical details that we need to capture could be current location the trip details vehicle details and Driver Rider details right some of this information would be available on the server side why some information needs to be taken from the client side so for example the current location where the SOS button was pressed that has to be taken from the client side obviously server would not know it but other details like trip details vehicle details driver Rider details all of that can be they are present on the server side but still they are they should also be made available on the client side to take quick actions will take a look at it second when that SOS button is tapped the most critical thing is that every like it's not just that where the SOS button was tapped but after the SOS button is tapped the every single second or every two or basically twice a second the location of the client needs to be continuously sent and monitored on the server right this is extremely important to be done because it's an emergency situation you have to ensure that these devices are explicitly monitored no matter what third an optional SMS is compiled and sent to the First Responders because there might be now this is a point that most people don't think of now think about it you might be in an emergency situation where you cannot talk on a phone where if let's say the information is sent but you still need to send this to someone else so which is where it might not always be possible for you to give a call to let's say 911 or 100 in India you cannot do that which is where you may have to rely on SMS to do it but will you be typing SMS at that time no so which means that there has to be a way to create SMS from all of the details that we are capturing and sending it to the First Responders and more importantly that when you hit the SOS button and someone from the internal support team at Uber needs to be notified like they because they are the one who would be coordinating so they also need to be notified so that they are coordinating that hey are you safe or not what has happened has police reached or what not like all of those things Uber some someone from Uber has to take care of that and by the way whatever we are discussing whatever I'll be going through as part of Architecture is all taken from the Uber's engineering block which I'm linking in the description down below highly recommend you to check that out but we'll still dive deeper into why they have made such decisions now the first key decision is around capturing location obviously when an SOS button is pressed you would capture the location but hey what will you do with Latin long because when you capture you get GPS location what will you do with GPS location like will you just send GPS location to police is that is that easy for them to understand no you would want to make life as simple as you can so which is where what you do is you capture the location but you do reverse Geo coding so we typically know that hey from lat long we are sorry from an address we try to gather laptop so where G where reverse geocoding comes in is where you use the lat long and try to deduce the address out of it now this is a very popular technique called jio like which is called as reverse geocoding you would have also observed this in Google Maps so in Google Maps when you drag and drop a pin like the map pin at a particular place it tries to reduce the address so when you place it near your home it actually tells you some Road name some area name and some city name along with that so this is reverse geocoding now when you have this information when I why is this information important now imagine in during an emergency you are in a very stranded place where you don't know where you actually are so which is where how do you communicate where I am let's say you got a chance to call someone how do you know what to say am I you can't say I met this this this coordinate right so that is where reverse geocoding comes in like this is such an important design decision such an important decent decision to ensure that during time of an emergency the life like the overall situation is made simpler for the person in a potential danger right okay so now here which is where the reverse geocoded address right is sent to local police Authority uh it can be used to send SMS to your emergency contacts and whatnot right so this is an important component which would be part of the location microservices right and now while this is happening we also know that when source button is pressed the location needs to be continuously sent to their backend server so that Uber's internal staff or some of their services can keep an eye on it now when this information is sent you just don't need to send lat long along with that because it's an emergency you would be sending reverse geocoded information and storing it by the way now this way it's easy for them to coordinate with other people because they don't know light wrong they know in this area this street this Lane is having the problem right so this is one of the most critical decisions very counterintuitive but very important decision design decisions that you have to take while you are designing this particular service right second obviously when someone press it now you have to notify police the local police Authority how do you do it now obviously it's not a good idea that everything has to be done by Uber so which is where they use something called as rapid SOS now rapid SOS is a B2B company that offers SOS Services which means that they expose endpoints on which you send some data in some particular format and they send or they forward this data to the nearest local police Authority now for you everything else the SOS part becomes a black box right so now you just invoke whenever user presses an SOS button the API call is made to your emergency service emergency service in turn makes an API called to the rest to the rapid SOS service like there the the corresponding provider and they then send information to the local police Authority and ensure that it is taken care of now the next part that comes in is about hey you did notify them but are there like is that it would you want to notify someone else which is where you would configure other notification channels now this notification Channel not like normal SMS email and all but these are channels on which emergency needs to be communicated so not only notifying the local police Authority we should also be notifying someone from the in internal support or your emergency contact numbers so now when you do that which means that there has to be a way for you to quickly send an SMS to the emergency contact which means that you have to have a way through which you can quickly combine the SMS so that is an important design decision that you have to ensure that you are taking right so this way you would want to make life simple for your end user which is whether your reverse geocoding comes into action right okay now here one very important design decision now this is something that we cannot normal or basically casually think about now that thing is that you have to send the notifications to internal support emergency contact and Rapid SOS in parallel why because you just can't say I'll do all these three one after another so what if the first call itself failed then would you not call others so this is an important design like very low level but very important design decision where you are doing this in parallel so sending notification to emergency contact or sending it to support or sending it to Rapid SOS so that even if one of the fields even if one of these three fails the other two are still succeeded and someone is notified about an emergency situation right which is what is more important than anything else at the moment right such an important piece of code that you would be writing to ensure that why this needs to be multi-threaded right okay or something done in parallel not really threads but something that is done in parallel okay the next one now because this service is dealing with emergency situation now what if you are in an emergency you are hitting the SS button but the emergency service is down you cannot let that happen so the uptime of this service is extremely important no matter what this service has to be up 24 7. now this would ensure that when you hit the SOS button there is someone who is responding to that right so now whatever architectural decision you make will go through the architecture in depth but whatever design decisions you make you have to ensure that everything has a fallback everything has a plan B everything is extremely reliable and available so few key design decisions that we take so first of all Kafka to send a notification or sorry to send an event about an emergency and being consumed by multiple Services let's say emergency contact rapid resource or something this can be done on Kafka Kafka gives you native persistence so you will not lose out on data even if Kafka is done due to any reason or Kafka reboots you to any reason and it and it guarantees at least one's delivery so which means that at least once the message would be delivered to the corresponding consumer this means that it might be possible will for the same event two messages are like two times the same event is sent to a consumer but that is fine because it's an emergency situation you cannot have a case where message is not at all delivered right so that is guarantee that is given to us by Kafka second what if Kafka itself is down then so what would you do right which is where what you have to ensure over here is you can't just say I can't do much like because it's customer support or uh supporting customer during an emergency is most important for your customer safety is most important for Uber which is where what we do is if Kafka is down we fall back on synchronous API so you send an event to Kafka Kafka sends it or or multiple consumers consume it from Kafka instead of that what if the service the emergency service which is writing to Kafka even in the service itself makes API call to those corresponding things you say there is redundancy yes there is but given the criticality of this service it's essential because you cannot assume that Kafka is running all the time due to some reason some errors some maintenance that is down and you get emergency at that time you can't just say hey I can't do much with it right so that is where falling back on synchronous API again an extremely important low level design decision that you would be making while designing this particular service now the next part is no single point of failures whenever you are architecting a service like this because it's such a critical one you have to ensure that there is no single point of failure at any part in your service or in your architecture at all okay so now let's go through the architecture of it now this is the architecture heavily inspired from ubercentric again Linked In the description down below go check that out right I've just made a little bit of elaborations on top of it okay so what do we have so we have a bunch of users they have their phone and they press the source button on their phone right now this call comes through the API Gateway API Gateway forwards it to either emergency service or location service now this would depend on what kind of data is it sending because like for example we know that once the SOS button is pressed we would make call to emergency service registering an SOS so that call would come synchronously from API Gateway to emergency service emergency service would have its own small database in which it would be stored in that particular information now this database would can be used by our internal support team to see where you are what you are doing what's the emergency and the details around it they might use it they are your Uber's support system can use it but more importantly when the SOS button is pressed you have to continuously send locations every one or two seconds now this location needs to be sent to a location service but apart from that the when you are sending this location to the location service for an ASR situation the location service should respond with a reverse geocoded address now this address becomes extremely important for you to render the template on your mobile phone so that you can send it to emergency contact if you have to right so that is extremely important for your location service to do so now you're not just sending location once but you are continuously sending location to location service now will how does this location service continuously update the database with your latest information or is showing the chart on where you have been because it needs to have that trail right you would want to help local police to follow the trail that you took right so which is where every single location that is being sent needs to be captured and stored somewhere so that it is rendered efficiently on the for the help of local police or for internal Looper staff to do the internal investigation right so which is where the location service whenever user sends the location it would be throwing it into Kafka and then it would be consumed by the emergency service which is updating the location in the database which can be later consumed by your but stuffer can be shared with the local police Authority right so that is what you would do with continuously streaming of location data through Kafka to emergency service and so on and so forth right the more important part over here is when the emergency is invoke you would also need to make call to a notification system because notification system would be notifying to your emergency contacts and whatnot so that also comes into the picture the day something is wrong take some actions if you need to right now these are some very important design decisions that we are taking right and the most important one the most important one is invoking the rapid SOS API now this is where when you are creating an emergency the first thing that it would do is invoke a rapid SOS API to ensure that and emergencies created and it in and it sends this data to the local police Authority right now the location that has data we are sending no send to Rapid SOS which can then continuously confirm or inform this information to the local police Authority right right now this has to be continuously done in order to ensure that you are giving enough information to the local police authority to take necessary actions right so now key design decisions we went all through that right we saw how we integrate with other services we saw how to store it like why do we need to store it in the database how to support like how to use it to for like how to leverage it for your internal support system to take follow-ups how we are using reverse jio coding in order to get address rather than just sharing the latitude and longitude how we have to ensure a continuous streaming of location data being consumed by Kafka sent to emergency service and stored at rapid SOS and your internal database to keep an eye on it and this is how your design something like an SOS service now this is exactly what Uber did with their SOS service and this is this is basically taken verbatim from that particular part right now here key things to ensure that there is no single point of failure right you can very clearly see multiple servers of support multiple notifications multiple instances of emergency service we are using Kafka which gives us very nice reliability and availability location services multiple instances API Gateway itself is internally skilled we still use a managed API Gateway but it would be internally skilled so and repetition and basically rapid SOS is obviously assuming it's always up now some things that let's say due to any reason the consumers and emergency service is down which are not consuming it from Kafka because Kafka provides persistence the data would not be lost when it comes back up it would be again start consuming the data over here and taking the necessary actions right and none of the other things are broken worst case rapid soy system then what do you do if rapid SOS is done we can't do much about it right so that is where but obviously Uber might be having something they're not specified it in their job but they might be having something that the Uber internal support staff can directly communicate with few of their uh or can himself or herself dire 911 or 100 to inform that in to inform the local police Authority about that part because Uber internal support at least would have all of that information which is because why we are storing the location information not only with rapid SOS but also in the database right and this is exactly how Uber has implemented their emergency service and we see how critical some design decisions become like reverse geocoding why it is important because you just can't send that law right so yeah this is such an interesting system uh such a unique system to build but such important to ensure safety of customers and Uber does a fabulous job about it again this entire architecture is taken from Uber's engineering block which I have Linked In the description down below highly highly highly highly recommend you to check that out and yeah that is it that is it from me for this one I'll see you in the next one thanks [Music]