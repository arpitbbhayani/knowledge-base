so bittorrent is super popular when it comes to sharing and distributing large files over the network but what is the engineering behind it in this series we will dive deep into the world of bittorrent and understand various algorithms that power it along the way we would also try to write our own torrent client to get a deeper understanding in this first video of this bittorrent internal series we take a look at what is a p2p network what is bittorrent the core idea behind it how it makes download super fast and conclude with some terminologies that would acquaint us to do a deep dive later but before we move forward i'd like to talk to you about a course on system design that i have been running for over a year now the course is a cohort based course which means i won't be rambling a solution and it will not be a monologue instead a small focused group of 50 60 engineers every cohort will be brainstorming systems and designing it together this way we build a solid system and learn from each other's experiences the course to date is enrolled by 600 plus engineers spanning nine cohorts and 10 countries engineers from companies like google microsoft github slack facebook tesla yelp flipkart dream 11 and many many many more have taken this course and have some wonderful things to say the coolest part about the course is the depth we go into and the breath we cover we cover topics raging from real-time text communication for slack to designing our own toy load balancer to creek buses live text commentary to doing impressions counting at scale for any advertisement business in all we would cover roughly 28 questions and the detailed curriculum uh split week by week can be found on the course page which is linked in the description down below so if you're looking to learn system design from the first principles you will love this course i have two offerings for you the first one is the live cohort discourse which you see on the left side and the second one is the recorded course which you can see on the right side the live cover based course happens every two months and it will go on for eight weeks while the recorded course contains the recordings from one of the past cohorts as is if you are in a hurry and want to binge learn system design i would highly recommend you going for the recorded one otherwise the live code is where you can participate and discuss things live with me and the entire cohort and amplify your learnings the decision is totally up to you the course details prerequisites testimonials can be found on the course page at pitt binary dot me slash master class and i would highly recommend you to check that out i put the link of the course in the description down below so if you are interested to learn system design go for it check out the link in the description down below and i hope to see you in my next thanks so bittorrent is a peer-to-peer protocol that makes the distribution of large files easier faster and efficient we look at all three and how it happens first let's understand how we classically download files from the internet right and why do we even need something like bittorrent so your client request a file from the server server has the file and it responds right pretty simple downflow you can do it over http ftp and whatnot but things become very interesting when your download size is a little larger for example 300 mb let's say if you want to download a latest version of and debian os or ubuntu the file size is large so downloading that one big file from one server gets a little tricky and plus it gets a very uh it it becomes very slow so why server has a very limited bandwidth right so if more number of clients connect to it the download speed would slow down right second the speed of the data transfer is limited by the upload capacity of the server now now hear me out so in most cases you would see that hey when you check your internet connection you let's say see 100 mbps download speed but only 60 mbps upload speed right so let's say we're trying to download a file so what would this be dependent on so for example a wants to download a file from b b has upload speed of 60 a has download speed of 100 mbps but when a tries to download a file or basically do a file transfer from me although a can download it at 100 mbps but b can upload only at 60 mbps so no matter how big the download speed of a is sorry how large the download speed of a is it is limited by the upload speed of b and this is the core problem that bittorrent uh tries to address right so can we do better that is where peer-to-peer network comes in so in peer-to-peer network almost like every device can connect to every other device so what it tries to do is it tries to make downloads faster by leveraging the p2p capabilities so in what is a p2p network in a peer-to-peer network every single party basically every single machine participating in this network have the exact same capabilities so they are all equal peers and they can initiate conversation with each other right and the biggest highlight of p2p network is its robustness and when i say robustness it means that even if a few nodes crash or are removed from the network your network is still serving the use case it needs to so your system doesn't go down and it's not just about outage but also with respect to the core service that your network is spreading for example with bittorrent the role of a network is to serve the files that you need even if a couple of machines are down other machines would have those files and they would share it with the user that wants it right so there is no single point of failure there is no uh thing like service interruptions here if your network is stable enough right okay so p2p networks come in two flavors first is pure p2p network where literally there is no central entity where every node can connect to every other node but there is another type of p2p network called as hybrid p2p network in which there may be a central entity so for example you might want to store some meta information at a central location so that every peer can access it not the data itself but metadata so this central entity may provide some functionalities to the network so peer will still connect to each other but but basically periodically it may go to the central entity to fetch some some information right and this is this kind of architecture is what powers bittorrent so bittorrent is not pure p2p network bittorrent has a central entity called a tracker and the peers participating in the network they exist so they talk to each other but to understand whom to talk to they talk to the central entity which is called as a tracker we'll type deep deeper into the into tracker and implementing it uh throughout the series but you get the idea right okay so now comes the core idea of bittorrent so downloading a file from multiple machines concurrently this is what it tries to focus on so the we saw that that the download speed of a particular file is limited by the upload capacity of the sender be it a server beta user bit what not right so if you can download at 100 mbps but your upload can only happen at 60 mbps or is it the sender's upload can only happen 60 mbps the speed that max that you will get is 60 mbps right so can we do it better so this is where the idea is that instead of downloading the file from one machine what if i distribute this file across my network and i can connect to 50 different clients at the same time and download the same file together so this is the idea behind bittorrent so they are trying to solve problem for fast downloads second upload a load is distributed between peers right because now every peer might hold some fragment of the file and whoever wants it can the peer can send it out so you are still getting larger download speed and upload the load of the upload is distributed across the network right then large number of downloaders would only put a little extra load on each of the server because it's very distributed what would happen is let's say if i add large number of downloaders it does not mean like earlier if there was just one server serving the download then if there are 100 clients connecting the server needs those are all 100 clients it would be taxing on the server but now given that this is a big p2p network what would happen is whoever wants to download can talk to any peer at random to get the file chunk this would make that even if i had large number of downloaders your servers the one who are sending the information they are not over button because the load is evenly distributed across the network this this is superb and breaking the file into smaller chunk will boost concurrency so what would happen is your files is typically split into chunks and they've been distributed over the network and you know that i want this chunk i can go to this pair and get this chunk right and the this data is also evenly distributed so to make it very concurrent your you would not make connection to like you would not just make connection to one peer to download the file you will make connections to 50 peers in one shot to download all 50 chunks together you'll get much faster download speed and this is the beauty of bittorrent right so let me just walk you through a very simplified download flow right with bittorrent so what would happen is when a user wants to download a file it sniffs around the network to find the peers having the pieces of it for this it uses a tracker right so your user would first go to a tracker and say that hey i want this torrent or i want this file your tracker would send in the peers that contains the file or that has some information about the file right so this machine your view would then directly connect to the peer and download the file so user wants the file and let's say that file has four chunks right so it would go to the tracker and say hey i want to download this file and this file has these four chunks who to whom should i go to your tracker would response with hey these are the machines that you can go to the user will talk to the corresponding peers and download the corresponding chunk basic concatenate on the local machine and you have the entire file ready with you and this is how bittorrent makes your download super fast because it is currently making connections to a lot of different machines downloading the file and concatenating it locally right okay now let's take a look at nomenclatures and terminologies for that because this would be the heart and soul of the entire discussion of the entire series that we are going to have okay so first pieces and blocks so a file that you are putting it on the torrent network is split into pieces right and this space is the unit of transmission so you would say sorry this is how is what your peers would serve and this piece might be let's say 16 i'm just giving a random number we'll dive deep into what number it exactly is let's say 16 mbps right so each a server can serve a piece a piece can be 16 mb pick right a piece is further split into blocks and in one transfer a block is transferred so let's say block could be 16 uh a block would be basically 16 kb so a 16 mb piste is split into 1016 kb blocks right and this 16 kb blocks that you have is what you will transfer so in one shot so when i'm requesting something i'll get a block and when i get all the blocks of a piece i'll say i have this piece if any of the block is missing i'll not say that i have this piece because i'm i do not have the entire piece so peace is the is the is the unit of information that a server holds but to do a patient data transfer it downloads the blocks of the particular piece and then it concatenates it locally and by concatenating all the pieces it would have the particular file right so pieces is what a server holds and to do the transfer it transfers blocks out of it and then it says that hey now i own this particular piece right so for a server to hold a piece it needs to have all the blocks of that particular piece second is called as a peer set so peer set is a list of peers that can that it can send pieces to or it can request pieces from for example if peer set like let's say a wants to download a particular file i have five nodes a b c d e and if i let's say a wants to download a file a sphere set as given to it by tracker would be c and e which means that if a wants a file it can get from c and e right or if a wants to send a file it could send to c and e right so that's the peer set of a particular party in the bittorrent network third is an active peer set so active peers so pr set may be like i might have 50 nodes in my peer set but out of them only some of them would be active so what is an active peer set so although you might get 50 peers from the tracker you'll not be connecting to all 50 at once you'll be connecting to only some of them so it's a subset of peer set which you can send data to or you can receive data from and this is your active pset in which you are actively transferring the file so in order to in order to uh keep a check on the overall network traffic that happens within the network you might have a 50 node peer set but your active peer set might only be 10 which means actively you are connecting to just 10 peers to download a particular file or to upload a particular fact that is an active peer set right fourth is cedars and leechers very offensive term but it's not meant to be offensive better so in every torrent network you have cedars and you have leechers so what is a cedar seeder is something that holds or that has the file and it tries to seed it in the network so that any leecher in my network can get the file that it wants right so seeder seeds the content in the network while leecher basically tries or leisure is the one who is downloading the content from the seeder right so leecher is the state and once a leacher downloads the complete file it becomes a seeder right so large number of speeders would lead to a faster download speed as we can pull from multiples here so if a torrent only has one seeder would be a classic server client download use case but if you have large number of seeders and fewer leaders your download speed would be really fast and if your leeches are very like like you have large number of leeches and fewer seeders the download speed would take a hit right these were the important dominators which will come in handy in the coming videos of this particular series okay final two points that i would want to conclude on first is bittorrent is very popular friendly which means that the new and the popular files will have a lot of series for example a new version of an operating system just released there's a very high chance a lot of people would want to download it right so ubuntu or debian gives official torrent distribution and there would be a lot of seeders seeding the content in the network whoever wants to download it can talk to them and get the files downloaded so you'll have large number of seeders so when a file is new and popular you would get very fast downloads but once it becomes old or unpopular you would have fewer seeders so slower download so this is very popular friendly you would see in a torrent network when something is new and popular you will get very fast download speed otherwise it becomes too slow right now just to conclude few good applications of bittorrent although it is used for very illegal activities or illegal distribution of movies and musics and whatnot ah but bittorrent legal applications are super good first the way it started was to do linux distributions faster than ftp and http so because they are like 500 500 mb files or the iso images are big enough so to have faster download speed people use bittorrent to download the os to download the os image much faster second sending patches to user for example security patches so you might want to patch the servers in your network and you can have a small bittorrent protocol whose idea is like you put the file in one and your server automatically distributes the file across every single machine and they can then run the patches so massive data centers use bittorrent to power security patches third very interesting facebook uses bittorrent to power their massive massive deployments across servers because imagine if you have a binary that you want to deploy across thousands of servers everyone downloading from this would take so much time right so instead what it does it uses bit torrent splits up into multiple places and distributes it across the network they they internally converge and every single node would have the entire file eventually so deploying artifacts with this is a breeze and much much much faster and basically facebook uses it really really well we'll dive deep into the how to actually implement it what protocol it is how to contact tracker and download the file and lot more in basically throughout this series right so yeah that's it for this video i hope you found bittorrent introduction amusing if you did please like this video so uh apart from this i do i have anything else nope it's it's pretty much it right so that's it for this video as part of introduction if you guys like this video give this video a thumbs up if you guys like the channel give this channel a sub this is the first video of the bittorrent internal series and i'll see in the next one thanks again [Music]