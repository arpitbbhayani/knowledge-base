[
  {
    "id": 182,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "nYtAzzH-twM",
    "title": "Exploiting and stealing from the BitTorrent network",
    "description": "Stealing is bad, but in a P2P network, it is a cakewalk.\n\nIn this 7th video of the BitTorrent Internals series, we take a detailed look into various challenges that comes with a P2P network and dive deep into engineering hacks that could help us download our torrent faster and cheaper.\n\nOutline:\n\n00:00 Agenda\n02:21 Quick Overview\n05:11 Pretend to be a new peer\n08:45 Be greedy with piece selection\n10:08 Open connections with a large number of peers\n13:52 Pretend to upload",
    "img": "https://i.ytimg.com/vi/nYtAzzH-twM/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/1fih1TYYBONo0Dkdmx/giphy.gif",
    "duration": "18:35",
    "view_count": 460,
    "like_count": 19,
    "comment_count": 4,
    "released_at": "2022-08-19",
    "gist": "P2P networks are prone to exploitation as there is no central authority to keep track of the activity. BitTorrent is not different, and it is easy for Free Riders to exploit it.\n\n## Overview\n\nThe file is broken into pieces and peers download them piece-by-piece. Seeders are the peers that have the entire file and is uploading the pieces. Leechers are the nodes downloading the file and they talk to seeders and other leechers to complete the download.\n\n## Pretend to be a new peer\n\nWhen a peer joins the network, it talks to the tracker and the tracker sends a list of 50 peers it can talk to. Hence, by pretending to be the new peer, we may collect information about thousands of peers participating in the network.\n\nHaving information about a large number of peers in the network enables us to download the pieces faster as we can establish connections with many of them and initiate the download.\n\n## Being greedy with piece selection\n\n\nPeers in a BitTorrent network are supposed to follow the rarest-first policy through it prioritizes the download of the piece that is rarest in the work, but we choose to ignore that.\n\nWe can be greedy with the piece selection and download the pieces without any strategy and we grab whichever piece we get from our peers.\n\n## Pretend to upload\n\nPeriodically, peers in a BitTorrent network inform the tracker about their download and upload statistics. There is no way for the tracker to check if the peer has indeed done the mentioned work.\n\nHence, we share false bloated numbers with the tracker, making the tracker think we are a \"good\" peer that is uploading a lot in the network. With this, the tracker will give us a boost and share our IP with a new peer.\n\n### Uploading dummy data\n\nInstead of uploading the actual piece, we can also choose to upload dummy data. Although this is not free riding as we are uploading some information because it is not genuine, it is counted as free riding.\n\nThe clients upon receiving any piece do an MD5 verification and our dummy data will be caught in that. Peers may choose to block us if they see repetitive failures. Hence, this is risky but we can get a boost in the download speed due to reciprocation.",
    "notes_gd": "https://drive.google.com/file/d/1qG1mh2hu5P2V38wGilIr_Dyl5I0_tZD-/view?usp=sharing",
    "slug": "exploiting-and-stealing-from-the-bittorrent-network"
  },
  {
    "id": 181,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "_kCHOpINA5g",
    "title": "Kademlia - a Distributed Hash Table implementation to power the overlay network of BitTorrent",
    "description": "Kademlia is a Distributed Hash Table implementation and it is used as an overlay network for BitTorrent. Instead of talking about micro-details and how it is used in BitTorrent, today we spend time understanding Kademlia in depth.\n\nIn this video, we take a super detailed look into Distributed Hash Table implementation and we would see how it can power the routing of requests without having any central authority. We look at how data and nodes are represented, how it leverages XOR as a distance function, and how it always converges to the node we are looking for.\n\nOutline:\n\n00:00 Agenda\n02:38 Introduction to Kademlia\n05:22 Representation\n06:36 Ownership\n08:04 XOR Distance Metric\n12:33 Visualizing XOR Distance\n19:38 Routing and k-buckets\n31:41 Updating the Routing Table\n35:36 Communication Interface\n41:52 Performance Optimization",
    "img": "https://i.ytimg.com/vi/_kCHOpINA5g/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/3o6Mb4kPLwcTvUmQPC/giphy.gif",
    "duration": "45:26",
    "view_count": 924,
    "like_count": 46,
    "comment_count": 7,
    "released_at": "2022-08-17",
    "gist": "Kademlia is a P2P Distributed Hash Table implementation that distributes the KV stores across nodes in a network and retrieves them without any central authority/database.\n\n## Representation\n\nEvery node in the Kademlia network is identified by a unique 20-byte SHA-1 hash. The hash function is also used in reducing the key to be distributed to 20 byte unique id.\n\n## Ownership\n\nThe node closest to the key is the one that owns the key and is responsible for holding it. But to define which is the closest one, we need to define a distance metric that could quantify the distance between two entities.\n\n## Requirements from a distance metric\n\n1. distance between the node to itself should be 0\n2. distance between two nodes should be a positive number\n3. d(a, b) + d(b, c) >= d(a, c)\n\nany function that satisfies the above 3 can be used as a distance function.\n\n## XOR as a Distance Metric\n\nKademlia uses XOR as a distance metric and defines it as a simple XOR between the ID of the entities\n\n```\nd(a, b) = a XOR b\n```\n\nXOR can be used as a distance metric because\n\n1. a XOR a = 0\n2. a XOR b > 0\n3. d(a, b) + d(b, c) = a XOR b XOR b XOR c = a XOR c = d(a, c)\n\n### Visualizing distance\n\nXOR is not a usual distance we can measure, and hence it requires a special way to visualize. XOR tends to turn like bits to 0, so when we XOR two 160 bits numbers, the like bits will turn to 0.\n\nHence, the more common the prefix between the two 160-bit IDs, the smaller the resultant value, hence the shorter the distance. Thus we can visualize the distance between nodes by placing them in a complete binary tree.\n\nIn this complete binary tree, the nodes having shorter distances will be placed closer to each other. Instead of creating a tree with a depth of 160, the tree is constructed only to the point it minimally disambiguates the entity.\n\n## Routing\n\nBecause there is no central entity, nodes must know how to route requests among themselves such that they always converge to the right node.\n\nTo ensure this, every node in the network keeps track of a few nodes in its routing table. These are not random, but very strategic.\n\nEvery node knows at least one node in each subtree that it is not part of. This means that the routing table may not have the address of the desired node, but it can lead us to one of the nodes present in its subtree.\n\nBy following a greedy approach, the nodes can route us, step-by-step, to the desired node. This is a classic Overlay network with its own routing.\n\n### Updating routes\n\nWhen a node receives a message from any other node, it makes an entry in its routing table thus ensuring the table is auto-updated without any explicit intervention.",
    "notes_gd": "https://drive.google.com/file/d/1eNFBNbcsieL9eVThOVhN9Piu29PI6i7n/view?usp=sharing",
    "slug": "kademlia-a-distributed-hash-table-implementation-to-power-the-overlay-network-of-bittorrent"
  },
  {
    "id": 180,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "QSeex0YxReY",
    "title": "The Piece Selection algorithm that makes BitTorrent fault tolerant",
    "description": "Performance of the BitTorrent network relies heavily on the order in which the pieces are requested by the peers.\n\nIn this 5th video of the BitTorrent Internals series, we take a look at the piece selection algorithm BitTorrent uses and learn how it makes the network fault-tolerant while ensuring a fast download rate across the network.\n\nOutline:\n\n00:00 Agenda\n02:24 Why we need a Piece Selection algorithm\n05:13 Goal of Piece Selection algorithm\n05:53 Rarest-First Piece Selection Strategy\n07:42 Advantages of Rarest-First Piece Selection Strategy\n10:26 How does a peer compute the rarest piece\n13:50 Random First Policy\n16:25 Strict Priority Policy\n18:37 End Game Mode",
    "img": "https://i.ytimg.com/vi/QSeex0YxReY/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/kmRAjLgfaxezzv41OV/giphy.gif",
    "duration": "23:18",
    "view_count": 547,
    "like_count": 26,
    "comment_count": 3,
    "released_at": "2022-08-15",
    "gist": "In a BitTorrent network, the file is split into pieces and then distributed across the network. A piece is a unit of transmission and when a peer has all the pieces it concatenates them and re-creates the entire file.\n\n## Importance of Piece Selection strategy\n\nHaving a piece selection strategy is important because what if every single peer starts with the first piece first, this would increase the load on the peers/seeders that have them; thus reducing the speed of distribution.\n\nWhat if before anyone could download the last few pieces, the seeder (having all the pieces) leave the network? none of the lechers would be able to complete their download.\n\n## Rarest-first Piece Selection\n\nCore idea: prioritize the download of the piece that is the rarest in the network.\n\n### Advantages\n\n### Spreading the seed\n\nRarest-first piece selection strategy ensures only \"new\" pieces (that are with no other leechers) are downloaded from the seeder. We get a quick distribution of pieces in the network and a reduced load on the seeder.\n\n### Increases download speed\n\nSince more peers have a variety of pieces, they can quickly trade among themselves and complete downloads faster.\n\n### Enabling upload\n\nWhen a peer has a rare piece, every other peer would be interested in downloading it. Because of reciprocation, it would be frequently unchoked from others, getting a better download speed.\n\n### Preventing rarer missing piece\n\nBy prioritizing the download of the rarest pieces, we ensure that rare pieces do not go missing from the network even when the seeder leaves.\n\n## How to compute the rarest piece?\n\nThere are two ways to know which pieces the peers have\n\n1. `Have` messages: a peer in the network broadcasts the pieces it has\n2. `Bitfield` message: during the initial handshake, a peer sends a Bitfield message that contains the pieces that it holds.\n\nEvery peer maintains the piece availability across its peer set and uses it to compute the rarest piece.\n\n## Random First Policy\n\nWhen a peer joins a network, to proactively participate, it would need to get the first piece as soon as possible, and hence instead of picking the rarest first, it goes for random pieces.\n\n## Strict Priority Policy\n\nA file is split into pieces and a piece is split into blocks. Blocks are what get transferred. Hence, when a block of a piece is fetched, we prioritize downloading all the blocks of the same piece before moving on to the new one.\n\n## End Game Mode\n\nDownloading the last few pieces may take time and hence a peer. In the end game mode, a peer sends a request to all the peers for every block that is remaining.\n\nThe peers respond with the block and this completes the download faster.",
    "notes_gd": "https://drive.google.com/file/d/1lAM5ohzk87b5tC22HRJ4-Eesyg99W_0z/view?usp=sharing",
    "slug": "the-piece-selection-algorithm-that-makes-bittorrent-fault-tolerant"
  },
  {
    "id": 179,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "iognYJRzCE8",
    "title": "The Choke Algorithm that powers BitTorrent",
    "description": "One of the most important algorithm that powers BitTorrent is The Choke Algorithm\n\nIn this 4th video of the BitTorrent Internals series, we go deep and understand what the choke algorithm is, how it works, and most importantly how, without having a central authority, it ensures that no one abuses the P2P network.\n\nOutline:\n\n00:00 Agenda\n02:24 Core idea of peer selection\n04:53 Choking and Interested\n08:02 Finding peers to unchoke\n13:15 Choke algorithm for Leecher\n26:12 Choke algorithm for Seeder",
    "img": "https://i.ytimg.com/vi/iognYJRzCE8/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/1wmOyZYoGzz003R03Y/giphy.gif",
    "duration": "34:4",
    "view_count": 720,
    "like_count": 30,
    "comment_count": 16,
    "released_at": "2022-08-12",
    "gist": "In a P2P network, every peer would want to download the file as fast as possible but this would lead to a skewed load on some peers. BitTorrent addresses this using a reciprocation algorithm called Choke.\n\nThe choke algorithm ensures\n\n- maximum download speed to genuine peers\n- minimal network abuse by free riders\n\n## Free Riders\n\nFree riders are the peers in the network that exist only to download the files but they never upload anything to any peer. Hence they are consuming the network bandwidth without contributing back.\n\nThe Choke algorithm is hence designed in a way that penalizes such free riders.\n\n## Choking and Interested Peers\n\nChoking a temporary refusal to upload. We say that peer A has choked peer B when A refuses to upload/send data to B, but it still allows A to get data from B.\n\nWhen peer A wants to allow peer B to download the piece, we say that peer B is unchoked by peer A. We say that peer A is interested in peer B when it wants a piece of the file that peer B has.\n\n## How to find peers to unchoke?\n\nIf a peer unchokes every other peer, then everyone would want to download the file from it, and hence the peer would be overwhelmed. Thus, a peer always prioritizes unchoking a peer that offers the best download speed.\n\nThis prioritization is based on the principle of reciprocity wherein a peer will send data to the peers from whom it gets the data faster. This encourages peers to let others download from it and prevent free riders, who never upload, from abusing the network.\n\n## Choke algorithm for Leecher\n\nEvery 10 seconds, a leecher A orders the interested peers by their download rate to A, and the fastest 3 are unchoked. This is called regular unchoke. Unchoking is temporary, and after some time, an unchoked peer gets choked again by A.\n\n### Optimistic unchoke\n\nEvery 30 seconds, one additional interested peer is optimistically unchoked at random without any reciprocation. This\n\n- bootstraps new peers who do not have anything to share\n- provides new peers with some pieces to participate in the network\n- evaluates download capacity of newly joined peers\n\n## Choke algorithm for Seeder\n\nIf a peer is a Seeder, it unchokes the peers that were more recently unchoked. This ensures that free riders are not unchoked by the seeders and they rely on optimistic unchoke by leechers.\n\nIf the two peers have the same last unchoke time, the one with the higher download rate is given priority.\n\nFor the first 20 seconds, seeder\n\n- unchokes 3 peers as per the above sorting criteria\n- unchokes one peer at random to promote randomness\n\nFor the next 10 seconds, it unchokes the first 4 peers ordered by the sorting criteria ensuring minimal abuse.",
    "notes_gd": "https://drive.google.com/file/d/1VQXEeC8MBgKAzkEJ5HwOjBV5-H3br-Ey/view?usp=sharing",
    "slug": "the-choke-algorithm-that-powers-bittorrent"
  },
  {
    "id": 178,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "shVvFVFiZcs",
    "title": "Overview of the BitTorrent architecture",
    "description": "BitTorrent is superb, but what does its architecture look like?\n\nIn this 3rd video of the BitTorrent internals series, we take an in-depth look into its architecture and understand different components in it like - Tracker, Seeders, and Leechers, and learn how they work together to be this amazing file distribution network.\n\nOutline:\n\n00:00 Agenda\n02:22 Pieces\n04:50 Torrent File\n06:53 Tracker\n15:42 Architecture Overview\n18:12 Seeders and Leechers",
    "img": "https://i.ytimg.com/vi/shVvFVFiZcs/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/PPTiAIBXyIs2f62b1m/giphy.gif",
    "duration": "20:37",
    "view_count": 1170,
    "like_count": 58,
    "comment_count": 14,
    "released_at": "2022-08-10",
    "gist": "The BitTorrent Architecture BitTorrent architecture consists of the following entities\n\n- Torrent File\n- Tracker\n- Leecher\n- Seeders\n\nEach torrent is independent and it holds information about one or many files that need to be distributed. To download a specific file, we need to hunt its torrent file from any torrent search engine.\n\n## Pieces\n\nThe original file is split into equal size pieces and the SHA-1 of each piece is put into the `.torrent` file. The hash is then used by the peers to download the corresponding piece and once all the pieces are downloaded, they are merged to re-generate the file.\n\n## Tracker\n\nTracker is the only central entity and it holds the information about all the peers participating in the torrent network. It is a simple HTTP server that responds to the queries of the peers and stores status information coming in from the peers.\n\nEach torrent file holds a Tracker URL that helps the peers locate and talk to the tracker to participate in the torrent. The tracker keeps track of\n\n- peers who hold the pieces of the file\n- peers who are downloading\n- peers who need help to find other peers\n\nAlthough the tracker keeps track of a lot of information, it does not download or participate in the download of the actual content of the file; it simply holds the meta information.\n\n## Leecher\n\nLeecher is any peer in the network that is downloading the pieces and is awaiting the completion of the file. Leecher talks to the tracker to get the list of 50 peers and then talks to them to get the desired pieces.\n\nThe leechers also help other leechers by sharing the pieces they have, thus quickly distributing the file across the network.\n\n## Seeder\n\nSeeder is a peer in the network that has all the pieces of the file and does not need to download anything. So, if any leecher needs any piece that is not available with any other leecher, it can obtain from the seeder.\n\nA leecher, after completing the download of the entire file, becomes the seeder and continues to participate in the network.",
    "notes_gd": "https://drive.google.com/file/d/12NIH6eE6SlXSPkMdQP8jTKlu1Hz7-qMH/view?usp=sharing",
    "slug": "overview-of-the-bittorrent-architecture"
  },
  {
    "id": 177,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "tHT94dSMwKw",
    "title": "Understanding the Torrent File Format and Bencoding",
    "description": "To download or upload any file from the Torrent network, we need a .torrent file. But what exactly is this file?\n\nIn this 2nd video of the BitTorrent Internals series, we take a detailed look into the .torrent file and understand its lifecycle, what information it holds, and the encoding it uses to structure the data.\n\nOutline:\n\n00:00 Agenda\n02:27 Torrent File and its Lifecycle\n04:33 What is in the .torrent file?\n13:33 Bencoding\n\nGitHub Repository: https://github.com/relogX/retorrent",
    "img": "https://i.ytimg.com/vi/tHT94dSMwKw/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/69jvP3VXUYhr3YUYu9/giphy.gif",
    "duration": "20:40",
    "view_count": 1239,
    "like_count": 84,
    "comment_count": 18,
    "released_at": "2022-08-08",
    "gist": "A torrent file is an independent session of transfer. To distribute a file, say an Ubuntu image, we would create a torrent holding the meta information about it while the actual content is split into pieces and distributed in the network.\n\n## Lifecycle of a Torrent\n\nTorrent is alive so long as there is at least a seeder, seeding the pieces in the network. Once all the nodes who can share the pieces have left the network, the download of the network stops, and the torrent ends until a new seeder pops up.\n\n## What torrent file holds\n\nThe `.torrent` file holds all critical meta yet static information about the content, like\n\n- `announce` - holds the URL of the tracker\n- `created by` - name and version of the program who created it\n- `creation date` - time at which the torrent was created\n- `encoding` - encoding of the strings in `info` dictionary\n- `comment` - some additional comments\n- `info` - a dictionary that describes files in the torrent\n\nThe `info` dictionary holds the information about the file that is being shared through the torrent. If the torrent is about the Ubuntu image, it will hold info like `name`, `length`, and `md5sum` of the actual file.\n\nGiven that the file is split into equal-length pieces, the `info` dictionary also holds\n\n- `pieces` - SHA1 of every piece of the file concatenated\n- `piece length` - number of bytes in each piece\n\nThis information is used in identifying and fetching pieces from the network.\n\n## Bencoding\n\nTorrent files are encoded with a custom encoding called Bencoding. It supports data types such as Strings, Integers, List, and Dictionaries (which can only hold string keys).\n\nStrings are encoded as `<length>:<string>`. Hence, a string `arpit` will be encoded as `5:arpit`.\n\nIntegers are encoded as `i<integer>e`. Hence, an integer `10` will be encoded as `i10e`.\n\nLists are encoded as `l<becoded values>e`. Hence, the list `[\"a\",\"b\", 1 ]` will be encoded as `l1:a1:bi1e1`.\n\nDictionaries are encoded as `d<key1><value1><key2><value2>e`. Hence, a dictionary `{\"a\": 1, \"b\": 2}` will be encoded as `d1:ai1e1:bi2ee`.",
    "notes_gd": "https://drive.google.com/file/d/13TaIK98n1SpWTLfPVfmygYVMUCyMncbr/view?usp=sharing",
    "slug": "understanding-the-torrent-file-format-and-bencoding"
  },
  {
    "id": 176,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "v7cR0ZolaUA",
    "title": "Introduction to BitTorrent and the problem it beautifully solves",
    "description": "BitTorrent is super popular when it comes to sharing and distributing large files over the network. But what is the engineering behind it? In this series, we will dive deep into BitTorrent, and understand various algorithms that power it. Along the way, we would also try to write our own torrent client to get a deeper understanding.\n\nIn this 1st video of this series, we take a look at what are peer-to-peer networks, what is bit torrent, the core idea behind it, and how it makes downloads super-fast, and conclude with some terminologies that would acquaint us to do a deep dive later.\n\nOutline:\n\n00:00 Agenda\n02:43 Classic Download Flow\n04:50 P2P Networks\n07:19 Core Idea of BitTorrent\n11:15 Nomenclature and Terminologies\n16:03 BitTorrent is popular-friendly\n16:56 Applications of BitTorrent\n\nGitHub Repository: https://github.com/relogX/retorrent",
    "img": "https://i.ytimg.com/vi/v7cR0ZolaUA/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/3orieTgKq8mhhs17cA/giphy.gif",
    "duration": "19:24",
    "view_count": 3504,
    "like_count": 243,
    "comment_count": 34,
    "released_at": "2022-08-05",
    "gist": "BitTorrent is a peer-to-peer protocol that makes the distribution of large files easier, faster, and more efficient.\n\n## Need for BitTorrent\n\nTo download a file client makes a request to the server, and the server after processing the request responds with the file.\n\nAlthough the download is simple, it suffers from\n\n1. server's bandwidth is limited and more clients will overwhelm\n2. speed of transfer is limited by the upload capacity of the sender\n\nIs there a way where we can download the file faster? without overwhelming the server? P2P networks like BitTorrent solve this problem beautifully.\n\n## P2P Network\n\nA P2P network is a network of nodes called peers where each peer is equal and can initiate communication with any other peer. Such a network has no SPoF and hence even if we remove a node, the network continues to function.\n\nThere may be a central entity in the network to hold meta information but the core work is still done by the peers. Such a network is called a Hybrid P2P network.\n\n## Core Idea of BitTorrent\n\nBitTorrent is built on the principle of not downloading files from just one machine, instead, it encourages us to download pieces of the file concurrently from multiple machines.\n\n### Advantages\n\n- faster download\n- upload load gets distributed across\n- better utilization of download capacity of a machine\n- even when a large number of nodes join the network, the load is increased only by a small margin\n\n### Simplified Idea\n\nSplit the file into small pieces and distribute it across the network. Instead of downloading the complete file from one server, download the pieces of the files from different machines, concurrently.\n\n## Nomenclature\n\n### Pieces and Blocks\n\nThe film is split into equal-sized pieces, and each piece is further split into blocks. In one transfer a block is transferred but a node can only serve after it has the entire piece.\n\n### Peer Set\n\nEach peer maintains a list of peers to whom it can reach and download the pieces. Out of all the peers in the peer set, a node can only send data to a subset and this subset of peers is called Active Peer Set.\n\n### Seeders and Leechers\n\nA node having the complete file is a seeder while a node currently downloading the file is a leecher. A leecher can download the pieces from seeders or other leechers.\n\n## Popular friendly\n\nThe new and popular files will have a lot of seeders and hence a new node joining the cluster will be able to download them much faster. If the file is old and unpopular, there will be few seeders and hence we would see a slower download.\n\n## Applications of BitTorrent\n\n- distributing OS images across the network is faster\n- sending patches to machines quickly\n- powering deployments across a massive cluster of machines",
    "notes_gd": "https://drive.google.com/file/d/1hNOYmkFBb1ia0Myc6afrTB2kfwDyvQAE/view?usp=sharing",
    "slug": "introduction-to-bittorrent-and-the-problem-it-beautifully-solves"
  }
]