[
  {
    "id": 180,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "QSeex0YxReY",
    "title": "The Piece Selection algorithm that makes BitTorrent fault tolerant",
    "description": "Performance of the BitTorrent network relies heavily on the order in which the pieces are requested by the peers.\n\nIn this 5th video of the BitTorrent Internals series, we take a look at the piece selection algorithm BitTorrent uses and learn how it makes the network fault-tolerant while ensuring a fast download rate across the network.\n\nOutline:\n\n00:00 Agenda\n02:24 Why we need a Piece Selection algorithm\n05:13 Goal of Piece Selection algorithm\n05:53 Rarest-First Piece Selection Strategy\n07:42 Advantages of Rarest-First Piece Selection Strategy\n10:26 How does a peer compute the rarest piece\n13:50 Random First Policy\n16:25 Strict Priority Policy\n18:37 End Game Mode",
    "img": "https://i.ytimg.com/vi/QSeex0YxReY/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/kmRAjLgfaxezzv41OV/giphy.gif",
    "duration": "23:18",
    "view_count": 143,
    "like_count": 8,
    "comment_count": 1,
    "released_at": "2022-08-15",
    "gist": "",
    "notes_gd": "https://drive.google.com/file/d/1lAM5ohzk87b5tC22HRJ4-Eesyg99W_0z/view?usp=sharing",
    "slug": "the-piece-selection-algorithm-that-makes-bittorrent-fault-tolerant"
  },
  {
    "id": 179,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "iognYJRzCE8",
    "title": "The Choke Algorithm that powers BitTorrent",
    "description": "One of the most important algorithm that powers BitTorrent is The Choke Algorithm\n\nIn this 4th video of the BitTorrent Internals series, we go deep and understand what the choke algorithm is, how it works, and most importantly how, without having a central authority, it ensures that no one abuses the P2P network.\n\nOutline:\n\n00:00 Agenda\n02:24 Core idea of peer selection\n04:53 Choking and Interested\n08:02 Finding peers to unchoke\n13:15 Choke algorithm for Leecher\n26:12 Choke algorithm for Seeder",
    "img": "https://i.ytimg.com/vi/iognYJRzCE8/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/1wmOyZYoGzz003R03Y/giphy.gif",
    "duration": "34:4",
    "view_count": 270,
    "like_count": 13,
    "comment_count": 10,
    "released_at": "2022-08-12",
    "gist": "In a P2P network, every peer would want to download the file as fast as possible but this would lead to a skewed load on some peers. BitTorrent addresses this using a reciprocation algorithm called Choke.\n\nThe choke algorithm ensures\n\n- maximum download speed to genuine peers\n- minimal network abuse by free riders\n\n## Free Riders\n\nFree riders are the peers in the network that exist only to download the files but they never upload anything to any peer. Hence they are consuming the network bandwidth without contributing back.\n\nThe Choke algorithm is hence designed in a way that penalizes such free riders.\n\n## Choking and Interested Peers\n\nChoking a temporary refusal to upload. We say that peer A has choked peer B when A refuses to upload/send data to B, but it still allows A to get data from B.\n\nWhen peer A wants to allow peer B to download the piece, we say that peer B is unchoked by peer A. We say that peer A is interested in peer B when it wants a piece of the file that peer B has.\n\n## How to find peers to unchoke?\n\nIf a peer unchokes every other peer, then everyone would want to download the file from it, and hence the peer would be overwhelmed. Thus, a peer always prioritizes unchoking a peer that offers the best download speed.\n\nThis prioritization is based on the principle of reciprocity wherein a peer will send data to the peers from whom it gets the data faster. This encourages peers to let others download from it and prevent free riders, who never upload, from abusing the network.\n\n## Choke algorithm for Leecher\n\nEvery 10 seconds, a leecher A orders the interested peers by their download rate to A, and the fastest 3 are unchoked. This is called regular unchoke. Unchoking is temporary, and after some time, an unchoked peer gets choked again by A.\n\n### Optimistic unchoke\n\nEvery 30 seconds, one additional interested peer is optimistically unchoked at random without any reciprocation. This\n\n- bootstraps new peers who do not have anything to share\n- provides new peers with some pieces to participate in the network\n- evaluates download capacity of newly joined peers\n\n## Choke algorithm for Seeder\n\nIf a peer is a Seeder, it unchokes the peers that were more recently unchoked. This ensures that free riders are not unchoked by the seeders and they rely on optimistic unchoke by leechers.\n\nIf the two peers have the same last unchoke time, the one with the higher download rate is given priority.\n\nFor the first 20 seconds, seeder\n\n- unchokes 3 peers as per the above sorting criteria\n- unchokes one peer at random to promote randomness\n\nFor the next 10 seconds, it unchokes the first 4 peers ordered by the sorting criteria ensuring minimal abuse.",
    "notes_gd": "https://drive.google.com/file/d/1VQXEeC8MBgKAzkEJ5HwOjBV5-H3br-Ey/view?usp=sharing",
    "slug": "the-choke-algorithm-that-powers-bittorrent"
  },
  {
    "id": 178,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "shVvFVFiZcs",
    "title": "Overview of the BitTorrent architecture",
    "description": "BitTorrent is superb, but what does its architecture look like?\n\nIn this 3rd video of the BitTorrent internals series, we take an in-depth look into its architecture and understand different components in it like - Tracker, Seeders, and Leechers, and learn how they work together to be this amazing file distribution network.\n\nOutline:\n\n00:00 Agenda\n02:22 Pieces\n04:50 Torrent File\n06:53 Tracker\n15:42 Architecture Overview\n18:12 Seeders and Leechers",
    "img": "https://i.ytimg.com/vi/shVvFVFiZcs/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/PPTiAIBXyIs2f62b1m/giphy.gif",
    "duration": "20:37",
    "view_count": 665,
    "like_count": 36,
    "comment_count": 9,
    "released_at": "2022-08-10",
    "gist": "The BitTorrent Architecture BitTorrent architecture consists of the following entities\n\n- Torrent File\n- Tracker\n- Leecher\n- Seeders\n\nEach torrent is independent and it holds information about one or many files that need to be distributed. To download a specific file, we need to hunt its torrent file from any torrent search engine.\n\n## Pieces\n\nThe original file is split into equal size pieces and the SHA-1 of each piece is put into the `.torrent` file. The hash is then used by the peers to download the corresponding piece and once all the pieces are downloaded, they are merged to re-generate the file.\n\n## Tracker\n\nTracker is the only central entity and it holds the information about all the peers participating in the torrent network. It is a simple HTTP server that responds to the queries of the peers and stores status information coming in from the peers.\n\nEach torrent file holds a Tracker URL that helps the peers locate and talk to the tracker to participate in the torrent. The tracker keeps track of\n\n- peers who hold the pieces of the file\n- peers who are downloading\n- peers who need help to find other peers\n\nAlthough the tracker keeps track of a lot of information, it does not download or participate in the download of the actual content of the file; it simply holds the meta information.\n\n## Leecher\n\nLeecher is any peer in the network that is downloading the pieces and is awaiting the completion of the file. Leecher talks to the tracker to get the list of 50 peers and then talks to them to get the desired pieces.\n\nThe leechers also help other leechers by sharing the pieces they have, thus quickly distributing the file across the network.\n\n## Seeder\n\nSeeder is a peer in the network that has all the pieces of the file and does not need to download anything. So, if any leecher needs any piece that is not available with any other leecher, it can obtain from the seeder.\n\nA leecher, after completing the download of the entire file, becomes the seeder and continues to participate in the network.",
    "notes_gd": "https://drive.google.com/file/d/12NIH6eE6SlXSPkMdQP8jTKlu1Hz7-qMH/view?usp=sharing",
    "slug": "overview-of-the-bittorrent-architecture"
  },
  {
    "id": 177,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "tHT94dSMwKw",
    "title": "Understanding the Torrent File Format and Bencoding",
    "description": "To download or upload any file from the Torrent network, we need a .torrent file. But what exactly is this file?\n\nIn this 2nd video of the BitTorrent Internals series, we take a detailed look into the .torrent file and understand its lifecycle, what information it holds, and the encoding it uses to structure the data.\n\nOutline:\n\n00:00 Agenda\n02:27 Torrent File and its Lifecycle\n04:33 What is in the .torrent file?\n13:33 Bencoding\n\nGitHub Repository: https://github.com/relogX/retorrent",
    "img": "https://i.ytimg.com/vi/tHT94dSMwKw/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/69jvP3VXUYhr3YUYu9/giphy.gif",
    "duration": "20:40",
    "view_count": 588,
    "like_count": 39,
    "comment_count": 13,
    "released_at": "2022-08-08",
    "gist": "A torrent file is an independent session of transfer. To distribute a file, say Ubuntu, image we would create a torrent holding the meta information about it while the actual content is split into pieces and distributed in the network.\n\n## Lifecycle of a Torrent\n\nTorrent is alive so long as there is at least a seeder, seeding the pieces in the network. Once all the nodes who can share the pieces have left the network, the download of the network stops and the torrent ends until a new seeder pops up.\n\n## What torrent file holds\n\nThe `.torrent` file holds all critical meta yet static information about the content, like\n\n- `announce` - holds the URL of the tracker\n- `created by` - name and version of the program who created it\n- `creation date` - time at which the torrent was created\n- `encoding` - encoding of the strings in `info` dictionary\n- `comment` - some additional comments\n- `info` - a dictionary that describes files in the torrent\n\nThe `info` dictionary holds the information about the file that is being shared through the torrent. If the torrent is about the Ubuntu image, it will hold info like `name`, `length`, and `md5sum` of the actual file.\n\nGiven that the file is split into equal-length pieces, the `info` dictionary also holds\n\n- `pieces` - SHA1 of every piece of the file concatenated\n- `piece length` - number of bytes in each piece\n\nThis information is used in identifying and fetching pieces from the network.\n\n## Bencoding\n\nTorrent files are encoded with a custom encoding called Bencoding. It supports data types such as Strings, Integers, List, and Dictionaries (can only hold string keys).\n\nStrings are encoded as `<length>:<string>`. Hence, a string `arpit` will be encoded as `5:arpit`.\n\nIntegers are encoded as `i<integer>e`. Hence, an integer `10` will be encoded as `i10e`.\n\nLists are encoded as `l<becoded values>e`. Hence, the list `[\"a\",\"b\", 1 ]` will be encoded as `l1:a1:bi1e1`.\n\nDictionaries are encoded as `d<key1><value1><key2><value2>e`. Hence, a dictionary `{\"a\": 1, \"b\": 2}` will be encoded as `d1:ai1e1:bi2ee`.",
    "notes_gd": "https://drive.google.com/file/d/13TaIK98n1SpWTLfPVfmygYVMUCyMncbr/view?usp=sharing",
    "slug": "understanding-the-torrent-file-format-and-bencoding"
  },
  {
    "id": 176,
    "topic": {
      "id": 0,
      "uid": "bittorrent-internals",
      "name": "BitTorrent Internals",
      "one_liner": null,
      "youtube_playlist_id": "PLsdq-3Z1EPT1rNeq2GXpnivaWINnOaCd0",
      "bgcolor": "#FFF1DB",
      "themecolor": "#E1A547",
      "course_url": "https://courses.arpitbhayani.me/bittorrent-internals/"
    },
    "yt_video_id": "v7cR0ZolaUA",
    "title": "Introduction to BitTorrent and the problem it beautifully solves",
    "description": "BitTorrent is super popular when it comes to sharing and distributing large files over the network. But what is the engineering behind it? In this series, we will dive deep into BitTorrent, and understand various algorithms that power it. Along the way, we would also try to write our own torrent client to get a deeper understanding.\n\nIn this 1st video of this series, we take a look at what are peer-to-peer networks, what is bit torrent, the core idea behind it, and how it makes downloads super-fast, and conclude with some terminologies that would acquaint us to do a deep dive later.\n\nOutline:\n\n00:00 Agenda\n02:43 Classic Download Flow\n04:50 P2P Networks\n07:19 Core Idea of BitTorrent\n11:15 Nomenclature and Terminologies\n16:03 BitTorrent is popular-friendly\n16:56 Applications of BitTorrent\n\nGitHub Repository: https://github.com/relogX/retorrent",
    "img": "https://i.ytimg.com/vi/v7cR0ZolaUA/mqdefault.jpg",
    "gif": "https://media.giphy.com/media/l3vR71WRpZKNIwEMw/giphy.gif",
    "duration": "19:24",
    "view_count": 1929,
    "like_count": 149,
    "comment_count": 26,
    "released_at": "2022-08-05",
    "gist": "",
    "notes_gd": "https://drive.google.com/file/d/1hNOYmkFBb1ia0Myc6afrTB2kfwDyvQAE/view?usp=sharing",
    "slug": "introduction-to-bittorrent-and-the-problem-it-beautifully-solves"
  }
]