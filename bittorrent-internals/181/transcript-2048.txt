thanks, so to get information about the peers, a node in a bit torrent talks to a central entity named tracker.
so if, like, bittorrent can be implemented with a central entity called tracker or you, or it can go pure p2p with by using an overlay network, uh, that is implemented using kadamlia, right.
so cademia is an implementation of a distributed hash table: hashtable, simple key value pairs- right, but if one node is not enough to handle a lot of data, what do we do?
so we would have a lot of nodes in our network and they are all storing some bunch of key value pairs.
let's say, i want to get a particular key value pair request can come to any node and that node needs to know who to talk to to reach to the node that holds the particular key value pair.
right, instead of going deep into bittorrent part of it, we'll talk about this raw distributed hash table implementation, which you can leverage and extend across hundreds of use cases out there, right?
so how is every node and a key participating in this dht, in this distributed hash table they are represented by.
okay, so every node or every data in this dht implementation is gets a unique 160 bit or 20 byte id.
you can take the node ip, pass it through the hash function and the ha and it would spit out a sha 1, uh, 160 by 160 bit hash, or you can take the key that you are storing, pass it to the hash function.
so any network, any pure p2p implementation, needs to first solve the problem of ownership, as in given a key, given a node, or given a key and a set of node, which node would this key reside on?
right, how would we know which is the closest node?
right, and this is where we need a way to define the distance metric.
so there has to be a very smart way to define a distance metric that would help us tell: hey, for this particular key, out of this three n nodes, or out of these three nodes, node one is the closest one.
so my key k1 would be placed at node n1, right.
in order to find a closest node, we need a distance metric that quantifies the closeness.
first of all, is distance of the point to itself is equal to zero, right?
so what kademiya uses, kardemla uses a brilliant approach: condemn layer uses xor, raw, simple, fast, efficient xor function in order to define the distance between the two node.
so it satisfies all the three requirements that we wanted from our distance function, which is basically simple euclidean geometry, right?
so this shows that we can use xor as a distance metric, right, and which is exactly what cut api uses.
so, given that we have distance metric based on xor, let's see how we can visualize it.
my key, my node n2, is having id of 5, so 0, 1, 0, 1, right.
so when i have this, so in order to find which node owns the key ka, i have to take, i have to find distance from ka to n1, ka to n2, right.
hey, these two are actually close to each other, right, so we can visualize the distance metric that we were talking about in a try.
but if i have not seen any key, that is one, one, zero, something, i can just place my n one into the, into the shortest path possible, right?
now if i want to place this, instead of having a complete binary tree, what we would have to do is we would just place it as at the smallest height possible, right, such that it disembed, that it disambiguates itself from the other nodes, right.
so instead of having the entire like, instead of you needing to travel entire 160 bit, just keep it at a shortest disambiguated path possible, right, and that's the idea.
so with this, you, and also, if a particular sub tree does not have any node or any key placed in there, you don't even need to construct it.
so, let's say, if you would want to fire, get key k5, and you fired this request to node n1.
now node 1 needs to know where this request should be forwarded to, right?
so somehow you need to find where to send this request to right.
so somehow i need to know where to forward the request to right.
and this is what the key problem that your routing needs to solve: that no matter which key is requested, it would always take you in the right direction and take you to the node that would store the corresponding key that you are looking for, right?
every node in the network knows at least one node in each of the subtree that it is not part of right.
so, for example, if i'm talking about node n1, which is at, which is having the 4 bit ids, 0, 1 0, 0 right, 0 1 0, 0, that's the id of node n 1.
so node n 1 would need to keep track of three sub trees that it is not part of.
so the entire sub tree that starts with one it needs to have- at least it needs to have- contact in at least one of the node in that gigantic subtree that starts with one right.
the sub 3 that it left out is 0, 0, so it would need to have at least one contact in zero, zero, the entire sub tree that start with zero, zero, anyone, any one node, any.
uh, a contact with any one node in this sub tree is fine, right.
then it has zero, one, 0, so, which means the sub tree that is left is 0, 1, 1, so it needs to have one contact in subtree that has prefix 0 1, 1.
so let's say we are node n, one which is stored at zero, zero, zero, zero, which is the extreme right node in my uh, in my uh network right or in this binary tree right extreme right node, and i have n2 where i have to talk to.
n1 doesn't directly know n2, right, but i want a key that is there with n2 and n2 is 1, 1, 1, 1, which is the extreme left node right.
so now here, because they don't directly know each other, we need to have a way to route the request.
suppose you have a contact there, right, you would need to have contact in one of two, at least one of the node in that subtree.
it would be one, one, right, and this node would have a contact in that sub tree because it's its responsibility to have it right.
so this node might forward your request to nb, which is storing at one, one, zero one, because it is part of that subtree.
and then let's say this nb node directly has a contact with n2, which is 1, 1, 1, 1, so it can directly send your request to n2.
and this is the beauty of this design: that you would always converge to the node that you are looking for, because every node keeps every node in its routing table- would have information about the node, that at least one node that it is not part of its own sub tree.
so the responsibility of the node is to either give you the key value that you're looking for or give out the ipa test the machine where you can go to right.
so here, because of the enforcement that we did, that every node needs to have a contact to at least one node in all the sub trees that it is not part of this means that we would always converge upon the node that we are looking for without ever digressing, and this is such a beautiful deterministic routing logic in a pure p2p network.
okay, so now, given this, what we know, that each node would need to keep track of a small subset of nodes that it would talk to and it would put it in its routing table.
but the official paper says that, hey, ip, udp, port and node id, which obviously you need to have ip and node id with you, but udptc, it's up to your implementation, right?
right now, you would say, if i just store one node from each of the subtree, what if that node goes down, which is where what kadamlia says is, instead of storing one, they call it k buckets.
so for each sub tree, for each subtree prefix that you are ensuring a connection to, what you need to do is, instead of having one node, you would store k nodes for that.
so for each sub tree, have k contacts in it right and each of the k bucket.
so for each node, for each subtree prefix, the k bucket is sorted by time, which means that most recently seen item sits at the tail of it and the least recently seen sits at the head, right.
so for each prefix, for each sub, for each node, for each subtree prefix, the k buckets is sorted by time: most recent at the tail, least listened at the head, right now.
we defined a routing strategy, right, we know how it always converges.
if a node joins and leaves the system or a new path is taken, our routing table needs to be updated.
very simple idea: whenever a node receives any message from any other node in the network, any other node in the network, it updates its appropriate k bucket with the node id, right?
so, for example, if i am node n one and i never received a message from n a, if i receive that message then i would update my routing table with an a's information in it into the corresponding k bucket, right?
so if a node, for the first time, talks to me, i'll make an entry into my k packet, right?
this way, the routing table across the entire network keeps updated so long as there are messages flowing through the nodes.
if my least recently scene node responds, i would keep it and discard the new node, right, okay?
right, this is the find node implementation.
you need to expose like, given a key, give me the value.
it would respond with the value that you are looking for, right, again a clarification, or again just reiteration of that that intermediate nodes do not forward the request.
right now, let's talk about storing of key value.
so to store now- let's say you would want to store something like you would want to store a key value in this p2p network- you cannot now implementations would vary, right?
but however you'd want to implement for your use case, it's up to you, right?
for example, some use cases might say: hey, i would store this key value only at this one node, i would not store it at any other route.
a node locates k closest node and sends them store rpc request, right?
like your use case, your implementation, right, and this way, what you would see is that a key value pair is stored across all the nodes in your network, right, okay, so now the implementation.
right, so you can optionally cache the key value along the chain so that you don't have to always go to the to the target, to the actual target node, to get it.
no matter if node goes down or something happens, you would still have your key value persisted across the network, right and again, the usage varies as per the use case.