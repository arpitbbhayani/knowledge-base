so one of the most important algorithms that power bit torrent is the choke algorithm. in this fourth video of the BitTorrent internal series, we go deep and understand what the choke algorithm is, how it works and, most importantly, how, without having a central Authority, it ensures that no one abuses the P2P network. but before we move forward, I'd like to talk to you about a portion system design that I have been running for over a year now. the course is a cohort based course, which means I won't be rambling a solution and it will not be a monologue. instead, a small focus group of 50- 16 genus every cohort- will be brainstorming systems and designing it together. this way, we build a solid system and learn from each other's experiences. the course to date is Android by 600 plus Engineers spending nine cohorts and 10 countries. Engineers from companies like Google, Microsoft, GitHub, slack, Facebook, Tesla, Yelp, Flipkart, drip 11 and many, many more have taken this course and have some wonderful things to say. the coolest part about the course is the depth we go into and the breadth we cover. we cover topics ranging from Real Time text communication for slack to designing our own toy load balancer, to Quick buses, live text commentary to doing impressions, counting at scale for any advertisement business. in all we would cover roughly 28 questions and the detailed curriculum, uh split week by week, can be found on the course page, which is linked in the description down below. so if you are looking to learn system design from the first principles, you will love this course. I have two offerings for you. the first one is the live cohort, viscose, which you see on the left side, and the second one is the recorded course, which you can see on the right side. the Live code base course happens every two months and it will go on for eight weeks, while the recorded course contains the recordings from one of the past cohorts, as is. if you are in a hurry and want to bench learn system design, I would highly recommend you going for the recorded one. otherwise, the Live code is where you can participate and discuss things, live with me and the entire cohort and amplify your learnings. the decision is totally up to you. the course details, prerequisites, testimonials can be found on the course pagemary dot me. slash masterclass and I would highly recommend you to check that out. I put the link of the course in the description down below. so if you are interested to learn system design, go for it. check out the link in the description down below and I hope to see you in my next cohort. so BitTorrent is a P2P Network, which is what makes it very special, because it does not have a central resource allocation unit. for example, it does not have a place which tells you it does not have a unit that tells you, hey, go and download this from this exact peer, or go and do exactly this, or you stop doing this, right? so there is no master, or there is no ring master in your network, given that it becomes very interesting on how, where equal peers that you have in the network, they talk to each other and formulate a way that maximizes the download speed for everyone and, second, that it prevents anyone from abusing the network. such a brilliant problem to solve and p2b, and basically BitTorrent solves it very beautifully using something called as a choke algorithm. so it's a very natural tendency for any and every peer to download things as fast as possible. we have to stop that from happening, right? so the core idea of Choke algorithm is based on tit-for-tat or reciprocation. basically it's about saying that, hey, you give me something, then only I'll give you something. it's all about reciprocation, because if you are not reciprocating, rather if you are only downloading and not uploading, then you should see a very less download speed, right? otherwise you are just wasting or you are just consuming a lot of resources of the network without giving anything back to the network, right? so this is what a free rider problem is. so Free Riders are the peers in the network who only download but never upload any content to the network, right? so it's like when you would want to download a particular torrent, you downloaded it and you deleted the torrent, so that you are saving your upload bandwidth of your internet or or of your or of your, basically, internet package and whatnot. you don't want to upload, so that's a free rider, and what network has to do is it has to penalize them. otherwise, if there are a lot of Free Riders in the network, it's a very bad thing for the network, because everyone is just downloading from it. no one's giving back. so file distribution across the network would take a lot of time. so that's why your allocation strategy cannot be very simple. hey, whoever requests the file, just give it to them now. if you do that, then machine would be under very heavy load. you don't want to do that right. that's why the entire idea should be based on reciprocation. so that's where I want to introduce two Notions to you. it first is called choking and second is called interested. so choking is a temporary refusal to upload, for example, that we say that a PR a. let's say we have two peers, uh, A and B. we say that PR a has choked P or B Because prb is unable to download file from pra. so PR a has choked prb, which means that if B wants a file from a, a would not give it because B is choked. right. so we say that b is choked where B is choked by a, when a does not upload any file to B, right. so that's why B is choked right now. but if B is joke, which means a cannot sign file to B, it does not mean that a cannot download the file from B. so a is allowed to download the file from B, but a chokes B, which means a would not send any file to B, right? so this is what the idea of choking is. so when we say a particular person is choked to buy another peer, which means that upload is prohibited, but you are allowed to still download the file, right, okay, but joking. why? why? why do we want to choke? first of all, if you don't choke, then what would happen is your network would see a lot of traffic and a lot of congestion and it would put unnecessary load onto your actual physical layer of the network. so TCP congestion is a real thing and you would see this amplifying in a P2P network if there is no choking, right? so you would have to explicitly slow down on the rate of consumption across a network, otherwise lot of packet exchange would happen in your TCP would choke out. then, second is to prevent Network abuse and starvation. we will talk about this in depth, right? okay? so choking and unchoking. now, this is an important point to remember. choking and unchoking aren't Perpetual, which means it would not happen forever. it's very periodic. so there is every like. basically, there is a period of 10 seconds. after a bunch of period, the network or the peers are choked and then unchoked, and then choked again and then installed again. so this is very periodic. it's not that if I choke someone it would be perpetually choked, right? so understand this that everything is periodic. in a BitTorrent Network, nothing is Perpetual, right, okay? second notion is interested, we say, or a p. an interested peer is someone who wants a piece that you have. for example, if a wants a piece P1 and the piece P1 is held by B, so we say that a is interested in b because a wants P1 and B has P1, so a would send me that, hey, I am interested in you, give me this piece, right? so that is the notion of interested. these two are very important notion that would formulate the chokes algorithm. okay now, given that we, when we join the network, we first go to tracker, tracker sensors, 50 pure list. but how would we know whom to unchoke? because, by default, everyone is choked. right, by default, Sorry, by default you are choking everyone, which means you are not uploading from anyone, and everyone is choking you by default, right to minimize the TCP congestion. so, first it, everyone is choked. now how would you decide whom to unchoke? there has to be something. there has to be something that says: hey, I am like prb, I am unchoking you, so now you can upload. now you want a file, I will send it to you, right? someone has to answer. but how would you decide? this is where reciprocity comes in. so you have to favor, so you give me something, I'll give you something. so what would happen? a simple example: say a is choked, say a is choked by B. that is, a is choked by B, which means a is choked, so it cannot get. it cannot get any piece from B, right. B wanted a piece from a and since a gave that piece to b, b unchokes a. so what has happened is a first of all a is choked by B, which means a wants a piece. B would not give it to a, right. B has that piece, but we would not give it to a. but B wanted a piece that a had. a had a piece that b wanted, so a send that piece to B. now that we got that piece from a, b would. because you gave me this piece, I am unchoking you. so now the piece that you want from me, you can. I I'll give that piece to you. and this is a very simple notion of reciprocity and this is just done at a very massive scale, right? so you give me something, then only I'll give you something. is the is the plan that everyone goes in, and obviously you can very well foresee a deadlock coming in, but there is a way to solve it, called optimistic, uh, unchoking. we'll talk about that. so again, just to reiterate: a is choked by B, so a wants a piece that B has. B is not sending it to a because a is choked by B right now. B wants a piece that a has. a is benevolent. a sends a piece to B because a has sent the piece to B. now B says that, hey, because you, you gave me the piece that I wanted. I'm unchoking you for some time so you can get the piece that I have and that you wanted, right? this idea of reciprocity is very crucial for choking algorithm. okay, so there may be thousands of nodes in the Swarm in your network, but a few of them are randomly picked by tracker as a peers of you. so when you go to the tracker, it sends you 50 list. obviously there may be thousands of networks or the sorry thousands of peers in the network, right? so how would you find which peers to choke and unchoke? a very simple thing that you may think of: hey, let me go with the download rate, so I'll unchoke a person that gives me the best download rate. right, that would be the very basic thing, because that's a very static metric that you have and you'll think, hey, because you, as a peer, want to download the fastest, so you will would want to, so you would want to get the file as fast as possible. so you would be giving the data to someone who would give you the data much faster, right? very simple reciprocation. so any peer will upload to the peers who give them the best download rate, correct, otherwise your download would be slow, right? so this is a very natural tendency. this is the notion of reciprocity. so if there are three machines, one could give me a 10 Mbps, one can give me with 20 Mbps and one can give me with 2 Mbps. who would I give data to? so the 10 and 20, and not to that two or three Mbps person, right? I will upload to peers who give me the best downloading so that my file is getting downloaded much faster. this- this is very important- of an ocean. so what this does is this encourages peers to let others download right, because what would happen is now that if you would want the best download rate, you would have to give data to them, otherwise you'll get slower download. right, correct, because you will get slower download. you don't want that. you want pass download rate. so that's why it would encourage you to share your data with others, and it would prohibit Free Riders that never upload, because if you are never uploading, no one is unchoking you, so you'll never get anything to download. correct, and this is the beauty of P2P algorithms: it's very, you know, it's, it's very human-like, like, and that's the best part of this, of this algorithm, well, I, I loved when I was diving deep into it. okay, so jokes algorithm: uh, like we know, that appear in the network, can be a cedar or it can be a leader. joke algorithm is separate: when your peer is in a Leisure State and will appear when he's in a cedar State. we'll talk about jokes algorithm when in when a peer is in a leecher state, right, which means when the peer is downloading at that time, how choke algorithm works? okay. so hold on, it's a very, uh, it's a, it's a, it's a, it's a very, uh, complicated, not really complicated, but a very, a very Tangled algorithm, right, understand different use cases and how it handles it. well, okay. so when in Leisure State, the choke algorithm is invoked every 10 seconds, 10 seconds is this unit of period, right? so we say three period time, which means it would be 30 seconds. four period times means 40 seconds, so 10 second is the. is the unit of. is the duration of a period in a BitTorrent Network, right? so this algorithm is invoked every 10 seconds or every time a peer leaves a peer set. so, for example, if I have a peer set and if someone leaves it, which means that that peer got disconnected or I got a new peer set or anything happened, if any time a peer leaves appear set, this algorithm is invoked. and every time someone says that, hey, I'm interested in you or you, or someone says I'm not interested in you, this algorithm is again invoked. right, because what would happen is because of interested like, if like say I am a, and if someone says I'm interested in you, which means that I have a piece that that person wants, so if I give that person that piece, then that would person would allow me to download something. reciprocation, right. so every time someone is interested in you, which means that you are increasing your chances of having a faster download by unchocking others, right? okay? step number one: every 10 seconds, pra orders the interested remote peers by the download rate. right, because that is the only static material that we have. so people who give me the best download rate. I'll sort it in descending order. whoever give me the best download I'll move forward with them, right? so PR a, what it would get. so let's say pra got all the remote peers from the peer list, that it has it got all the remote peers who are interested- interested, that's an important word. like they want something from a and then only a can like then only a would unchoke, right, if they are not interested in y. so PR a orders the interested remote peers by their download rates to a right and the fastest three are unchoked. so overall it would only unchock four piers. but out of those four the three are the fastest one to get unchoked. so three of the fastest PS from which I can download the fastest, I'll unchoke them so long as they're interested in me, right? so I have something that they want. I'll arrange all of those peers in descending order and I'll pick the top three and I'll unchoke them once I unchoke them. this is called a regular, which is basically unchoking on the basis of the download rate. second, for regular unchoke, the peers are ordered by the download rate to the local peers. it's not like some download rate that a person has told: hey, I'm like you can take it from me at 200 Mbps. no, it's a download rate, because in a P2P Network the peer can be sitting anywhere in the world. so it may be possible that a peer has a very good upload rate. but let's say that is in US and I am in India. if I'm downloading that us through internet would be very slow. so it's the perceived down Road. it's a perceived download rate that I'm talking about. so the peers are ordered by the download rate to the local peer and who have sent at least one block in last 30 seconds. this is an important one. so for regular unchoke, the peers are ordered by the download rate to the local peer and who have sent at least one block in last 30 seconds. because if they have not sent anyone any Block in the last 30 seconds, which means they might not be active, so then I'd have to wait for my download. if you look at this, all of this, this algorithm is already trying to increase your download speed, right? so if any peer has sent any Block in last 30 seconds, then only I'll unchoke that peer so that the peers who are active I'm downloading from them, making my download faster. it's greedy, but at the same time it is very, it is very considerate of the network, very beautiful algorithm. third is: every 30 seconds, right, so every three period, one now you would say. but this might lead to a deadlock, like, for example, if I want something from someone and that other person wants something from me, but it's a day Zero kind of architecture, where, where no one has anything with them. how would this move forward then? right, it's a classic case of data. so what happens? so, not just deadlock, but also how would you explode? because if you are only giving chances to someone who has sent the data, who would give chances? who would give chance to appear the first time? that is where something called as an optimistic unchoke comes in. so, every 30 seconds, one additional interested peer is unchoked at random. so, for example, IMA, I have a bunch of pieces, a lot of peers are interested in me, right, I am first ordering them by download rate that I'll get. I am unblocking three of them, I'm unchocking three of them, right, but every 30 second I'll, from All N minus three peers that are there, I'll unchoke one at random. there is no need of reciprocation. I don't want anything else. I don't want anything else from him, from that particular peer, but I'm willing to give one piece or or a few pieces that that person wants right? this is optimistic contract, that you are being optimistic about it, and this gives a fairness to the new peers who have been, who have entered the who, who are just, who just became the part of the network. fine, this is optimistic and shock. now, why would you want to do that? optimistic unchok has two very solid advantages. first, that it evaluates the download capacity of the new peers. for example, let's say a new peer entered the system and that Beyond has amazing download speed of, let's say, 500 Mbps then, but if no one gives it a chance, how would people leverage that download speed right? so that is where, uh, what would happen is you are giving chance to the new peers to evaluate their download capacity so that other people would get the faster downwards right? second is bootstrapping new peers who do not have any piece to share. because, let's say, I'm a peer and I just joined the network. I do not have any peace to give to anyone, so why would anyone unchoke me, correct? so if there is this very hard rule that you have to give me something, then only I'll give you something, then how would a new peer enter the system. so that is where, with optimistic unchoke- because you are randomly unchoking a particular peer- what would happen is you can send data to that peer and that would have something to start. so it's efficient, it's a way to bootstrap a new pure entering into the system. fourth, if the optimistic unchoked peer is from the three fastest peers that you have, so, for example, because you've selected a pure at random, if that is already the part of your three fastest peer that you chose, then the process is redone again. so you would reiterate the process until you find the fourth peer, which is a random selection, not part of your, not part of the first three fastest pair that you picked from. so you keep on doing it again and again and again and again, right. So eventually, after this step, you would exactly unchoke four peers, three having the fastest download. fourth, chosen at random right. so if you unchalk a particular peer and that peer is not interested- for example, you chose up here at random right- and if that peer is not interested in the content that you have, you would still unchoke that person, but you would continue to hunt because what you'd want to promote, you would want to give chances to peers who want something from you, because that would overall increase the file distribution speed in the network. so what would happen is when you unchoke someone, like, if that person is interested in you and joke, all good, but if that person is not interested and you are unchoking that person, what would happen? if the person is not interested and you are unchoking that person, then your unchoke is a waste. but you would still want to do that because in case in the future they would want something. they can directly get it from you, right. but you would iterate the process until you find an interested remote peer who you are randomly unchoking. this means you might have more than 400 jokes, but you would have atomax 4 interested on jokes and that is very important. okay, I know it's very fuzzy. well, I know it's a very Tangled, but it's very interesting- of an algorithm on how P2P systems are designed- very interesting, okay. so choking algorithm. what it is doing is it is boosting a good behavior that I'll upload, then I'll get a faster download. so if upload rate is high, more peers would unchock it giving a faster download. so faster the upload, faster the download, and that's the beauty of this p2b design okay. however, Free Riders, penalized with this. Free Riders never upload, so they only download, and hence other peers who, uh, who, uh, when they're choosing whom to unchoke a free rider will be the last in the list because of the Sorting criteria, because sorting criteria does what it is: sorting on the basis of the download speed that I am getting: download speed from when I'm trying to pull the data from the peer. how much speed am I getting? if I'm getting a faster download speed, then only I'll unchuck that person. but because Free Rider is never uploading, if because of Freedia there is never uploading, the download speed would be zero. so then by the Sorting rate would be zero. so then you would not be able to download. so then the free red, then the free writer would not be getting any file from anyone. so Free Rider is automatically penalized. but the only hope, the only hope for a free rider is optimistic answer: that someone randomly chooses a peer and that peer turns out to be free writer. so freerider will get a bare minimum download speed only upon the optimistic unchuck. otherwise it is God okay. now there is another Edge case. there is an edge case where there is a possibility that a peer is choked by all others, like I wanted something, but everyone has choked me, but I don't have anything like anywhere to go to. so then what would you do? for if I am, as a peer, unchoked by everyone- I'm sorry, I must appear, who is choked by everyone, but so? but then how would I proceed? how would I download the file? so what would do? what would I do? I can only rely on optimistic unchock that, hey, someone would randomly pick me and unchoke so that I can download the, I can get the file that I want. uh, but that is very infrequent, because optimistic control happens once every 30 seconds. so that would be very slow. so then I'd want to increase the number of optimistic unshock in the system. so what I'll do? I'll say: because you are, because everyone has choked me, I'll not give file to anyone. so what would happen is when I'll retaliate and say I'll not upload to anyone who is not giving me anything, what would happen is it would increase the number of optimistic unchokes in the network, because now there would be very few peers, because when this nubbing is happening, when no one is giving anything, the number of random selections would increase. and once that increases, what would happen, the number of optimistic constructs increases. very high chance that the net, the peer who is choked by everyone, gets unchoked to buy some. so optimistic unchock is the only is the only way through which a choked, a completely choked Pier gets its chance. but to increase the number of optimistic unchokes, it retaliates and take a lot upload to anyone, increasing the number of optimistic unchokes and thus the algorithm moves forward, maximizing the download speed in the system. brilliant algorithm, like every step when I was going through it. it's quite fun, quite fun. okay, the final part. we talked about the leacher state when we are downloading. now for Cedar. it's very, it's very straightforward per se. so Cedar. again, just to clarify that cedar is a peer who has the entire file. it does not need to download anything, but it can upload to, but it can upload whenever needed, right? so that is a cedar. so with the for a seeder, the choke algorithm is executed every 10 seconds or every time a peer leaves a peer set, similar to the Leisure State, and all right. the execution criteria remains exactly the same. now, first step: the algorithm orders peers according to the time they were last unchoked. now here this thing starts to differ. so what happens is, let's say, a like. you are a cedar, which means you have the entire file with you. you don't want anything from the network. you are in the Zen mode, right? you don't want anything from the network because you have what you want. now you can just give and give and give anyone who wants it. but you cannot just give to everyone, because then you would be bottlenecked and you would have a lot of load, right? so what would you do? very simple case: what would you do when you want to choose who to unchoke? because you would want to give the file to the person who needs it the most. but how would you pick that person? how would you pick that person? so that is where your criteria would be. your criteria would be the time when that other person was last unchoked. this way, what would happen is the I because you cannot just give, because you just cannot give, like sorry, why you cannot order it by upload speed. you can think: if my leader can do it with the download speed, I can do it with the upload upload speed. so people who can pull the quickest out of me, I'll give my things to them or I'll give my pieces to them, because if you give it, they'll get a faster download speed. but imagine for a free rider. this is the best thing. what Free Rider would do. list a Free Rider with a very high download speed. if you choose download speed at a criteria as in I'll give you as a seeder, you'll give the pieces to a node that has the best download speed. what would happen? a Free Rider with a very fast download speed can come in the network and your Cedar would continuously give it to them. problem because you'd want to penalize the Free Rider, right? so that is where what you do is. you would not have your sorting criteria based on the download speed of the peer or the upload speed of- or sorry, the download speed of- the peer, but instead you do it on the last unchoked time, because your Free Rider will be not unchoked frequently, so they would move back in the list with respect to the sorted criteria. such a beautiful piece of algorithm. this is right. so the algorithm orders the peers according to the time they were last unchoked, just to prevent Free Rider from leveraging it. and they have a pending block request. obviously they want something. then only you'll unchoke them. so then out of those people or the peers with higher upload rate will be given a priority. so higher upload rate is a priority, right, but before that you would be ordering it by the last unchoked time, so that Free Riders- last one, took the like- they would be very infrequently unchoked, so they would be always behind or they would be always lagging in the sorted list. then amongst those you will pick the one with the fastest upload speed. yes, such a beautiful piece of algorithm, nice, okay. second, now, other POS are like other peers who were never unchoked because they- this is an edge case- like if you are unchoked, if you are ordering by peers, uh, if you are ordering the peers, buy the last unchoked time, whatever, Piero is never unchoked. so that is where, for them, you are only ordering it by the uploaded. so first unchoked and then then, who are never unchoked, ordered by the upload rates. then, for the first 20 seconds, first 20 seconds, what would you do? you would unchoke the first three Piers, like, depending on the Sorting radiator that we talked about, you would unchoke the first three piers and then you would unchoke one Pier at random. so you unchoke the first three Piers depending on the criteria. they are called seed kept unchoked. so the unchoked that were made by the seeders and you unchoke one pair at random. so seed random unchoked. so, and for the next 10 seconds you would unchoke the first four Piers. so, uh, in the period of 30 seconds, for first 20 seconds you are unchoking the first three pairs as per your sorting criteria and one at random, and then for the next 10 seconds, you are choking the fourth one, the fourth at random. that you did and you would unchoke the first four piers. now, this way, what would happen is this way, you are promoting a lot of, or you are. what you are ensuring is you are giving the most to the network as a seeder, while not getting overwhelmed how Cedar is not unchoking based on the upload rate. instead, it is using time they were last unchoked. this is very important, right? because penalizing free writers. then peers in the active PR set are changed regularly because the random peer. because what is happening is you are picking three fast or three from the three from the sorted list and one at random, right, and because of this random, you are giving chances to other peers to get stuff from Cedar, because Cedar has the entire file. what is happening is anyone who wants anything your Cedar would definitely have it, definitely have it. so that is where, with this random peer getting unchoked you are. you are basically facilitating a very fast distribution of the file in the network because you have everything that everyone wants, but you cannot become a bottleneck. that's why you would be. with that one random unchoke that you are doing, you are promoting the fast distribution of pieces in the network and that is brilliant. that is brilliant because, as a cedar, you have everything that you want, or everything that anyone ever wants, right, and with this you're the active peer set would very frequently change with that one random selection. so your overall Network it's continuously getting unblocked because you are the one who are continuously sending data in the network. oh, and this is, by the way, the choke algorithm. so this is what the choke algorithm is all about: the stroke algorithm, how it- uh, How It penalizes Free Riders, how it boosts your overall download rate, how it works on the principle of reciprocity, and we saw how what algorithm is when your PR is in a cedar State and when the peer is in a Leisure state. and this is all about the algorithm. I dip, I dived so deep into this. it's such a brilliant piece of algorithms, all edge cases covered and your network always gets unblocked, like brilliant algorithm, a brilliant P2P algorithm, to be specific on that. so, yeah, that's it. that's it for this video. If you guys like this video, give this video a thumbs up. if you guys like the channel, give this channel a sub. this was the fourth video in the BitTorrent internal series and I'll see in the next one. thanks [Music]. thank you.