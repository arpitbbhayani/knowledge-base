thanks, so when a user wants to download any file from the torrent network, it needs a dot torrent file.
dot torrent file holds the information about the file that the user wants to download.
so, for example, if you'd want to download an ubuntu operating system from the torrent network, that ubuntu operating system iso image would have a torrent file.
you download the torrent file, which would have the meta information about the particular image, and then you can go to the network and download the file with the usual flow.
seeders are seeding the data in the network right, and so long as you have at least one seeder in the network who is serving the file, your torrent is alive.
and when now the overall flow that it looks like it becomes something like this: user first downloads a torrent file from a website.
let's say you want to download ubuntu image, you go to ubuntuorg and you can get the dot torrent file from that, and then you use your client.
let's say you'd use bittorrent client and open the file in the bittorrent and it would start downloading the file from the p2p network of that particular ubuntu image.
either you can continue your bittorrent client and become a seeder, because now you hold the file, so you can now seed the file to the network if anyone wants to download it.
right now let's take a look at what is there in the torrent file.
it holds the meta information about the file instead of the actual data.
so in the ubuntu images torrent file, it would have the information about the image and not the data of the image, right?
there is a central entity called tracker which keeps track of which all peers have what kind of data, right, it holds that information.
so, given that it holds that information, for a user to download the part and join the network, it needs to know which tracker is every node sending data to.
so if i want to download an ubuntu image, i'll download the torrent file.
i'll read the announce, i'll get the url and that is the tracker that i'll talk to, right for that particular file.
it's just a dictionary of key value pairs where first five keys that i talked about is announce, created by created date, uh, encoding comment.
right, because you might want to download a folder from the torrent network so you can also stream a folder content directly instead of just a file.
for example, if i have path like slash a, slash, b, c dot txt in the torrent file, it would be stored as a list of strings: a, comma, b, comma, c, dot txt.
right, it would store that much, uh, that value there as a piece length and then the actual pieces.
pieces would have 60 bytes of storage where each of the 20 byte in holds information is the sha of the corresponding piece, right, and this is what you, and this is exactly the information that you are storing in your dot torrent file and this is what would help you get.
now that i have a torrent file, do i have all the pieces with me or not?
right, and this is what your dot torrent file stores: the dot torrent file, the two most critical functions that you source is a piece length and pieces.
pieces is just a concatenation of 20 bytes of all the pieces of your particular file, but how it actually stores, or what encoding it uses to store, to create that file.
when i say dictionary, it's not json, it's not json, it's something called as be encoding, right?
but to download the actual file, what it would do is it would first decode the dot torrent file and understand the information that we just discussed, like what's the announce url, what are the pieces, what is the piece length, who created it in other information, right.
so that is where it would pass it through a small decoder and which would give you the torrent information in the human or into the, into the processable format, right, and this decoder is a b encoding decoder, right?
so every torrent file is b encoded and it's a dictionary.
so torrent file is a dictionary of key value pair.
the third type is list list could store any b encoded values, right?
encoded values could be string in list and dictionary.
right, because i have first as a string of, i'm storing a, which is of one character, uh, the, the length is one character, so i have one colon a.
so, for example, if i'm storing a dictionary of keys where keys i have is string a with value 1, string b with value 2, my dictionary, which is b encoded, would look something like this: d: 1 colon a, i 1 e, 1 colon b, i to e, e, right, so my dictionary ends.
so your torrent file is nothing but a dictionary, a dictionary of all the attributes we discussed, like announce, created, ad creation, date, created by uh pieces, piece, info, all of that.
you just have to write a small recursive parser to pass the b encoding files and once you do that, you can read your own torrent file and extract the information and then start writing your client.
like when you get it on and when you get the torrent file, you first need to understand the information of it and then start downloading the file from elsewhere.
so yeah, and that is how your torrent file is structured, is encoded and serialized in the format that anyone in the world can understand.
so anyone in the world who can understand b encoding can understand the torrent file and then extract the information out of it and then do whatever it wants to right and the information that it holds- announce pieces, piece length, very critical information.
using that information, it would start downloading the file, which will talk about it in the next video.