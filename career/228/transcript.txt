so the domain of software engineering evolves rapidly which means one tool or Tech that is relevant today might not stand tall a few years later this requires us to stay relevant by learning new skills continuously so today from my personal experience I'll try to answer this one question how to learn better and faster as a software engineer I typically follow these five things to ensure I am learning continuously and evolving as a better engineer every single day so here it goes the first one is what I called register your curiosity we as humans no exceptions are curious by Nature whenever we something wherever we see something fascinating we typically think hey how does this work let's say you started working with the database let's say MySQL and you see it guarantees acid you would wonder how is this database implementing acid right when you see red is you see hey it supports so many amazing data structure how is it doing it so given this given you are so curious about it what has happened is it has intrigued you it has spiked that interest now we typically start pondering on how that happens but then some other distraction comes and we just let it go now what happens is which is where what I typically do is whenever something has spiked my interest I immediately open my note-taking app and make an entry of it that's it just one blunt entry of something that has spiked the interest now here the key thing is because this is something which is which has naturally intrigued me now what happens is because it has naturally intrigued me I do not want or I don't I won't need an external motivation to go and read about it whenever I would revisit that thing it would automatically conversion hey because it was naturally I was naturally inclined to know that I would automatically go and read it so but it's important that whenever has something spiked interest you don't just let it go instead pick your favorite note-taking app and just make an entry about it for example I recently or or rather few months ago I was reading about or I saw somewhere something called as a conveys Game of Life I was very intrigued by it I immediately Googled and I found a term called cellular automata and that cellular automata seems like a huge amount like huge enough feel like hey I need to read that what I did I immediately made an entry in 2 now this is where what I do is I make an entry not just that hey I want to read this but why I want to read this for example I need to know because the reason is what has spiked that interest what I want to read is okay but why I want to read it is really important because that is something that I don't want to forget when I read that why part I would be more likely to go and you know read about it I'm like I'm I'm implicitly being pushed into reading about it I may choose to read a month or two or five later but that's fine but at least I would have a reason a personal reason to read it for example I want to read about cellular automata because I was fascinated after seeing Converse Game of Life or I want to dive deep into redis internals because I am fascinated after seeing the advanced data structures it supports so learning and why it's really important right okay now apart from that whenever you have any question any anything that has spiked your interest just in at least jot those questions down right hey let's say you are reading about database you want you saw how a distributed SQL database like cockroachdb guarantees acid that's the question you might not know the answer just make a note of it because not everything needs to be done today right so anything that can be there for just defer it into your notes and then revisit it often to just go deeper into those corresponding aspects right okay so let's first register your curiosity because you have storing it in your note-taking app so when you revisit you would not be missing things out and you don't have to fill everything in your head that day I would remember this and that you can occasionally revisit your notes and just see okay this is what I like now that I have time I can read more about this right okay the second thing is what I call jump start now what happens is we as humans no exceptions again are lazy we like to defer things we like to procrastinate and that's very natural so but what happens is when you are when you would want to learn something you have to get rid of your laziness so instead of waiting for that correct time just start right now instead of waiting for the best resource to learn something start right now and especially when you're going on that zero to one Journey where let's say you don't know anything about cockroachdb but now you want to dive deep into it so when you're going into this zero to one Journey literally any resource is good you don't want to find the best resource anyway because when you are more familiar with the things the terms the internals or anything it would be very natural for you to filter out and say hey this does not seem deep enough let me find some another resource but when you are at Absolute Zero it really does not matter so just start with anything and everything that you have right so jump starting is really important do not procrastinate is really important I never procrastinate I have that list maintained whenever I find time I literally Jump Android instead of finding the best resource out there to learn something about finding the best time to do it or Worse finding a time block where no one would disturb me it's not possible in today's day and age so whenever you find that slice of time go for it right the third one is what I called do the laundry so we'd never we all don't like to do laundry because that's boring so what I mean by doing the laundry it's simple that we typically like let's say I got an idea that day I would dive deep into radius internals so now what happens is I can just keep thinking hey if I know radius internals ah I would do this I would do this I would create this post I would create this videos and what not now what happens is we like to live in a beautiful world made up in our head because how like for example how amazing it would be to learn golang or I can do so much I would optimize this particular code I would write I would like rewrite my entire microservice now what happens is you are building stuff in your head rather than doing the laundry what is doing the laundry over here just get your local ID set up and start coding the things out instead of going through tutorial hell where you are reading tutorial after tutorial after tutorial and not implementing it that's where the problem is because we as Engineers unless and until we Implement everything is just in our head we would not be sure on how those things work or what are the practical limitations of it what the practicals problem with the things that you would want to learn so just get your local ID set up in case you cannot do local ID setup just start something on a website like replit right which gives you remote ID and start coding things out and here I'm taking example of learning a language it could be a database it could be anything just get your hands dirty do the laundry and start the coding things out so so so important no matter at what stage of your career you are at please don't just do like don't just keep reading and reading and reading focus on implementation like what I'd personally do is any research paper that I read I try to implement the core of it I won't implement the entire system but at least the core of it that seems very interesting or I am unsure about I go and Implement that really really really important the next one is what I call the inverse power law so inverse power law is basically the thing is that a lot of people like for example whenever I want to learn something what happens is I'm actually fascinated by some Advanced concept I'll give an example let's say I am intrigued by radius internals so what I would do is hey how does redis implement let's say geospatial queries now that's an advanced part why should I directly jump on that because I cannot just say hey because that is interesting I'll directly jump into that but now what happens is when you jump into that you will stumble upon so many new terms which you are unaware of and you say hey I don't know stuff and you keep and you typically leave it there that's wrong what should you do in such situation is you always start from absolute zero and then increase right so inverse power law is basically you spend more time on Basics and then gradually you lower it down so that's an inverse power law that we all studied right so follow that spend more time preparing the basics and the foundation side it would make it easier for you to grasp the advanced stuff right so try to start and it does not mean that you should just keep focusing on Basics and Basics and Basics and spend very little time over here but if you don't spend time understanding the basics or not have a solid foundation it would be very difficult for you to understand when things go tough right how are this Advanced parting limited you would know not you would not know that so it's really important to do it for example for example uh basically chat GPT and large language models are all the range now if I just directly start hey I want to know how large language models work I'll open the paper or open a few videos some random things would happen and as soon as the math part comes in I'll go on because I don't know the basics of neural networks I don't know basics of calculus how would I be able to comprehend how llms work right so it's always better it's always better to understand that hey you need to spend decent enough time focusing on the fundamentals before jumping into the advanced stuff although the advanced stuff actually intrigued you more right so remember this inverse power law more times spend on the easy part it would make you spend lesser time when things go tough right okay that's the next one and the final one the final one the fifth one juggle and time box so we underestimate how much we can do in parallel we typically think that hey let me pick up this one thing I'll do this one thing really well but now what happens is you get bored of it if you think about it the last time you were intrigued by something you wanted to study something you typically left up after a few days because you got bored of it why did you get bored either it becomes really difficult that you are not able to understand or it just is boring right so what happens is in today's day and age it's very easy to be distracted very easy to be distracted by something fancier for example let's say I started going through internals of cockroach TP but then suddenly I stumble upon an article that talks about Linux kernel I would be very intrigued about it so but now what happens is I would leave this cockroach DB aside and I would jump into that other ship and then while I'm doing that I would find something else I would jump on something else and then something else eventually I'm not able to to accomplish anything and that's wrong so instead what you should do is pick not just one thing pick two or three depending on your capacity but at least that you would want to learn a in parallel if you get bored by one switch to other if you get bored by the second one switch to the first one this way you would able to make significant progress on almost both of them and you would do justice you would do justice to your decision of learning that particular stuff I've seen so many people starting with golang and then images no rust is all the rich I'll go and switch to rust and they don't even know golang I don't even know rust that's the problem right so it's always better pick two things in parallel two languages two texts whatever you find interesting and amusing but pick two things to do in parallel board by one switch to other do justice to your decision now but how long let's say you picked up something and you realize that hey this is really boring and I cannot do that for example large language Models All the Rage you saw the hype you jumped on that ship and said I'll study this but what happened is after some days you realize maths is not my cup of tea so now what right you cannot just leave that you would feel like hey because I spent one month but now I believe that that would be wrong I'm doing Injustice and what not but it's okay what you should do is what I typically do as well as is I time box every single thing for example if let's say I want to learn golang I would time box it say hey I'm giving three months time for me to study goli but within that I would evaluate in one month if I'm good enough like is this good enough for me to extend that right so one month I'm just time boxing it that I won't spend more time than that and it would be my decision making call that hey do I want to dive deeper or not but give yourself enough time do time boxing of that stuff so that you just don't go keep on learning and learning and learning that one thing throughout right because there are far too many interesting things to miss out on to be honest right so learning multiple things at once has ensured me that I don't get bored of stuff because if I get bored of one okay can go to another so now and why two things is because let's say if I don't pick two things if I get bored of one what's the alternative Instagram scrolling right don't do that so which is where I pick two things to study in parallel and if I get bored of one I immediately switch to other that's the easiest way for me to do it but always remember it's okay to get bored it's okay to drop something that you started it's okay to not fulfill your commitment of learning a specific thing it's okay everyone has limitations and you should acknowledge that that hey it's not my cup of tea for example deep learning is not my cup of tea so I would just leave it I would not invest a lot of time into learning calculus from absolute scratch and doing it right giving an example right so it's okay to drop things that you realize that it's not good enough for me at the moment to study and yeah these are the five things that I typically do to ensure that I learn better and faster just a quick gist of it the first one was register your curiosity second one was jumpstart third one was do the laundry fourth one was the inverse power law and fifth one was juggle and time box and yeah this is all what I wanted to cover in this one I hope I hope this helps you in becoming a better engineer learning better learning faster and having an accelerated career growth So yeah thank you so much for watching that's it for this one I'll see in the next one thanks