How databases are managed in production?

Dissecting GitHub Outage Understand how databases are managed what Happened ? Proxy SQL rollout L Database crashed → Automatic Failover This is a ↓ very New master also crashed common scenario , ↓ let's understand New DB crashed ← Manal Failover detail each phase in ↓ Back to normal Finally code reverted → what is Proxy Sal ? EI servers Proxy SQL ProxySal sits as a proxy b/w MySQL cluster the servers / clients and MySQL cluster . Every connection and query goes throgh ProxySQL

? Why do we need ProxySQL in production Better connection IT handling - Proxy sale - connection pool servers connection multiplexing - MySQL Cluster * fewer DB connections can support huge traffic - gatekeeper to enhance security and routing } keeping route writes to " " "" ᵈ Of API servers me primary - route reads to logic , ProxySal does that seamlessly replicas ' * we configure rules and fire query . Proxy Sal Weill automatically route the request to correct and intended node Freq . Reads Replicate Seamless Queries Proxy SQL MySQL Cluster """ "" Queries on a Replica 2 massive table " " events

Caching - - Given that ProxySOL is transparently Proxy so @ sitting b/w servers and database . it is the best place to cache common queries - Temporary access management we keep our data secure + logging / tracing at can create temporary users in ☐ B and - delete them after a few hours one place what failed ? GitHub that available the teams wanted a feature and was on latest Proxy SQL version . Proxy SQL Hence DB team updated Proxy SQL . After a week , primary node crashed " orchestrator " detected the failure and quickly IT New master promoted a replica to be the new master

What is Orchestrator ? Tool to manage MySQL topology and ensure High Availability topology + performance 1. Discovery " " to how good is replication fancy UI see - 2. Recovery Discover failures and perform automated recovery - Freq . Reads Replica 1 Proxy SQL MySQL Cluster Master Queries on a Replica 2 massive table " " events Monitor & Act Orchestrator Anti * Key Feature : - flapping Prevents cascading failure by NOT doing automated failover

Master Cascading DB Failures Queries 1=-1 Replica e If a node goes down . orchestrator promotes a replica as new master Replica 2 Replica 3 * The new master has to now bear the load , and high chances it would crash . leading to a cascaded failure newly promoted master also If the goes down , Orchestrator would not promote another replica again until cool off ANTI FLAPPING a period . - This NO cascading would ensure failure propagate father Manual Failover Because orchestrator is not spinning up new DB GitHub team hence had to do a mantel failover The also starved crashed ! new DB for CPU and So how did ? , they recover

Revert the root cause Because DB was not and new couldn't handle the recovering , ones load the code that incoming . GitHub team reverted required newer down versioned well version of ProxySQL and proxy SQL as - . This solved the issue and MySQl cluster started taking writes what did learn ? we how database ? companies handle production - - Proxy Sal and Orchestrator importance of anti flapping policy - - nothing works revert ! ! - when , full