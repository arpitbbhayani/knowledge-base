GitHub Outage: Downtime due to reversing an Index

Dissecting GitHub Outage " " Downtime due to index reversing an ? what happened GitHub ran a database migration ASC to flip the order of an index f. to DESC improve Query performance ,, say , we have a multi - column index on a table commits Most common use case : id id date repository user - get commits on a in order descending say , now we want get commits ordered by date and for each day order by user ↓ ↓ DESC ASC This because query will be inefficient ASC ordered all indexes on MySQL are by default .

Hence to the answer query efficiently we would need to have an index iuhich is Dale in Supported by ordered by DESC order 8 User ID in ASC order MySQl and have " " Hence , we to flip the index Reversing the index caused Full Table Scan load for a query generated by their ORM ( Active Record ) on the DB ↑ Full Table Scan 1. Creating a new index itself would require a but 2. Say , you changed the order of the index , 1. other needed DATE USER ID ASC some query , which is much more frequent would now become inefficient 2. some queries might not use this new index " " because DB engine thought it would be inefficient ↳ because the provided of query we ↳ or its own estimations

We can SELECT to tell _ INDEX HINTS _ _ . . . DB . . use our FROM . . . _ to . . use a particular index for a particular ); USE INDEX ( idx _ . . . . . query Cascading Effect Because a query was doing a Full Table Scan ↳ Put load on the DB ↳ time the service increased Response of ↳ lead to timeouts of the request ↳ time Response of depending services increased ↳ timeouts cascaded !! Svc 2 Mr th , MMM svcl Man Mr sue 4 Mmm ?¥ Svc 3 Nole : whenever there is a synchronous dependency b/w services there is always a chance of cascading Failures

Key Takeaways : Active Record 0pm . Django . % ☐ ◦ not blindly trust your on ,, SQL Alchemy , Hibernate but not ORM makes our lives simpler , they may generate the most optimized SQL queries Periodically audit the Queries generated by ORMs 2. Always check the Query Execution Plan staging / QA environment Run migration on your and see the Query execution plan for related Queries check for any abb oration or deviation 3. Audit the queries and indexes they use prepare an inventory of queries and indexes they use so that test for regressions we can quickly