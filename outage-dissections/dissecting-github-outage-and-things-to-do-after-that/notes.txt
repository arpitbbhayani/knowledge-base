What to do after the outage is mitigated

Dissecting GitHub Outage After the outage is mitigated what happened ? FK [32) id 164 limit Foreign key crossed IN-132 This led to outage in Actions 2 Pages - and led to failures High throughput to some " " push and services " " pull } Schema Mitigation : migration and altered the FK Very time from 32 bit int to 64 bit consuming Please refer to other Dissection videos to understand * Outage how such situations are actually mitigated much time and why it takes so when do ? we say that issue is mitigated We say the issue is mitigated as soon as the usual operations for end user resumes

What ? after mitigation 1. Check for data inconsistencies have not ensured During outage write fails , and if we atomicity our DB might be in an inconsistent state eg : update a = at 100 Identifying such inconsistencies rrrruuuiuruurnnnm CRASH b and resolving them b- 100 update = there For this specific outage , was nothing from GitHub 2. Cache invalidation some of the data in the cache might need to be deleted because the partial entries are not fruitful For this outage GitHub . deleted token reads from cache that became invalid expired entries stray Also check dependent services for inconsistencies [ notify the team at least]

3. Setup alerting Audit the alerting config to ensure right set alerts of are configured and we get notified about similar outage sooner the alerts to For this issue . GitHub team audited ensure the does not happen for the again outage same reason limit Alert on integer column reaching IN TMA 4 . Preventive measures Take preventive measures to ensure another outage does not happen for the same reason . * Actions depend on the usecase team linkers to For this outage GitHub configured ensure no one accidentally cause the same outage again - Audited all IN -132 Columns for their usecase and risk of reaching IN -1 MAX