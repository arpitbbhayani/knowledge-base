GitHub Outage Downtime due to an Edge Case

Dissecting GitHub Outage Edge case and a poor SQL query August 2021 . GitHub experienced major that their outage affected core services ? what happened The due to outage was an edge case that generated poor Sal query ↓ One of their MySQL masters degraded + automatic retry and queueing made it worse a > API a > @ Database Retries we add retries in order to cover transient issues but it can also become something that adds to load during an outage " " " " how could the master ? so , an edge case degrade

Note : This example to do with is just an , nothing GitHub how huge load DB Just trying to explain an edge case can put on say , we have commits table commits epoch Ms ← stored as integer id author id created .at , Msg , _ , SELECT count ( id ) FROM commits Arpit Bhayani WHERE author id_ = 123 72 commits last week AND created at _ > start date _ say , the service is written in Golang and start date in the parameter we get _ query 1 seconds as epoch have to so , from the query parameter , we then pass it to convert it to integer and Sal our query

https://api.github.com / stats / commits ? start < ts > _ date = epoch - based code to do like this golang this could look something int start date ; _ ( date;) start date - : = strconu . Atoi req g. start . _ , _ " res . = query . execute ( SELECT count ( id ) FROM commits WHERE author id _ = 123 ) " AND created at _ > + start date _ Edge case : what if start date _ is not passed passed start date what if non integer value is as - - ↓ " " calendar widget some mis configuration on strcorw Atoil ) . → throws an error but we did not handle it get the being integer will ' ' so , start _ date value which 0 default is .

the is set int start date ; default value - ↓ default value = 0 The query that gets fired is SELECT count lid ) FROM commits WHERE author id _ = 123 AND created at_ > 0 ; ! This would literally count all the commits made by the user . . . ever to execute and would take a long of time and load put some on DB Given this it will be invoked is a common query , frequently and will put massive load on DB ! ! causing degradation and eventually an outage ? so , how to such situation protect ourselves from

So how to avoid such , situations Be pessimistic Sanitize your query execution 1. input before hard Apply guardrails edge it goes through 2 . even in case say 1000 rows SELECT count lid ) FROM commits WHERE author id _ = 123 AND created at _ > 0 LIMIT 1000 ;