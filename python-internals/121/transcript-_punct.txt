[Music]. so before we start diving deep into c python internals, it makes sense for us to get everything set up. so in this video, i'll be walking you through with a very basic c python setup and we'll be making our first change and basically building our own python around it. so, uh, uh, the code of, so the code of python, which is c python, is hosted on github uh, and it can be found out in repository https, let's githubcom python slash c python, uh in this. so what? obviously, what you have to do is you have to clone the repository. so, over here, i have cloned the repository and i've opened it. in my, in my visual studio code, you can find detailed uh. you can find detailed setup instructions, uh, by visiting this link, which is https slash devguypythonorg setup. but, in case, if you are using uh, either mac or ubuntu, the setup is fairly straightforward. so, over here, what i've done it? i've cloned the repository. i am on my master branch. what i'll do? it is i'll just run dot slash configure uh and then make. that's it. that's all we have to do. uh, dot slash configure will actually pull in and ensure that all the dependencies that are required for you to run the setup all the, all the basic stuff. it's there and the make cover will execute the make file and will, at the end, will build the entire uh and basically it will build uh the python executable right on the macintosh or on ubuntu. what's a little weird is, if you're using mac uh, the executable which is built, it's built in the current directory with a dot exe extension, something which is similar what we see in uh, the windows setup. so as an output of make also, you'll find uh dot slash python. dot exe is how you would be running the executable. so with this sort of setup about- and let's go. so if you see over here it's trying to check for all the dependencies, it takes some time. it takes about close to two to three minutes for it to check if everything's what's required for the lab, if it's there or not, and then i'll make a wood kick in which would build a binary from the source code that we have, and that's the best part about it. once all of this process is done, the binary which is built is built from this very source code, right? what does this imply? it means that if we start, if we start altering the source code and we start building things again. what we would see it is we would actually see the binary built from our changes, so altering any changes and rebuilding it using make command. so, no, that we don't really have to run dot slash configure every time, it's just the one time setup, and then, for every change you do, you have to run make, uh. so what will do? it is uh, uh, since everything is there, uh, since the make and the command ran successfully. now what i'll do it is i'll just run dot slash, python, dot exe. so one sided dot says pythonexe. it opened up a python shell and now this pythonexe was built from the source code that we have, okay, so from this very source code in order to test it. what we'll do is we'll make our first change, uh, with me. so what should we do? is we should open the file? uh, we should open the file pythonc open. we'll open the file pythonc present in the folder programs. while we do that, we find the main function, which is typically how any c program would start. so we find this main function and what we do? we add a print f, right, and i'll just say: it's up, it's python, and slash n. now, if i rebuild this, if our hypothesis is true, as in uh, the binary which is built is built using this very source code, then the output of the make command, which means it would rebuild the binary. once the binary is rebuilt, it should actually print: f, it's python, right? so let's just see that in action. uh, what i'll do it is: i'm running pythonexe correct, and the first thing i did print is: admits python. oh, i added a typo. so it's okay, let me rebuild this again so that i get a closure and iron make it. it doesn't take really long the next time. right, it just takes a little time during the first run, but then it's just very quick. so then when i do pythonexe, i see at pitt's python being printed in the first thing, because the code execution starts from main uh, the first thing, it runs this printf and then the usual python stuff that it does. okay, so this actually completes the thing. so we have see. so this inch. so this implies that we have c python set up locally, it, uh and the, and we are able to build binary out of the source code and able to make our first change right. so once you also reach this particular point, it means you are all set to explore, uh, c python internals by actually altering the code and just basing and just understanding things on its own, uh. so that is it for this video. in the next one, what we'll be doing, it will be changing. so we'll be making our first change in the python's grammar, so we'll be altering the python's grammar in order to make uh, in order to get rid of a syntax error, although it's not a good thing, but it will be fun to do so. so, uh, uh, just to give you a little glimpse, there is an operator that does not run in isolation, but we would alter the grabber so that it runs right. uh, we'll be going through a bit of python grammar, we'll be making a very simple change and, uh, we'll be getting rid of a syntax error. so, yeah, yeah, basically that's it for this video. uh, if you guys like this video, give this video a thumbs up. uh, if you like the content, obviously, please subscribe to this channel and i'll see you in the next one. thanks for them.