so working with open source is an enriching experience and you feel really great when you understand a complex piece of code it sounds really interesting but most engineers get stuck on step one finding out where does the code start in this video I would like to walk you through the process that I follow to navigate any huge open source code basis and find the starting point along with that today what we'll also do is we'll understand a bit of the code base we'll make our first change and see that change in action the code base I will use here as a reference will be C python so let's jump right into it python the world's most famous programming language is implemented in C language the entire source code of python which is called C python because it's C implementation of python can be found out in the repo python C python it's a gigantic code base it would take quite a bit of time for you to clone the repo but it's worth it so in the readme file for any open source code base typically in the readme file you will find setup instructions these are setup instructions to set up the project locally in case of C python if you go to the readme file you typically find these four commands that you would need to fire out of this four I would only recommend you to fire first to come out because why to run test on day 0 if you make a big change then you would want to run tests and see if everything is running and all and sudo make install would just install the binary in your environment so more importantly for you these two are the ones that really matter dot slash configure and make that's it and most C based open source software would be using make and configure so these two would be very common across almost all of big open source projects out there right these two commands is what you need to run to set it up locally so what I've done is I have set these things up locally I've cloned the repo uh basically kept it handy now what I'll do is I'll fire the make command to build the binary the python executable that we all know would build that now the make Command complete its execution so when I do dot slash python this dot slash python is not a globally installed python on my machine it's locally built python from this version of the source code that I have right so I can prove you this for example if you look carefully in the readme file it says that this is python version 3.12.0 Alpha 7 and if you look at output of a make Command of the Python executable that right is exactly 3.12.0 A7 Alpha 7 right so it's what is built from this very source code now given that like when you are getting started with a huge open source code base you obviously know the language it is implemented for example C python is implemented in scene we know where the C like how does a c Program start it starts from the main function the execution starts from the main function so given that c python is implemented in C what we would know or it should definitely have a main function so how do we find the main function for us to find the main function what will you do the best thing that we know is is basically control shift f with searches for string in the entire repository right and we know that it will be a main function with an open brace right so if I just write mean it would match a lot of other stuff where the main is used but we definitely know that main function would in most cases would be immediately followed by an open brace right now if you go through this we get a bunch of files that contains mail right what we know that in C language the main function is what small cased so I'll apply Case Case thing over here that I only want to match so I want to do a case sensitive search I did that now I have narrowed down to quite a few files nothing really special over here now when we scroll through this we try to figure out the file that looks most relevant so here you can see the folder name it DOC slash includes obviously your python binary would not be built from Doc Mac Tools no modules could be but here it's not text it's text domain and not something else we would just want main function we scroll down on scroll down we still don't find a main and here we find something very close to it in the file in the main.c in the modules looks very close to where we should go to right so if I click on Pi main dot main we see something interesting over here so let me okay we see something really interesting we found a main function over here right Pi underscore main looks very main ish and I could see a pi underscore bytes mean but both of this contains Pi main window this looks like and this function is so small and it looks like the enter exertions should start from here let us search this Pi main with an opening brace over here and let's see if we could find something else right so here when we scroll include includes something PC win main something test bed python.c programs returns payment this is where you can see the reference of Pi underscore mail I click on it and bingo now we found out the place where the main function is defined here you can see in main int argc CAD star star argb the most familiar syntax of all Engineers right this is the main function that is invoked and fii you could see this it is faded on my machine while the above and W Main is not because of this macro which is defined because if the platform is Windows you do this if the platform is non-windows then you do this right this is a conditional compilation I am doing this on Windows machine which is why you see the first one getting brighter as compared to second one this is vs codes feature right so but we found out Army right now from this code we try to understand what this code is doing now this code this file is pretty small to be honest really small it just contains 17 lines of code that to a bunch of header includes macro if definition so if it's a Windows platform do this if not do this now what are they talking about why are this why are they having two main functions which is where you need to understand what this each one like like we all know that in Python it's oh sorry in C language it's main function but here we see a W mail now what's the difference between the two so to give you a gist of it any like the C language that we built if we are doing it in Windows based environment the function is the entry point function is not mean it is W Main because Windows supports Unicode format so instead of supporting or instead of you accepting a cad start star it accepts a wide care because it supports unicodes uh out of the box that's why it supports white cat but the function name changes to WMA right depends on where you are running so because python has to be supported across all the platforms they do this conditional comparison the day no matter for which platform you are compiling the binary when you run it it would run just fine right but that's not the point but now you get the gist on how this code would have been structured now here you see Pi Min and Pi bytesmin which means that if it's Windows main you are calling Pi main if it is UNIX based stuff you are calling Pi bytes mean if I click on Pi main I could see the same function that we visited from some arguments have been computed and Pi underscore mean underscore main is getting invoked and next to which you can find pi bytes main which is doing some argument and then invoking Pi main mail this pie main looks like the entry point for both of this beat Unix beat windows so this should be the function that should be starting at all right so we found out main function now if we would want to make changes to that now let's say what is the most basic change that we would make we would want to build our own version of python the most basic change that we would make is ADD prints printf statement right so what I'll do is I'll add a printf statement and say this is Earth's version of C Python and I'll end it with a slash n and a semicolon right now here the reason I added it over here I could have added it in this python.c file where it contained the main function but now I could have chose to add it just over here right something some print statement over here and some print statement if I do it over here then the printf would only be compiled for Windows machine then I would also have to make change over here right that both the places I would have to make those changes either that or a better way to do it is because while browsing the code we figured out that both of them eventually invoke Pi main underscore main why not just write it over here right so I just wrote a printf statement and now let's try to combine how do we build sorry let's try to basically compile and build the binary how do we do that we saw the command called make right in the readme file I fire make it would take some time to compile it would take the status compile the binary generate a final output right it would happen in few seconds and once it is done the local uh the local python file or the local python finally that was baked would contain the changes that we made and it's just about to complete and it finished building this now if I do dot slash python you could see the first thing that it printed is Earth's version of C python it is exactly what we did as part of the first car because we saw the flow main function invokes either Pi main or Pi bytes May Pi bytes mean and Pi main are basic payment Pi bytes mean both invokes Pi main underscore main this is the entry point for everything because before that we are not printing anything which is exactly what we see over here the first thing that is printed is this and then some status tag is exit translation say something and then you are calling Pi run main right so this is where your your your python interpreter is starting will not go detail into the first video we will look into it in the future ones but you now you see how we have navigated through this gigantic looking code base right finding out the starting point is typically the most uh more like it's basically the most essential step for you to start with your open with the gigantic open source code base but more importantly it gives you that confidence that the changes that the changes that you are making will be picked up you'll get confidence by writing code into that so you are not just basically building things in your head but rather getting your hands on to this thing right so do that now once we know the starting point which is main.c file line number 7 return where we added a printf and in return it invokes Pi underscore run main this is where your entire python would start so figure out where it goes right python run python with exit code and this is how you slowly and steadily build grass over this gigantic looking code base but now you know how to navigate through this now this is a binary that you just built now you can use this as your binary as your default python binary if you want right next time we might change some code some code into this python code base and add new features to this right so yeah that's the fun of open sources once you get the entire source code of things that you are already using and you are able to build on top of that that's the happiest feeling that you get and yeah this is all what I wanted to cover in this one I hope I have demystified how and made it and basically told you how easy it is and rather showed you how easy it is to build a gigantic looking open source code base make your question is find out where the things start right and this is how I would I recommend every single one of you to start your open source thing the gigantic looking code bases don't get overridden by that they are not really scary you spend enough time you start grasping like you start uh having a nice grasp over the code base like it just takes time it just takes a week week and a half to just navigate through it and basically familiarize yourself with it but everything has a small step these are small step in understanding the C python source code right and yeah this is what I wanted to cover in this one I hope you found it interesting hope you found it amazing that's it for this one I'll see in the next one thanks [Music] [Music]