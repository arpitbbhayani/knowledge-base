so in version 3.8, python introduced something called as a walrus operator that facilitates assignment expressions.
assignment expressions are very similar to assignment statements, which is like a equal to 10, where 10 gets assigned to value to variable a, but as part of assignment expressions what happens is the value 10 not only gets assigned to a but gets also returned as a written value of this expression so that we can reuse it at different places if we would want to.
one really weird thing about assignment expression is a very simple looking.
assignment expression gives the syntax error and in this video we'll be changing the pi.
before we like go into python grammar, let's understand where exactly uh, the walrus operator fits into the picture.
uh, once this is done, i would also like to take in the next command that i would need to run, and this is pretty much a very basic working shell in python.
so now, what i would want to do it is: i would want to, i would want to get rid of this redundant piece of line where we do command equal to input, right, so uh, pi, so uh, as part of intuition.
you want to define the variable and take input as part of condition itself and let this evaluate and use this particular thing, uh, as part of, and, and use the value which is being input in command and uh, and put it against and basically compare it against the exit string.
what would happen is, since we are using colon equal to which is, which makes this uh as an assignment expression and not just a simple assignment statement, it would take an input, assign it to the variable command, and now this variable gets defined in the scope and i can use it within the while loop.
so this is exactly where your walrus operator assignment expression fits in really nicely.
so now what we do it is: we have seen that a normal assignment looks like a equal to 10 and a gets value 10..
so what we'll be doing today is will be understanding why this happens and, in the process, change the grammar to get rid of this very syntax error.
and when someone does a colon equal to 10, it should do a normal assignment, right?
and it should basically define variable and do a normal, simple assignment that we want to do, so let's jump into it.
let's look for colon equal to, and we find it at two places.
this looks like: uh, the assignment expressions.
uh, basically, walrus operator is called as named expression in the source code.
and now let's find out what named expression rules defines are.
so, if i just move out while here, so if i named expression test over here, this is exactly how we used it, right, we used while, then followed by our assign, followed by our assignment expression, where we did command equal to input, and then this gets it a block.
with this logic, what it seems like named expression, we can also use it with if statement.
let's look for named expression again.
we can use it with alif as well, while and some simple named expression test looks like x colon equal to.
so basically test colon equal to y, which is what named expression is.
so this looks like the place, or rather, this is the place, where that particular rule is defined, where a colon equal to 10 surrounded by bracket works, is where uh is actually coming from.
so this is the very rule that puts in that allows parenthesis, uh, that that allows a colon equal to 10 within parentheses to work, just fine, okay, now let's find out why a colon equal to 10 without any parentheses doesn't work, right.
so, uh, if you see, we could not find any rule that shows us that it is allowed to have a normal statement like that, right.
so what python does is python explicitly has set in an exception where assignment statements have been allowed, like a equal to 10 is allowed is an explicit exception.
so, in order to find where that is defined, let's look out for, uh, quote equal to code- well, basically, single quote equal to single word, in order to find where this is used.
so this is the place where assignment statements are explicitly allowed by the grammar right.
so now if we would want to allow, uh, let's say, colon equal to right.
so let's copy paste this entire thing and make a change to this grammar and let's say we allow just space and we put colon equal to here, right?
so with this thing, what we have done, it is we have not only allowed equal to, like a equal to 10, but we have also stated: allow a colon equal to 10 squared, right.
so this looks like something that would help us get rid of syntax error.
uh, it actually changes the parser file which is auto generated, and then you would have to run normal make, which would build your binary, right.
and now comes the part where we would want a colon equal to 10 to work.
so we got rid of a syntax error and we allowed a colon equal to 10, or equal and equal to 22 work just fine, just as normal assignment expression, right.
so we have successfully changed the grammar and got rid of a syntax error and something that look that should have been intuitive to do.
where exactly is that code that is treating this very thing as an equal to?
this is the grammar parser file that was auto generated, but we did not explicitly handle a colon equal to to be treated as an assignment.
in order to do this, let's look out for where expression statement is used.
let me just find expression statement in dot c files.