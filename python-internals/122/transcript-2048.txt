so in version 3.8, python introduced something called as a walrus operator that facilitates assignment expressions.
assignment expressions are very similar to assignment statements, which is like a equal to 10, where 10 gets assigned to value to variable a, but as part of assignment expressions what happens is the value 10 not only gets assigned to a but gets also returned as a written value of this expression so that we can reuse it at different places if we would want to.
so these assignment expressions, they come in really handy while writing code.
one really weird thing about assignment expression is a very simple looking.
assignment expression gives the syntax error and in this video we'll be changing the pi.
so we'll be uh, we'll be diving into python grammar and identifying why that happens, uh, and in the process we would be altering the grammar in order to just get rid of that syntax error.
before we like go into python grammar, let's understand where exactly uh, the walrus operator fits into the picture.
by the way, the borders operator looks like a colon equal to, uh, so and equal to, prevented by colon, uh, so what we'll do in order to uh understand.
the entire code base that we are skimming through is for the version 3.0, so we'll jump on to writing a shell.
right, so what we would do it is: we would take in a command as an input and we render a nice looking prompt.
uh, once this is done, i would also like to take in the next command that i would need to run, and this is pretty much a very basic working shell in python.
so if i do python shell, dot pi, it opens up a very nice looking prompt, and now what i can do it is i can do ls, so it did print every content that i had in my current directory.
so now, what i would want to do it is: i would want to, i would want to get rid of this redundant piece of line where we do command equal to input, right, so uh, pi, so uh, as part of intuition.
what you would want to do, it is: you would want to initialize the variable and take input in the as part of, uh, as part of while condition, right, so something like this, right, but uh, so this makes our code intuitive, and you are.
you want to define the variable and take input as part of condition itself and let this evaluate and use this particular thing, uh, as part of, and, and use the value which is being input in command and uh, and put it against and basically compare it against the exit string.
and this is exactly where your uh walrus operator kicks in, where your assignment expression kicks in: uh, uh.
what would happen is, since we are using colon equal to which is, which makes this uh as an assignment expression and not just a simple assignment statement, it would take an input, assign it to the variable command, and now this variable gets defined in the scope and i can use it within the while loop.
it gets me all the file i do pwd and i do exit it grace, it gracefully exited my shell, right.
so this is exactly where your walrus operator assignment expression fits in really nicely.
so it makes your code look really intuitive.
uh, the problem is very interesting, so i'll just open up a shell which i built using the very code that's there on my machine.
so now what we do it is: we have seen that a normal assignment looks like a equal to 10 and a gets value 10..
so you would expect this to work as a normal assignment statement, but it doesn't.
it works seamlessly, and my value 10 gets assigned to a.
if i do it with b colon equal to 10, and you'd see that b gets defined and b end the value 10.
so what we'll be doing today is will be understanding why this happens and, in the process, change the grammar to get rid of this very syntax error.
and when someone does a colon equal to 10, it should do a normal assignment, right?
and it should basically define variable and do a normal, simple assignment that we want to do, so let's jump into it.
and now what i'll do it is: uh, anytime we get syntax error, it mostly has to do with grammar of the language, right?
the file has been changed for version 3.99 and onwards, so the grammar is here the this: how the, the grammar of python language is defined.
let's look for colon equal to, and we find it at two places.
this is something called named expression test.
this looks like: uh, the assignment expressions.
uh, basically, walrus operator is called as named expression in the source code.
and now let's find out what named expression rules defines are.
so named expression rule is: find, a test list com something.
so, if i just move out while here, so if i named expression test over here, this is exactly how we used it, right, we used while, then followed by our assign, followed by our assignment expression, where we did command equal to input, and then this gets it a block.
so this is what is allowing us to use named expression in the while statement.
with this logic, what it seems like named expression, we can also use it with if statement.
let's look for named expression again.
we can use it with alif as well, while and some simple named expression test looks like x colon equal to.
so basically test colon equal to y, which is what named expression is.
but let's look for test list comp.
let's focus on named expression test for a while.
and now this named expression test.
so this is where, uh, the grammar is allowing a test list comp, in turn named expression test, to be wrapped around a parenthesis or a square bracket.
so this looks like the place, or rather, this is the place, where that particular rule is defined, where a colon equal to 10 surrounded by bracket works, is where uh is actually coming from.
this very statement and now, if you see, this very thing is something called as atom, looks like an atomic statement, uh, the.
it has round bracket, square bracket, which looks like list comprehension, normal dictionary or set maker having a name, number, string, none, true, false, oh yeah, so this looks like an simple atomic statement that would be treated, which could be a yield expression or a test list comp, test list comp or a dictionary set maker, uh, with surrounded by brackets.
so this is the very rule that puts in that allows parenthesis, uh, that that allows a colon equal to 10 within parentheses to work, just fine, okay, now let's find out why a colon equal to 10 without any parentheses doesn't work, right.
so, uh, if you see, we could not find any rule that shows us that it is allowed to have a normal statement like that, right.
so what python does is python explicitly has set in an exception where assignment statements have been allowed, like a equal to 10 is allowed is an explicit exception.
so, in order to find where that is defined, let's look out for, uh, quote equal to code- well, basically, single quote equal to single word, in order to find where this is used.
huh, so this single quote- sorry, this single quote equal to single quote- is part of an expression statement.
this is exactly why we can write multiple smaller statements followed by colon, and this rule is the one that is actually allowing us to do that.
a small statement can be expression, delete, pass, flow, global, non-local, assert, right, so this looks very familiar.
or this august sign is basically augmented assignment, where you do plus equal to.
so this is the place where assignment statements are explicitly allowed by the grammar right.
so now if we would want to allow, uh, let's say, colon equal to right.
so let's copy paste this entire thing and make a change to this grammar and let's say we allow just space and we put colon equal to here, right?
so with this thing, what we have done, it is we have not only allowed equal to, like a equal to 10, but we have also stated: allow a colon equal to 10 squared, right.
so this looks like something that would help us get rid of syntax error.
but let's find out, uh, when we change any grammar, what we have to do, do it is make.
uh, it actually changes the parser file which is auto generated, and then you would have to run normal make, which would build your binary, right.
and now comes the part where we would want a colon equal to 10 to work.
let me change this value to 20 and see what happens.
so we got rid of a syntax error and we allowed a colon equal to 10, or equal and equal to 22 work just fine, just as normal assignment expression, right.
so we have successfully changed the grammar and got rid of a syntax error and something that look that should have been intuitive to do.
but but how come by by, even by putting a colon equal to, how?
where exactly is that code that is treating this very thing as an equal to?
this is the grammar parser file that was auto generated, but we did not explicitly handle a colon equal to to be treated as an assignment.
in order to do this, let's look out for where expression statement is used.
let me just find expression statement in dot c files.
so when we look for it, we get an astc, which is an abstract syntax tree file for c, and let's open this and what we get is: we get and sorry, yeah, so we what?
this should be the one that is handling expression statement and which is the rule in which we made the change.
it would give me number of children to be 3, because it's like a colon equal to and 10, so 3 children of my.
here it checks for if num equal to equal to one, which means if it has just one child, as in, if i just type a and then i hit enter, then what i mean is i want to get the value of a and print it there, right?
it is doing for test list and returning null or if no error, then it is returning an expression which is with basically treating this statement as a normal expression and evaluate it.
then it is doing if, if this is- and obviously in our case a colon equal to 10, is, is, is not falling over here, then it comes over here.
it checks for first cell to be equal to a normal assignment statement and hashtag: does this type has type command something?
this is what is is treating a colon equal to as an assignment.
it is actually returning an assign node which treats my entire expression as an assignment statement, and it does the needful right.
so now we know why, without handling- so without explicitly handling- colon equal to, we were able to, we were able to, uh, basically, uh, implement a normal assignment flow while using a colon equator.
how, how, uh, how, basically, without even changing the c part of it, without explicitly handling a colon equal to, we were able to basically mimic the behavior that we wanted to.