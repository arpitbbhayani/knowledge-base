Internal structure of a Hash Table

Internal structure Hash Tables of Hash Tables One the most used data structures of widely Every language has its own implementation Hash Tables also used Python - Dictionary are as Java - Hash map building block for constructing Javascript Object Classes and its members - - Map yoking - - Variable Lookup Tables Hash Tables are designed to provide key value constant time insertions apple 5 banana 15 deletion cat 2 lookups 3 dog Two ideas to construct Hash Table 1. application key to hash key 10 , N ) apple 12762179 2. hash key to a smaller range 10 , m ) 12762179 17

1. Application keys to Hash keys we cannot put anything as a key in hash table It is limited to a specific set of types eg . string , int , tuple , ele we can also use custom types as keys if they implement ' the hash that spits integer for the object ' function out an * For some native types , the hash function is internally implemented Hash keys have a larger range say 10,232 ) to this int and a hash function converts the object range apple > f > 12762179 banana > f > 51962 cat > f > 72 1962719 dog > f > string integer

Naive implementation Because we are already getting int lil from key list , what store the value lol at index i ? if we : we get 047 insert , update , and lookup isn't this ? great This approach works well when N is small , only space required for holding array when N = 10 4 10 = 4013 N = 100 4 100 = 40013 N = 1000 4 1000 4k B N = Im 4 Im 4 MB int 32 range 4 4 billion 16GB if N = Challenges : 1. Finding this big chunk of memory is tough 2- lot of slots would remain empty

hash 2. Mapping key to smaller range If to store K keys in the hash table we are planning , we have to have size m such that array of M C- 0 (K ) This requires us to have a second step that to bin range reduces Mask key from orange smaller [0 , N ) > 10 , m ) say , we are planning to store 4 keys in hash table bin 8 we can have a Caray ] of length apple > f > 12762179 > 0 banana > f > 51962 > 5 cat > f > 72 > 3 1962719 > 7 dog > f > v v < 0 I 2 3 4 5 6 7

Adding more keys hash table If we add more keys to our . the would have to be resized holding array m 2 Me * No need to alter the first hash function large N it hashed [ 0,232 ) as key to int range to int ? why are we even hashing string The first step is simplifying our problem statement the second step making it easier to for , int int distribution optimize The first step also allows us to give great abstraction object IN -132 enabling us to support complex data types as keys