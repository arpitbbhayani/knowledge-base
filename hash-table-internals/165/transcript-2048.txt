for example, python calls it a dictionary, when java calls it a hashmap, but the core idea remains the same: it holds pairs of keys and values and supports constant time insertion, updation and deletion.
in this video, we talk about what are hash tables, how are they structured internally, and we would lay a solid foundation to understand that constant time implementation.
hash tables are indeed one of the most widely used data structures and literally every single language has its own implementation and its own nomenclature for it.
for that and this mapping is also so in most languages, classes are also implemented as hash tables, right?
so this is called as a symbol table, which is used basic, like in, through which people do variable lookups, and that is also a hash table implementation.
hash tables are famous to store key value pairs, right?
this is a simple, simple use case of a hash table, but what it brilliantly does is it gives you constant time, insertion, deletion and lookups, and this is what makes hash table super efficient.
if it could not provide your constant time insertion, deletion and look up your fundamentals of your runtime, which is classes and symbol tables, they would be slow, which makes your entire language slow.
the first idea is where you map application key to a hash key, right.
a language cannot restrict you on what key can you put in, right, it would want to support as many type of keys as possible.
so what you do is you need to somehow map an incoming key of any type to a wide range of integers, right, for example, in the range of 0 to n, it could be an entire integer in, let's say, in 32, like 2 raised to power 32 is what you can go for.
but somehow use a hash function, use your favorite hash function to map your string to an integer and then a second, uh, and then the second idea for constructing a hash table is to take this hash key and map it to a smaller range.
right, let's dive deep into the first step, where we say that application keys are mapped to hash keys like what and why?
integers, like some specific types, are there that you are allowed to put as a key in a hash table, for example, in python.
let's say you created a class and the object of it is you want to place it as a key in a hash table.
your class needs to implement a function called underscore, underscore, hash, underscore, underscore, which returns an integer right, and which would become your hash key.
this is what you are supposed to write, right, and this is the whole idea of mapping your application keys into a hash key, so from any type that you have into a type or into integer, which then becomes an input for our second step right, and this typically the function hash that i was talking about.
that typically expects you to return an integer, which means in a range of 0 to 2, raised to power 32, right?
you don't need to implement it like the language has its own implementation, but internally there has to be something that is, converting your application level key through a hash function and converting into a hash key, which is then acting as the input for our second step, right?
so this is the first step that we are doing from application domain to mapping it to a wide integer domain through a hash function.
if you are already have a way to map an application key into an integer, our very basic implementation of hashtable could be through an array.
let's say we take a gigantic array, right, we take an array where, given a key, we pass it through the hash function.
we use that integer as an index of our array and store the value at that location.
for example, my key k gets indexed, or when i pass my key k through the hash function, i get value i, right, and ah, the value i is the index at which i would be storing the value in this array.
right, if i do this, what i get is i get constant time insertion, because for a hash key- sorry, for an application key- i'm computing the hash, going to that location, putting the value constant one insert, constant one upgrade, constituent lookup, because everything is in memory.
imagine your range of hash keys is entire integer range, which is 2 raised to power 32, 0 to 2 raised to power 32, which means that from application key, one of the values from 0 to 2 raised to power 32 would come out right.
so let's see how much of space would we require if n is equal to 10, which means your arrays length is equal to 10, or the number of possible hash keys is 10, the amount of storage would require is 4 into 10 is equal to 40 bytes, because each slot of an array would be an integer where you are storing the reference reference of the value or something like that.
if it is 1 million keys that you would want to support, like that big of a range is what you are supporting, then that would be 4 mb.
but imagine if you are expecting in 32 size, right, so from application key you are converting it into a pure integer of range, 2 raised to power 32, then what you are doing- 2 raised to power 32 is rough- is more than 4 billion, and when you do it, 4 into 4 billion is equal to 16 gb.
imagine you would require 16 gb just to hold this array in memory, right and given whatever it is hashing it to, you are going to that location and putting it.
because most like because when you allocate an array, it has to be a contiguous set of bytes that are allocated, and finding this much, this big of a memory chunk, is always difficult, right?
second is, even if we get that much of allocation- let's say you have- you are mapping your application key to a hash key in the range of 0 to 232 and you are only inserting 5 keys, then you are wasting so much of space, right?
so that is where there has to be a better way to construct a hash table, which is where the second step comes in, which is really important, of mapping of hash key to a smaller range.
then we how big our array should be right, because if we are only planning to store k keys, our array should not be 2 raised to power 32, it's not practically possible.
so let's say, if that size is m, right, how big our holding array would be.
it should be somewhere that efficiently helps us put all the keys that we want in this holding array.
and this is the crux of provisioning, of finding out the sweet spot of how big our array should be, and which is what varies almost all hashtable implementations, right?
so what we'll do is, in the second step, we take the hash key, which is in the range of integer 0 to 2, raised to power 32, and map it into a smaller range of 0 to m, where m is the length of the array, and length of the array should be a function of the number of keys that you are holding, right?
so this is the second step and which is what now makes our hash table very efficient, right?
so now let's say we are planning to store four keys in the hash table so we can have a bin.
so instead of having two, raise to 32 as the holding array, we can have just eight, because we are planning to store only four keys and what we'll do is for every key we would every application key, let's say apple- it first passed through the hash function.
we take this hash key and map it to a smaller range of, let's say zero to eight, right, because our error length is eight.
when i pass through the hash function in the first step, i get value 51962- again a random number.
and then when- and this is the hash key- when i pass it through my second step and map it to a smaller range of zero to it, let's say, i get five.
so this is another hash function that we are passing right.
first, hash function converts application keys into hash can.
second, hash function converts hash key into a smaller range, right?
so 0, 5 and let's say cat hash key to 72, smaller range mapped to 3.
we are still getting constant time implementation right because each element is almost uniformly distributed across this array.
right, and this is why we need two step process or any hash table implementation request.
two step process: first from application domain key to hash key and second from hash key to a smaller range.
now let's say i want to store 12 keys.
so what you do is you try to reallocate and then re and then re-index all the keys into this new array, and that would require you to take a pause in accepting the rights that are coming in, and then you would then, once you allocate a big chunk, you move all the existing keys and then you start accepting other puts onto this hash table and- and this is what happens internally- right, and this is okay, because you are not doing very frequent allocation.
this is what internals of hash table implementations are okay.
so then, why are we even hashing from the application domain key to integer?
right, and for us, the internals of hash table, our input, is this integer that we are getting and how we would want to map these big integer range into a smaller range.
is our efficiency coefficient of our hash table implementation, like how well we do it, how well we distribute it, how will we provision it.
first step is very important and that's why we are hashing the first set of application keys into a big integer range and from this big integer into a small integer range.
it also enables us to keep our hash table agnostic of what type we are storing, because at the end, given that any, you can support literally any object and get an integer value out of it, that becomes a hash key as their own implementation.
you want to store car as a key in your hash table.
all you need to do is just implement the underscore, underscore, hash, underscore, underscore function, which returns you an integer.
right, your user doesn't have to write multiple uh hash functions per se, all it does, it just returns an integer.
you have abstracted out now your hash table implementation is working on only this integer range.
all your end user has to do is just provide you the hash function that spits out an integer for a given object.
you have the key, you have the integer, you map it to whatever range you want, the way you are storing it onto the disk, right, and if your m resizes, or your, if your bin array resizes, your end user doesn't it?
this is what we would be looking at into this series of hash table implementation.
in this series i'm planning to go deeper into a lot of implementation details of hash table and planning it to implement in raw c language using arrays and a lot of super interesting insights around it, right?