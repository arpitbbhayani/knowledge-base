Implementing Hash Sets

Implementing Hash Sets Hash Set is a data structure that implements set over a hash table { apple ball . , cat , dog } The idea is to allow only unique values in the data structure . but how do we implement it with Hash Tables Application Keys Hash Range Hash Table apple apple ball cat - cat - dog dog ; - ball string int 32 int 32 int (m ) Different application keys map to same Hash key 4 eg : cat and dog Kelo From same hash key they , would be placed in [ collision different slots of the hash table handling ] Hence While have to , looking up we compare actual application key , and cannot just rely on hash key

Hence We need to store Hash Table , the apple application keys in the Hash Table - the hash keys along with the key - - cat - dog avoid computing tnlkl he = - ball struct key { void * key : < hold key of any type int hash hash stored to avoid computation key ; < re - - } Implementation detail : if we support generic key lvoid * ) how hero such ? would we compare keys hence , we would need a custom comparator for the type Implementation detail : when we delete a key from the hash table to clean them up it may be our responsibility [ manual memory management ] Hence , as part of robust implementation we would need comparator function and destructor function

Implementing Hash Set With Hash Table With Chaining Hash Set overall struct node { will have L int 32 hash _ key ; 1. array void * key ; 2- # size struct node * next ; 3. # keys } 4. comparator function application key 5- destructor function hash of the key to avoid re - computation Implementation Detail 1. To have fast insert keys head the list , prep end at of 2. To have just unique keys . We have to check and insert a little slow on time but good on space

Implementing Hash Set With Hash Table With Open Addressing struct slot { slot is Marks if Hash set overall boot is _ empty ; empty have deleted will boot is _ ; marks if key is 1. int 32 hash key ; soft deleted array - # keys key ; 2- void * 3 . # used slots } 4. comparator function application key 5- destructor function hash of the key to avoid re - computation Implementation Detail and delete matching hash key During insert . lookup when we find the to we need explicitly compare the keys to check its existence . Implementation Detail Destructor should be invoked only when cue are hard deleting the key