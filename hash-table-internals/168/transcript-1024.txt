thanks, so conflicts are inevitable as we are trying to map a large range of application keys into a smaller hash table.
in the previous video we looked at what open addressing is and how it tries to resolve conflicts in hash table while accommodating all the keys that come in.
there are multiple ways of implementing the probing function and one of them is linear proofing, which we will take a detailed look today.
it is trying to utilize the space of the hash table as much as it can right without using an auxiliary data structure and probing function it is: it tries to place the key, it tries to basically find the next available slot it.
basically, a good probing function generates a sequence of permutation of all the indexes of your hash table and we try each one of them one by one, and then the first available slot we find we try to place it right.
what it does is it says that if i face a collision, let's say if i'm facing a collision at index 3 right and i'm trying to insert a particular key, the hash function, when i passed it it gave me the index 3 right.
so if let's say this index 3 is occupied by some key, then what we would do is we would go to the image at right and see if index 4 is available.
we, like the keys, would be hashed at random locations, but if that is occupied we would move to the right to find the first available slot.
we circle back to index 0 and resume our lookup and, like always, open addressing has this problem where if you- i- have filled all the slots of your hash table, then you cannot insert any more keys and obviously that limitation holds with open addressing in general.
right now let's quickly take a look into how hash table operations work with linear probing.
so all of them are trying to get inserted into my hash table at index2.
this is a linear lookup that you are making, one after another, to see the first available slot and put it there right now let's take a look at another operation: key lookup.
let's say, during the traversal if we encounter an empty slot, if i encounter an empty slot, it means that there would not be any key that has collided on that address, like the key that you are looking for has not collided on there is not yet present in the hash table, otherwise that would not have been an empty slot, right.
otherwise, unless you find any key, you would continue iterating through the array to find the key of your interest and eventually you will find it if it is there in the hash table, right.
the worst case of this is you are iterating the entire hash table, the entire big range of array, in case every single slot is filled.
you will be iterating through the entire hash table to look up for a key right, and that is a problem.
so whenever a key is there that you needs to be removed or that needs to be deleted from the hash table and you are using linear probing, you would start from that index, move forward until you locate the key and soft delete that key right, so that you, by looking up, you can continue your iteration moving forward right.
this is how the three operations, the three key operations of a hash table would look like with linear probability.
let's say you were iterating on the array a and your hash function splitted out 2 for a particular key.
though your os, your cpu hardware, is anyway caching those things and it is very beautifully leveraging it, which is where linear probing gives a very solid performance when it comes to handling collision keys right and looking up them and deleting them.
which means that, let's say, on an average per slot, there are five collisions right when you are accessing one of the key, but anyway, bringing all of them in a cpu cache.
but the worst case is still painful when entire hash table is filled and you have to iterate all of them.
challenge number one: a bad hash function would make linear probing very inefficient, right, because it would have to do like.
so let's say, if you have a hash table of size eight, every single one of them is hashing to the same location too, then eventually your hashtable fill out and because it's a poor hash function, you would always have to do linear lookup across the table.
so a bad hash function would ruin your linear probing, right?
that is really important, which is why, with linear probing, murmur hash is very much preferred, because it's really very random, like it looks near uniform the way it distributes it.
so that's where linear probing has its disadvantage: that it relies heavily like a poor hash function will ruin the entire experience, right?
so, for example, what would happen over here is: let's say i have key k1, k2 and k3, and k1 hashes to index 2, k2 hashes at index 2, k3 hashes to index 3, right?
so this is where you see a lot of clusters being form of collided keys which are impacting each other somewhat the other way, right, plus a bad function if it tries or if it uh places or if it generates localized hashes.
for example, if you're having a range from 0 to 100, but your hash function is creating or is basically producing values, which is really clustered in the range of, let's say, 10 to 20, right?
you almost nearly uniformly distributes your key across the entire hash table, right?
right, this is a big problem with linear hashing.
that is why, again, a good, uniform hash function is very important, right?
you are, you are just converting your hash table into a linear lookup, which is very poor, right?