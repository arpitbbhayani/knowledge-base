Linear Probing in Hash Tables

Conflict Resolution with linear Probing conflicts are inevitable ! With Open Addressing , we use a to the slot probing function find where the key should be placed One such method linear is Probing Probing Function key attempt index Probing plk i )=j Function is defined as , to we use the probing function find the first available slot the same function is used during lookups linear Probing plk.it = KIKI + it % m we search linearly from the hashed index until the end the table and then wrap of from the start K, 0 I 2 3 4 5 6 7 K,

Hash Table Operations : Adding a key hlkal = 2 kg We invoke the probing function to find r r the slot in the hash table . Ki k } K2 0 I 2 3 4 5 6 7 if that slot is occupied . We traverse , the hash table and find first available slot . It is like a linear search from the slot Hash Table Operations : Key lookup hlkal = 2 kg the we invoke probing function to u get the slot . K, K } ka ka 4 > 15 ' 2 3 if key present at that index . We return ki , h =3 if not , we traverse to the right and p try to find the key . K, Kz Kz Kg if we encounter the key , we return o i 2 3 4 s 7 U o > if we reach the end , we start from index 0 we stop iteration as soon as we encounter an empty slot . Worst case : linear lookup across entire table

Hash Table Operations : Deleting a key say , DEL kz then GET ka kq hlkal = 2 Delete is a soft delete so that we could continue to the reaching keys r ki ks ka slotted further 0 I 2 3 4 5 6 7 7 linear hlkal 2 probing simple fast = is and kg Simple literally linearly iterate to r : we r k, Kz K2 find the next slot 0 I 2 3 4 5 6 7 7 Fast : isn't linear traversing slow ? Not ! because leverage localized access Cpu cache really we . f. When we access location a 12] a memory , a 13 ] the page is cached on CPU and the page are ] 915 ] contains elements neighbouring . CPU cache So , subsequent accesses are served from linear probing gives a constant time performance worst is still painful few collisions case avg case =

Challenges with linear Probing A bad hash 1. function would make linear probing a full hash table search and hence inefficient Hence , using a good hash function is very important Murmur Hash is preferred 2. linear probing suffers from clustered collisions hashes to 2 K2 if K . kin , K2 hashes to 2 Ki K2 ks k } hashes to 3 0 I 2 3 4 5 6 7 kz Because Ki and Kz collided , ! Ks 's primary slot got occupied hashed to locations and this would also impact - keys subsequent Hence a good uniform hash function is essential for linear probing to be efficient .