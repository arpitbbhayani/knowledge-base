for example, if i'm trying to put apple ball, cat and dog in my headset, if i'm trying to insert another apple string in this asset, it will discard it right.
for example, i want to store english words in my set, but the hash table understands integers right because using integers, it is trying to find the perfect slot and place it there right.
it's a two-step hash process where first your application keys are hashed into an integer range, which is two risk to power 32, and from there it is, for it is hashed to the location in your hash table.
so the first conversation happens from string to integer 32 and from integer 32 to a small integer which would be the index in the hash table.
and this is where things become interesting, because now, say, multiple application keys can hash to the same location, right.
for example, let's say cat and dog hash to the same location.
right now, when i'm looking for, let's say, dog, i would have to go to the hash table- and actually i'll, i've like in almost order when i've reached to that array index.
so if you are passing a string, you have to do string matching or we have to do string eq, we have to do a string equality check in order to see if the key is exactly cat or doc.
so even after you reach to that location, you would have to do a key comparison to find out if your key is the one that you are looking for, right?
now, what do we need to store in the hash table?
right up until now, in the hash like, what we are trying to store is, we are trying to store a key which has an application context, for example, a string of an integer.
actual hash table would be key.
like, let's say, if i'm implementing it in c, i would store a white star so that i can put it.
i need to store that hash key over here as well.
you do not want to recompute it again and again, so that is where you might, or you would need to have an integer 32, or you're to have a 32-bit integer which you are storing the hash key that you have computed, so that you save time by not doing recomputation and just keeping it handy for you to do a quick check.
another implementation detail now here: if i am accepting a void star, which means a generic type of object to be stored in my hash table, how would i know that if this key is equal to the key that i am looking for, for example, cat and dog are placed in the same slot in the hash table?
i have to do that string equality check, which is where, because we are accepting a generic type void star, we have to also accept a comparator function whose job would be: given two keys, it would tell if they are equal or not, and a hash table needs to take this while building itself right.
so, as part of your constructor, as part of setting up your hash table, you need to accept a generic key comparator function whose job would be given to: given two keys, it would tell if those two keys are same or not, and, because this depends on the application context, its responsibility, while setting up the hash table, to provide this key comparator function.
okay, so that our hash set implementation becomes generic enough, right, okay?
second, second implementation detail: when we delete a key from the hash table, it may be our responsibility to clean them up, right?
so then, when we delete that key, it might be responsibility of our hash table to delete the reference as well.
so whenever we are deleting a key, we would invoke the key destructor function that is provided to us during the initialization for that particular key so that we can do free and other pointer changes if we would need to.
so as part of very robust generic hash set implementation, we have to accept a key comparator function and a key destructor function that we would invoke.
now let's take a look at how do we implement hashet on a hash table that uses chaining.
so as setup we would need, like overall attributes of your hash set, would be: the array that it is holding, the area of linked list that it is holding.
first, is the hash key right?
that would help us keep any type of key in our hash set.
second, if you just want to have unique keys, then what we need to do- and that's what set does- if you just want to have unique keys, then you have to always check and insert.
so before inserting you need to check if the key exists.
right now let's take a look at implementation of hash set with hash table having open addressing.
uh, hashtag implementation with chained hash tables.
right, again, very similar structure- hash key, the storage and void star key, just to ensure that we can accept any particular type.
so during lookup- insert and delete- when we find a matching hash key, we need to explicitly compare the keys to check for its existence.
right, and the final implementation detail is: your destructor should only be invoked when we are hard deleting the key, given that in open addressing, whenever we delete a key we are doing a soft delete and then during resize we are doing hard delete.
so destructor function needs to be invoked only when we are doing hard delete of the key, otherwise dangling pointer, illegal reference and whatnot will crop up.
given that we understand the hash table, the implementation is straightforward.
but i wanted to highlight some really interesting uh micro nuances that we would have to think about when we are implementing hash sets using hash tables.