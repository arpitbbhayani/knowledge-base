so in the previous video we looked at the quantification of performance of a hash table through a factor called load factor, which is represented by alpha, and it is just a fraction of the number of keys that are hash table holds divided by the total number of slots that you have.
so if you have a hash table with 50 slots and you have placed 25 keys, your load factor becomes 25.50 is equal to 0.5 right.
so which is where, in order to maintain a consistent performance upon when your load factor hits a certain threshold, you might want to resize your underlying array right, so that you can maintain your consistent performance across.
so resizing is a very expensive operation because you have, like you have, an underlying error in which you are placing your keys.
if you become too aggressive, which means you are very frequently resizing your array, you are wasting a lot of time doing resizing and moving keys here and there, right?
so during insert, if we trigger the resize, we reallocate a new array of two times the size and rehash the key.
to put it really simple, let's say i have an array of size 4 which holds keys k4, k1, k3 and k2 in this order, and my hash function, through which i'm deciding which key goes where, is h of k mod m, m old.
we have heard it so many times, so many times that hash tables, whenever we are triggering resize, we always have to double.
okay, to understand why we need to do it by two, let's say we, we go to the other extreme and say we always increase the array by one, right.
so what we would do is we would allocate a hash table of slot one and whenever we add something to it, we would add a new, we would reallocate the array and then insert a new element into that right.
i'll be allocating an array of size one and i'll be inserting the element, so number of operations one.
the total number of operations would be 3, because one for the resize, two for copying of element and one for inserting a, c.
so now, overall, if i'm inserting n keys, overall, if i'm inserting n keys in my hash table, the number of operations would be 1 plus 2, plus 3 plus 4 and so on and so forth, plus n right, because every time you resize, like every time you are resizing your array, and then you are placing your key in right.
so if i'm doing, if i'm being very aggressive on the resize, where i'm saying that i'll just allocate the bare minimum space that i would need to my overall time complexity of inserting data into hash table, like inserting n keys in my hash table, would be order of n square, very expensive, right.
okay, so with this assumption, let's say we insert n by two elements in the area of size n by two, right, so i had n by two minus one elements.
so what i'll have is i'll have i'm having an n by two length array, i'm inserting my final element into it which completes my n by two array, and then i'm triggering a resize.
so now my array size would be n and the state would be it would have n by two elements filled while the other half is empty, right.
right now i have an array of size n where i just filled by n by two elements, there is still n by two space left.
so while inserting the last element i'm triggering a resize right.
so the number of operations would be equal to n by 2 minus 1, because it is taking you order one time to insert n by 2 minus 1 elements, because post that only it would trigger a resize.
you did then 1, or then order 1 to insert the final element, right, plus 2n, as part of allocation, because you are resizing the array.
so the total number of operations, when we were very aggressively resizing by 1 every time, it was order of n square n into n minus 1 by 2..
you mod that number by the size of the array to get the index and then you place the key to at that place, right.
so here the mod operation is super important because it bounds your integer 32 range into the size of your hash table so that you can place your key at that particular index.
so let's see what happens when my m is 4, which means my, the number of slots in my hash table is 4.
let's see how my keys would change, like what is the output of my mod function.
so if the keys are deleted from the hash table, then it does not make sense for us to keep it bloated, right, let's say, for hashtable only has one value and you have allocated 128 slots.
so if your table has n slots, then it would have, at max, n by two elements before we trigger a resize right because because- sorry- it would have at max n by two elements.
if a table has n slots, it would have n by two elements, otherwise it would have triggered a resize right.
so, number of elements: if let's say i have an array of slot 16, if i had, if i have had- eight elements, i would have triggered a resize.
so when my slots is 16, my number of elements would be seven at max, because at eighth element we would trigger a resize right.
this means that we need to have enough leeway where, let's say, we trigger a resize when i we have n by four elements, basically n by four minus one.
we need to shrink when the number of elements are such that a few insertions after that would not cause- would not cause a immediate resize, right.