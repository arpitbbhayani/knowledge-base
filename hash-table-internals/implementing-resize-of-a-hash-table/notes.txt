Implementing Resize of a Hash Table

Resizing Chained Hash Tables or tables with Open Addressing t n Resizing is important to maintain a consistent performance Performance degrades as . load Factor increases \ longer lookups multiple collisions Resizing Chained Hash Tables To decide when to to know the load resize we need factor and hence keep a track of # table and the table keys in size of Resize is triggered insert upon insert _ key (k , table ) { = count _ keys / length _ table if It > = 0.51 { resize ( table , length _ table 2) ; } }

Table is shrunk upon delete key delete _ key 1 table , key I { = count _ keys / length _ table if I < 0.1251 { resize ( table , length _ table / 2) ; } Resize is all about - allocating a new array of desired size insert all keys in new array - - delete old array once movement is complete Two ways to prepare new array simple but expensive 1. Re insert all - existing keys in the new one Instead 2 of re allocating linked list nodes - . . just adjust the pointers slightly efficient 3

Resize hash tables open addressing lookup ( Ks ) In open addressing , we always soft delete the elements , so that we can ks ko k, ks ka ka 1<8 14 the reach keys further in the collision chain key hash table Hence , when a is deleted from . we CANNOT counter reduce the key because the deleted keys also slow down key lookups To handle this , we need 1. keys counter to keep track of active keys in table insert counter keys + + counter delete keys - - 2- Used counter to keep track of slots actually occupied insert used counter + + delete nothing # Used instead toad factor # used # = = of keys H s

Resize is triggered insert upon when the table is resized , we only rehash the active keys skip the deleted and keys . insert key (K table ) { load factor used _ , = length count used = _ / length _ table if It > = 0.51 { resize ( table , length table 2) ; } . } Table is shrunk upon delete key when the table is shrunk . we only rehash the active keys skip the deleted and keys . delete _ key 1 table , key I { load factor = used = count - Used / length _ table length if I < 0.1251 { resize ( table , length _ table / 2) ; } }