in the previous videos we talked about linear probing and saw how good it is, but we learned that it suffers from clustered collisions. and then we spoke about quadratic probing and saw how it addresses the issue of clustered collisions. but can we do better? in this sixth video of the hash table internal series, we talk about the final technique of conflict resolution, called double hashing. understand how it addresses a big concern with clustered collisions. learn about a few things that would help us choose a good hash function and conclude by looking at the advantages of using double hashing as a probing technique. but before we move forward, i'd like to talk to you about a course on system design that i've been running for over a year now. the course is a cohort based course, which means i won't be rambling a solution and it will not be a monologue. instead, a small, focused group of 50- 60 engineers every cohort will be brainstorming systems and designing it together. this way, we build a solid system and learn from each other's experiences. the course to date is enrolled by 600 plus engineers spanning nine cohorts and 10 countries. engineers from companies like google, microsoft, github, slack, facebook, tesla, yelp, flipkart, dream 11 and many, many, many more have taken this course and have some wonderful things to say. the coolest part about the course is the depth we go into and the breadth we cover. we cover topics ranging from real-time text communication for slack to designing our own toy load balancer, to quick buzzes, live text commentary to doing impressions counting at scale for any advertisement business. in all we would cover roughly 28 questions and the detailed curriculum- uh split week by week- can be found on the course page, which is linked in the description down below. so if you're looking to learn system design from the first principles, you will love this course. i have two offerings for you. the first one is the live cohort discords which you see on the left side, and the second one is the recorded course, which you can see on the right side. the live code based course happens every two months and it will go on for eight weeks, while the recorded course contains the recordings from one of the past cohorts, as is. if you are in a hurry and want to binge learn system design, i would highly recommend you going for the recorded one. otherwise, the live code is where you can participate and discuss things live with me and the entire cohort and amplify your learnings. the decision is totally up to you. the course details, prerequisites, testimonials can be found on the course page at pittsby dot me slash master class and i would highly recommend you to check that out. i put the link of the course in the description down below. so if you are interested to learn system design, go for it. check out the link in the description down below and i hope to see you in my next cohort. thanks and like always, conflicts are inevitable because we are trying to map a large applications key space into a smaller hash table. the technique that we are discussing today is called double hashing, which is a probing technique used with open addressing. open addressing does not use an auxiliary data structure like a linked list to store collided keys. instead, it leverages the free slots available in the hash table itself. right, so if there is a collision, we try to find a slot, a free slot, where we can place our key. but how do we find it? we use something called as a probing function. in the previous couple of videos we looked at linear probing and quadratic probing to solve it. it was just to read it. just to do a very quick reiteration of that. what is the probing function? probing function is defined as p of k comma i, where k is the key and i is the attempt number. so we start with attempt 0, we get the first primary slot, then we start with, then we do attempt and if there, if the slot is not empty, we change the attempt number. so from i changes from 0 to 1, and with first attempt we find another slot where we can place the key. if that is also filled, then 2 will find next slot to place the key, and so on and so forth until we look up all m slots of the table right. this is the importance of probing function. so there are two very uh simple techniques to which helps us probe the keys and place it at the right slot in the hash table. first of them is linear probing, where what we do is if a particular slot is like if i want to place a particular key in my hash table, and if that slot is not empty, then we find the first immediate slot to the right of it which is empty and we place our key there. a very simple mathematical representation of this would be: p of k comma i is equal to h of k plus i, where i is the attempt number. so for the zeroth attempt, it would go to the primary slot first attempt. it would go to the next plot, then the next, then the next until it finds the empty slot right. this was linear probing. linear problem suffix from the problem of clustered collisions, which means that with the poor hash function, a lot of they would form a lot of clusters where a lot of collided keys would be placed, because we are just moving a step to the right, right. so you would see clustered collisions spread across your hash table, which means the more collisions happen, the longer it would take for you to do kilo cups because you would have to do conflict resolution. or uh yeah, you have to do conflict resolution, right? that is the problem with linear problem. so then, a better way to do this is something called as quadratic grouping. but instead of finding one slot to the right, we use our arbitrary quadratic function to find the next slot right. so instead of jumping with i, we jump with a constant factor of i square. so plus 1 plus 4 plus 16, plus 1 plus 4 plus 9, plus 16 plus 25, and so on, but with some arbitrary probability formula, right, this would help us almost utilize a space of your hash table, plus it would keep. it would keep your clustered collisions. it would basically minimize. it would not eradicate, but it would minimize the chances of clustered collision because it is jumping with a very high leap in order to find the next plot. so that is how quadratic problem, uh, that is how quadratic probing addresses this concern. i've talked about this too in detail in the previous, in the previous couple of videos. in this one we would look at the third and the final technique to do conflict resolution, or uh, in hash table, which is called double hashing. so if the problem that we are trying to address is only of clustered collisions, then why to go linearly to do something right? why to use a linear function or a probe or a quality function to do it? why can't we use a second hash function? so, for example, we use the first hash function to find the primary slot and then we use a second hash function, multiplied with your attempt number, to find the next, to find the next slot right. so this is the core idea of double hashing, where your first hash function gives the primary slot and, upon collision, it uses a second hash function as an offset, multiplied with the num, multiplied with the attempt that you are making. so first attempt, second, edward zones over. just a simple mathematical representation of this would be: p of k comma i is equal to h 1 of k, which is a primary hash function, plus i times h 2 of k right? so by not relying on a quadratic function or a linear function in order to find an x slot, we are leveraging a second hash function applied on the same key, which means we are first getting near uniform distribution with the first hashing function and upon collision we are using another hashing function to find the next slot right. so this way we are trying to leverage the entire hash table without following any specific pattern. because it's a hash function, it has a uniform probability of hashing to any of these slot. so, first hash function, uniform probability of hashing anywhere in the hash table. upon collision it would fire another hash table. so again, a uniform probability of sitting anywhere in the hash table, making us, or literally minimizing the repeated collisions and clustered collisions in our hash table. and this is the core idea and the intuition behind double hashing. so with quadratic probing you exactly know how long were you taking jumps from, but with double hashing you don't know that all like there is no fixed pattern. it totally depends on the key and the hash function, on how big your leap is going to be and which is what the best part is, right. so, again, your probing function would be h 1 of k plus i times h 2 of k, right? so as i increases, as number of attempts increases, the leap would vary, right, and it totally depends on the key, which means that you will get a very nice equi-spaced distribution of your of your collisions, of your clustered collisions, across your hash table, which is what the best part is. so, because it does not follow any specific pattern, which is why it reduces or it minimizes the chances of having clustered collision, which means a lot of clustered collisions placed in your hash table, right? there might be some cases where hashta, where hash function, collides, but it would not be significant. in most cases it would not be even there, right? so a very simple sequence of this would be: for your key k, if you are trying to place it the first time, you would fire h 1 of k plus 0 times h 2 of k. you will get the primary sort, which is h 1 of k, right? if that slot is occupied, you'll go. you'll find the next plot. how will you find it? you'll change attempt to 1.. so h 1 of k plus 1 times h 2 of k, right, so that would be your next slot. if that is occupied, you will find the next slot with h1 of k plus 2 times h2 of k, right? it might take you anywhere in the hash table, right, and that is the beauty of this algorithm, right? okay, so now let's take a look at few considerations that you have to make while choosing a second hash function. the first hash function we all discussed, like a murmur hash, would do a really solid job, right? but murmur hash, although it is doing a very uniform, distribute distribution. but second hash function has to be a little more like. we have to be little more picky about the second hash function, right? because second hash function has this very strong response or very important responsibility of ensuring that it covers the entire spectrum, right? so how do we do about it? so there are three major- uh, three major- criterias of choosing a second hash function. first one: the second hash function should never return 0, because if your second hash function returns 0- which means your- you would again circle back to the first one. so what would happen is you are not literally leveraging your second hash function at all, which should give you the offset. so we are, because if your second hash function ever returns a zero, i times the number of attempt. times zero is zero. so p of k comma i is equal to h one of k. so you are again going back to the primary slot which is increasing your collisions. that you have, right, so which is a very poor choice. so your second hash function should never return 0. second is it should cycle through the entire table and order would not matter, which means that when your hash function- the way you're choosing your hash function, so i times hash function- this factor should cycle through every single, every single slot of your hash table so that you do not have any slot m. you do not leave any slot empty of your hash table when you are trying to place a particular key right. it has to cycle through the international order would not matter. it might go to index two and then seven and then one and then four and then five and then three, but it has to cover all the indexes. so i times h 2 of k should cover your entire spectrum, right? third is your second hash function should be fast to compute and it should be nearly a random number generator. so fast to compute because if this takes time, your overall, your overall conflict resolution strategy would take time. right, it needs to be very fast to cover because there are hash functions which are extremely computationally heavy and you cannot use such hash function. right, and the the value that is in the i times h 2 of k. it should be nearly similar to a random number generator. i'm not saying it should be a random number generator, but it should be with this. what i mean is it should be so uniform that every slot of my hash table is equally probable to occur. this way we would ensure minimized clustered collisions in my hash table. right, and it's not difficult to choose the second hash function. you might not choose a merver hatch for this or an md5 hash for this. it would be a simple, arbitrary mathematical function whose job is to iterate through your entire thing, and it's not hard. it's really not hard. a simple cubic function also would work. it is also a hash function. a hash function is anything that maps your key into an integer space. that's all. it is right. so long as you're able to fulfill these three criteria, you are good, right. okay, now let's conclude with looking at the advantages of double hashing. so double hashing, obviously we look at it as a betterment of your linear and quadratic probing. it is to some extent because it addresses the problem of clustered collisions. but still there are some hiccups here and there which we'll talk about in detail in the next video. but still, looking at the advantages of double hashing, the first one it is it gives you uniform spread upon collision. right, with linear probing you had a fixed pattern. you always moved one to the right. you had a fixed pattern. so what would happen is where one collides, where one key collides and it occupies the next slot, the other key that was supposed to be placed in the next slot will also start to have collision. so there will be problem of cascading collisions because they're all they're all contending for a similar or for a closer set of slots. but with double hashing you get a very nice uniform distribution across your hash table, which means the degree of collisions on a particular slot will be less, which means you would have a faster lookup types. second advantage: it follows no specific offset pattern and it purely depends on the key. because of this, what happens is. with linear probing, you knew the pattern. with quadratic probing, you knew the pattern. with here, you cannot predict the pattern because it is totally key dependent, so it can be placed at anywhere in the hashtable. so that's why you get a very nice spread across your table, right. and third, it is least prone to the clustering problem. again, because of uniform distribution, it is least prone to the clustering problem, right, and which is the beauty of it. so, which means that you will have very short probing path, which means that very fewer collisions per slot in your hash table. so, which is why double hashing is a very preferred technique in the world of hash tables. right, because for each, because of its uniform distribution, the number of collisions per slot will be very minimal. and this is what makes double hashing as a technique very, very, very special. obviously, performance problem might be there, which will touch up on the next time, but still it's a pretty solid method to talk about. and that is all about double hashing. i hope you found it interesting. this was the final technique that we are going to discuss about, uh, hash tables, and next we will be talking about how to make our hashtables perform and talk about those. my new cpu os level optimizations to make our hash table super perform button. how do we make those decisions on picking one over other? we'll be talking about that. so yeah, this was the sixth video in the hash table internal series. i hope you liked it. if you liked it, give this video a big thumbs up. if you like the channel, give this channel a sub. i post three in-depth engineering videos every week and i'll see in the next one. thanks, saturn. [Music] you.